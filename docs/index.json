[
{
	"uri": "https://akaish.github.io/KittyORMPages/constraints/l3_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (\u0026#34;CAT\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v. 1 DROP TABLE IF EXISTS cai; DROP TABLE IF EXISTS random; DROP TABLE IF EXISTS complex_random; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/bulk/l2_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (\u0026#34;CAT\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v. 1 DROP TABLE IF EXISTS cai; DROP TABLE IF EXISTS random; DROP TABLE IF EXISTS complex_random; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/delete/l2_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (\u0026#34;CAT\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v. 1 DROP TABLE IF EXISTS cai; DROP TABLE IF EXISTS random; DROP TABLE IF EXISTS complex_random; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/find/l2_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (\u0026#34;CAT\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v. 1 DROP TABLE IF EXISTS cai; DROP TABLE IF EXISTS random; DROP TABLE IF EXISTS complex_random; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/save/l2_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (\u0026#34;CAT\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v. 1 DROP TABLE IF EXISTS cai; DROP TABLE IF EXISTS random; DROP TABLE IF EXISTS complex_random; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/update/l2_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (\u0026#34;CAT\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v. 1 DROP TABLE IF EXISTS cai; DROP TABLE IF EXISTS random; DROP TABLE IF EXISTS complex_random; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/datatype_mapping/l3_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (\u0026#34;CAT\u0026#34;, \u0026#34;TIGER\u0026#34;, \u0026#34;LION\u0026#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v. 1 DROP TABLE IF EXISTS cai; DROP TABLE IF EXISTS random; DROP TABLE IF EXISTS complex_random; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/getting_started/l1_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for schema simple_database v. 1 CREATE TABLE IF NOT EXISTS simple_example (id INTEGER NOT NULL PRIMARY KEY ASC, random_integer INTEGER, first_name TEXT); Drop schema script generated by KittyORM for schema simple_database v. 1 DROP TABLE IF EXISTS simple_example; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/dropcreate/l5t2_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for database mig version 2 CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228, current_timestamp INTEGER); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT); CREATE INDEX IF NOT EXISTS m2_sa_index ON mig_two (some_animal); Drop schema script generated by KittyORM for database mig version 2 DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; Migration script generated by KittyORM for database mig from version 1 to version 2 (DC migrator) DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228, current_timestamp INTEGER); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT); CREATE INDEX IF NOT EXISTS m2_sa_index ON mig_two (some_animal); "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/fsmigrations/l5t4_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script for database mig version 4 CREATE TABLE IF NOT EXISTS mig_four (id INTEGER NOT NULL PRIMARY KEY ASC, mig_three_reference INTEGER NOT NULL REFERENCES mig_three (id) ON UPDATE NO ACTION ON DELETE NO ACTION, mig_two_reference INTEGER NOT NULL REFERENCES mig_two (id) ON UPDATE NO ACTION ON DELETE NO ACTION, creation_date INTEGER NOT NULL DEFAULT CURRENT_DATE ); CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, new_sv_name TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;, random_long INTEGER DEFAULT 22); CREATE INDEX IF NOT EXISTS m3_rnd_long ON mig_three (random_long); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER, some_animal TEXT, some_animal_sound TEXT); Drop schema script for database mig version 4 DROP TABLE IF EXISTS mig_four; DROP TABLE IF EXISTS mig_three; DROP TABLE IF EXISTS mig_two; Migration script for database mig from version 3 to version 4 (Filescript migrator) -- minus FK M2.migOneReference ALTER TABLE mig_two RENAME TO mig_two_old_t; CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER, some_animal TEXT, some_animal_sound TEXT); INSERT INTO mig_two (id, mig_one_reference, some_animal, some_animal_sound) SELECT id, mig_one_reference, some_animal, some_animal_sound FROM mig_two_old_t; DROP TABLE IF EXISTS mig_two_old_t; -- minus M1 table DROP TABLE IF EXISTS mig_one; -- plus M4 table CREATE TABLE IF NOT EXISTS mig_four (id INTEGER NOT NULL PRIMARY KEY ASC, mig_three_reference INTEGER NOT NULL REFERENCES mig_three (id) ON UPDATE NO ACTION ON DELETE NO ACTION, mig_two_reference INTEGER NOT NULL REFERENCES mig_two (id) ON UPDATE NO ACTION ON DELETE NO ACTION, creation_date INTEGER NOT NULL DEFAULT CURRENT_DATE ); -- rename M3.some_value to M3.new_sv_name and add M3.random_long ALTER TABLE mig_three RENAME TO mig_three_old_t; CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, new_sv_name TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;, random_long INTEGER DEFAULT 22); INSERT INTO mig_three (id, new_sv_name) SELECT id, some_value FROM mig_three_old_t; DROP TABLE IF EXISTS mig_three_old_t; -- add index on M3.random_long CREATE INDEX IF NOT EXISTS m3_rnd_long ON mig_three (random_long); AfterCreate script for database mig version 4 INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 1); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 2); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 3); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 4); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 5); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 6); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 7); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 8); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 9); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 10); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 11); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 12); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 13); AfterMigrate script for database mig version 4 INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11111111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11); INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1); "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/overview/l5t1_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for database mig version 1 CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL, some_integer INTEGER); Drop schema script generated by KittyORM for database mig version 1 DROP TABLE IF EXISTS mig_one; "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/simplemigrations/l5t3_schema/",
	"title": "DB schema",
	"tags": [],
	"description": "",
	"content": " Create schema script generated by KittyORM for database mig version 3 CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;); CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT, some_animal_sound TEXT); Drop schema script generated by KittyORM for database mig version 3 DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; DROP TABLE IF EXISTS mig_three; Migration script generated by KittyORM for database mig from version 2 to version 3 (SimpleMigrationScriptGenerator migrator) ALTER TABLE mig_one RENAME TO mig_one_t_old; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); INSERT INTO mig_one (id, creation_date, default_integer) SELECT id, creation_date, default_integer FROM mig_one_t_old; DROP TABLE IF EXISTS mig_one_t_old; CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); ALTER TABLE mig_two ADD COLUMN some_animal_sound; CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;); DROP INDEX IF EXISTS mig.m2_sa_index; Migration script generated by KittyORM for database mig from version 1 to version 3 (SimpleMigrationScriptGenerator migrator) ALTER TABLE mig_one RENAME TO mig_one_t_old; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); INSERT INTO mig_one (id, creation_date) SELECT id, creation_date FROM mig_one_t_old; DROP TABLE IF EXISTS mig_one_t_old; CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT, some_animal_sound TEXT); CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;); "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/getting_started/",
	"title": "Getting started with KittyORM",
	"tags": [],
	"description": "",
	"content": " Gradle setup First step is to add KittyORM via Gradle to your project: [TODO code block gradle depencie]\nKittyORM configuration and implementation Create package for storing your POJO models, KittyORM database class, KittyORM helper class (if necessary) and KittyORM extended mappers (if necessary).\nFirst step: extend KittyDatabase class, implement default constructor and annotate it with @KITTY_DATABASE annotation (and, if necessary, with @KITTY_DATABASE_HELPER).\nSecond step: create your first POJO model by extending KittyModel class, implement default constructor and annotate it with @KITTY_TABLE annotation. Each model field of KittyModel POJO implementation that corresponds database table column also has to be annotated with @KITTY_COLUMN annotation.\nThird step (optional): create extended CRUD controller by extending KittyMapper class, implementing default constructor and adding business logic. To make what CRUD controller you want to use with given POJO model you can just use default naming rules (SomeModel.class, Somemodel.class and even Some.class POJO would use SomeMapper.class extended controller if found) or (better choice) annotate model POJO with @EXTENDED_CRUD linked to actual extended CRUD controller class implementation.\nFourth step (optional): create extended database helper by extending KittyDatabaseHelper class and make sure that your KittyDatabase class implementation would return new instance of your extended database helper via KittyDatabase.newDatabaseHelper() method.\nIn this lesson we create simple database that contains from only one table and would interact with it using default CRUD controller. This demo contains many database domains, so database domain was set in @KITTY_DATABASE. Also it is better to set this value if your application uses a lot of libraries so KittyORM would seek POJO and CRUD classes related to KittyORM only in specified location(s).\nWorking with entities \n Demo application screenshots for this article  This example shows basic KittyORM usage when you just want to store some information in your database. Just very simple database to go. Database would be created at first call of getMapper(Class\u0026lt;M\u0026gt; recordClass) method of SimpleDatabase.class instance, it would be named simple_database and would contain only one table called simple_example. This database would have version 1 by default.\nSimpleDatabase.class: 1package net.akaish.kittyormdemo.sqlite.introductiondb; 2 3import android.content.Context; 4 5import net.akaish.kitty.orm.KittyDatabase; 6import net.akaish.kitty.orm.annotations.KITTY_DATABASE; 7 8@KITTY_DATABASE( 9 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.introductiondb\u0026#34;} 10) 11public class SimpleDatabase extends KittyDatabase { 12 13 public SimpleDatabase(Context ctx) { 14 super(ctx); 15 } 16}\nSimpleExampleModel.class: 1package net.akaish.kittyormdemo.sqlite.introductiondb; 2 3import net.akaish.kitty.orm.KittyModel; 4import net.akaish.kitty.orm.annotations.column.KITTY_COLUMN; 5import net.akaish.kitty.orm.annotations.table.KITTY_TABLE; 6 7@KITTY_TABLE 8public class SimpleExampleModel extends KittyModel { 9 public SimpleExampleModel() { 10 super(); 11 } 12 13 @KITTY_COLUMN( 14 isIPK = true, 15 columnOrder = 0 16 ) 17 public Long id; 18 19 @KITTY_COLUMN(columnOrder = 1) 20 public int randomInteger; 21 22 @KITTY_COLUMN(columnOrder = 2) 23 public String firstName; 24}\nBy default, all names in KittyORM if they weren’t specified explicitly in annotations would be generated from class names and field names. For database name it would be used KittyUtils.fieldNameToLowerCaseUnderScore(String fieldName) method where fieldName is database implementation class name. For table names would be used KittyUtils.fieldNameToLowerCaseUnderScore(String fieldName) where fieldName is POJO class name without Model\\model ending (if ending exists) and for column names would be used KittyUtils.fieldNameToLowerCaseUnderScore(String fieldName).\n Click to view KittyUtils.fieldNameToLowerCaseUnderScore(String fieldName) 1/** 2* Converts input string (designed for camel case variable names) 3* into lower case underscored string 4* @param fieldName 5* @return 6*/ 7public static String fieldNameToLowerCaseUnderScore(String fieldName) { 8\treturn fieldName.replaceAll(\u0026#34;[^a-zA-Z0-9]\u0026#34;,\u0026#34;\u0026#34;) 9\t.replaceAll(\u0026#34;(?=[A-Z])\u0026#34;,\u0026#34;_\u0026#34;) 10\t.replaceAll(\u0026#34;^_\u0026#34;,\u0026#34;\u0026#34;) 11\t.toLowerCase(); 12} \nDo not use primitives for PrimaryKeys, because uninitialized primitive field returns 0 not NULL via reflection calls and KittyORM wouldn’t know what to do with such POJO.\n Tip #1  CRUD Usage We are ready to go, just get KittyMapper from instance of SimpleDatabase with getMapper(SimpleExampleModel.class) and perform any basic RW operations.\nDo not forget to call KittyMapper.close() method on your KittyMapper instance after you did all database operations you wanted.\n Tip #2   Inserting new record associated with new model into database table:  1SimpleExampleModel alex = new SimpleExampleModel(); 2 3alex.randomInteger = 545141; 4alex.firstName = \u0026#34;Alex\u0026#34;; 5 6SimpleExampleModel marina = new SimpleExampleModel(); 7 8marina.randomInteger = 228; 9marina.firstName = \u0026#34;Marina\u0026#34;; 10 11// save model with save method 12mapper.save(alex); 13// or use insert method if you want to get rowid 14long marinaRowid = mapper.insert(marina);  Finding record in table and returning its content as POJO model:  1// find with row id 2SimpleExampleModel model1 = mapper.findByRowID(0l); 3 4// find with INTEGER PRIMARY KEY 5SimpleExampleModel model2 = mapper.findByIPK(0l); 6 7// find with KittyPrimaryKey 8KittyPrimaryKeyBuilder pkBuilder = new KittyPrimaryKeyBuilder(); 9pkBuilder.addKeyColumnValue(\u0026#34;id\u0026#34;, \u0026#34;0\u0026#34;); 10SimpleExampleModel model3 = mapper.findByPK(pkBuilder.build()); 11 12// find with condition 13SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 14builder.addField(\u0026#34;first_name\u0026#34;) 15 .addSQLOperator(SQLiteOperator.EQUAL) 16 .addValue(\u0026#34;Marina\u0026#34;); 17List\u0026lt;SimpleExampleModel\u0026gt; marinas = mapper.findWhere(builder.build()); 18 19List\u0026lt;SimpleExampleModel\u0026gt; randModels = new LinkedList\u0026lt;\u0026gt;(); 20for(int i = 0; i \u0026lt; 10; i++) 21 randModels.add(RandomSimpleExampleModelUtil.randomSEModel()); 22mapper.save(randModels);  Inserting 10 generated records into database table:  1List\u0026lt;SimpleExampleModel\u0026gt; randModels = new LinkedList\u0026lt;\u0026gt;(); 2for(int i = 0; i \u0026lt; 10; i++) 3 randModels.add(RandomSimpleExampleModelUtil.randomSEModel()); 4mapper.save(randModels);  Deleting some models:  1// deleting entity 2mapper.delete(alex); 3 4// deleting from database with condition 5builder = new SQLiteConditionBuilder(); 6builder.addField(\u0026#34;first_name\u0026#34;) 7 .addSQLOperator(SQLiteOperator.EQUAL) 8 .addValue(\u0026#34;Alex\u0026#34;); 9mapper.deleteByWhere(builder.build());  Updating some models:  1// updating current model 2// if model has RowId or IPK or PrimaryKey values set (3 is slowest) just 3marina.randomInteger = 1337; 4mapper.update(marina); 5 6// or just 7mapper.save(marina) 8 9// another option is updating with query-like method 10SimpleExampleModel update = new SimpleExampleModel(); 11update.randomInteger = 121212; 12builder = new SQLiteConditionBuilder(); 13builder.addField(\u0026#34;first_name\u0026#34;) 14 .addSQLOperator(SQLiteOperator.EQUAL) 15 .addValue(\u0026#34;Marina\u0026#34;); 16mapper.update(update, builder.build(), new String[]{\u0026#34;randomInteger\u0026#34;}, CVUtils.INCLUDE_ONLY_SELECTED_FIELDS);  Bulk operations in transaction mode:  1randModels = new LinkedList\u0026lt;\u0026gt;(); 2for(int i = 0; i \u0026lt; 10; i++) 3 randModels.add(RandomSimpleExampleModelUtil.randomSEModel()); 4mapper.saveInTransaction(randModels); Do not forget to call KittyMapper.close() method on your KittyMapper instance after you did all database operations you wanted.\n Tip #3  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/overview/",
	"title": "Migrations overview",
	"tags": [],
	"description": "",
	"content": " \n Demo application screenshots for this article  Migrations mechanism between different schema versions By design KittyORM has three main mechanisms for supporting migrations between different versions of database. Those utilities called Migrators and implements KittyORMVersionMigrator abstract class. By default, when your application needs to update database schema KittyORM would just wipe old version database and create new schema, however it is not suitable for production purposes. You can define what migration utility to use by annotating your KittyDatabase class implementation with @KITTY_DATABASE_HELPER annotation and set its onUpgradeBehavior from any option available at @KITTY_DATABASE_HELPER.UpgradeBehavior enumeration. Here is a list of three already implemented by KittyORM database version migrations mechanisms:\n DropCreate Migrator - basic database version migration utility, it creates simple migration script that drops all tables that present in newer schema version and recreates them. Using this migration mechanism is useful for development purposes when database filled with test data and there is no need to save it. Implemented by KittyDevDropCreateMigrator.class. It is default onUpgrade behavior, if you wish to define it manually, set @KITTY_DATABASE_HELPER.onUpgradeBehavior to KITTY_DATABASE_HELPER.UpgradeBehavior.DROP_AND_CREATE.\n SimpleMigrationScriptGenerator Migrator - migration utility that tries to generate migration script based on differences between current and new schema and save as many data as possible. See KittySimpleMigrator.class for more info. To set this behavior just set onUpgradeBehavior property value of @KITTY_DATABASE_HELPER to KITTY_DATABASE_HELPER.UpgradeBehavior.USE_SIMPLE_MIGRATIONS.\n Filescript Migrator - migration utility that run a sequence of migration scripts stored at file system or at assets. Checks set of files named on one pattern and run SQLite scripts stored in at defined path if such migration sequence is applicable for new schema version. Implemented by KittyORMVersionFileDumpMigrator.class. To set this behavior you have to set onUpgradeBehavior property value of @KITTY_DATABASE_HELPER to KITTY_DATABASE_HELPER.UpgradeBehavior.USE_FILE_MIGRATIONS.\n  Also, you are able to implement your own migration mechanism by extending KittyDatabaseHelper.class and setting onUpgradeBehavior annotation propertie of @KITTY_DATABASE_HELPER that annotates your KittyDatabase implementation to KITTY_DATABASE_HELPER.UpgradeBehavior.USE_CUSTOM_MIGRATOR.\nInitial database setup In this lesson we would work with database with name mig. In this tab we would create first version of mig schema, first iteration consists only from one table mig.mig_one. Tap \u0026ldquo;CREATE MIG\u0026hellip;\u0026rdquo; button to create schema and fill it with some random values (see KittyORM Demo).\nMig v.1\nMigOneModel (mig_one)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   String creationDate creation_date NOT_NULL   Integer someInteger some_integer -    Create schema script generated by KittyORM for database mig version 1 CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL, some_integer INTEGER); Drop schema script generated by KittyORM for database mig version 1 DROP TABLE IF EXISTS mig_one;\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/save/",
	"title": "Saving new entity",
	"tags": [],
	"description": "",
	"content": " Configuring database setup In this lesson we work with a bit more complex KittyORM example. This example database contains four models and one extended CRUD controller.\nFirstly, create KittyDatabase implementation class annotated with @KITTY_DATABASE annotation.  Click to view this lesson KittyORM database implemetation:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \nSecondly, create abstract AbstractRandomModel.class POJO that defines some basic POJO fields.  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \nFields that annotated with @KITTY_COLUMN would be used for mapping. Notice, that only columnOrder property is neсessary to be set. This is the only value you have to set manually and this is done in that way because fields received via reflection not guaranteed to be ordered in same order as they were defined in model class.\n Tip #1  Thirdly, define three regular POJO classes, two of them extend AbstractRandomModel.class.  Click to view POJO classes used in this tutorial:  RandomModel.class: 1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) 3@INDEX( 4 indexName = \u0026#34;random_animal_index\u0026#34;, 5 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 6) 7public class RandomModel extends AbstractRandomModel { 8 9 10 public RandomModel() { 11 super(); 12 } 13 14 @KITTY_COLUMN(columnOrder = 5) 15 public String randomAnimalSays; 16 17 @Override 18 public String toString() { 19 return new StringBuffer(64).append(\u0026#34;[ id = \u0026#34;) 20 .append(id) 21 .append(\u0026#34;; randomInt = \u0026#34;) 22 .append(Integer.toString(randomInt)) 23 .append(\u0026#34;; randomInteger = \u0026#34;) 24 .append(randomInteger) 25 .append(\u0026#34;; randomAnimal = \u0026#34;) 26 .append(randomAnimal) 27 .append(\u0026#34;; randomAnimnalLocalizedName = \u0026#34;) 28 .append(randomAnimalName) 29 .append(\u0026#34;; randomAnimalSays = \u0026#34;) 30 .append(randomAnimalSays).append(\u0026#34; ]\u0026#34;).toString(); 31 } 32} IndexesAndConstraintsModel.class: 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 static final String RANDOM_ID_CNAME = \u0026#34;rnd_id\u0026#34;; 15 16 @KITTY_COLUMN(columnOrder = 0) 17 @PRIMARY_KEY 18 @NOT_NULL 19 public Long id; 20 21 @KITTY_COLUMN(columnOrder = 1) 22 @NOT_NULL 23 @UNIQUE 24 public Long rndId; 25 26 @KITTY_COLUMN(columnOrder = 2) 27 @CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 28 public Animals animal; 29 30 @KITTY_COLUMN(columnOrder = 3) 31 @DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 32 @NOT_NULL 33 public Integer defaultNumber; 34 35 @KITTY_COLUMN(columnOrder = 4) 36 @DEFAULT( 37 predefinedLiteralValue = LiteralValues.CURRENT_DATE 38 ) 39 @NOT_NULL 40 public String creationDate; 41 42 @KITTY_COLUMN(columnOrder = 5) 43 @DEFAULT( 44 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 45 ) 46 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 47 @NOT_NULL 48 public Timestamp creationTmstmp; 49 50 @Override 51 public String toString() { 52 StringBuilder sb = new StringBuilder(64); 53 sb.append(\u0026#34;[ RowID = \u0026#34;).append(getRowID()) 54 .append(\u0026#34; ; id = \u0026#34;).append(id) 55 .append(\u0026#34; ; rndId = \u0026#34;).append(rndId) 56 .append(\u0026#34; ; animal = \u0026#34;).append(animal) 57 .append(\u0026#34; ; defaultNumber = \u0026#34;).append(defaultNumber) 58 .append(\u0026#34; ; creationDate = \u0026#34;).append(creationDate) 59 .append(\u0026#34; ; creationTmstmp = \u0026#34;).append(creationTmstmp).append(\u0026#34; ]\u0026#34;); 60 return sb.toString(); 61 } 62} ComplexRandomModel.class: 1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \nAnd, finally, create extended CRUD controller for usage with RandomModel.class POJO.  Click to view RandomMapper.class:  1public class RandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; RandomMapper(KittyTableConfiguration tableConfiguration, 4 M blankModelInstance, 5 String databasePassword) { 6 super(tableConfiguration, blankModelInstance, databasePassword); 7 } 8 9 protected SQLiteCondition getAnimalCondition(Animals animal) { 10 return new SQLiteConditionBuilder() 11 .addField(RND_ANIMAL_CNAME) 12 .addSQLOperator(SQLiteOperator.EQUAL) 13 .addObjectValue(animal) 14 .build(); 15 } 16 17 public long deleteByRandomIntegerRange(int start, int end) { 18 SQLiteCondition condition = new SQLiteConditionBuilder() 19 .addField(\u0026#34;random_int\u0026#34;) 20 .addSQLOperator(GREATER_OR_EQUAL) 21 .addValue(start) 22 .addSQLOperator(AND) 23 .addField(\u0026#34;random_int\u0026#34;) 24 .addSQLOperator(LESS_OR_EQUAL) 25 .addValue(end) 26 .build(); 27 return deleteByWhere(condition); 28 } 29 30 public long deleteByAnimal(Animals animal) { 31 return deleteByWhere(getAnimalCondition(animal)); 32 } 33 34 public List\u0026lt;RandomModel\u0026gt; findByAnimal(Animals animal, long offset, long limit, boolean groupingOn) { 35 SQLiteCondition condition = getAnimalCondition(animal); 36 QueryParameters qparam = new QueryParameters(); 37 qparam.setLimit(limit).setOffset(offset); 38 if(groupingOn) 39 qparam.setGroupByColumns(RND_ANIMAL_CNAME); 40 else 41 qparam.setGroupByColumns(KittyConstants.ROWID); 42 return findWhere(condition, qparam); 43 } 44 45 public List\u0026lt;RandomModel\u0026gt; findByIdRange(long fromId, long toId, boolean inclusive, Long offset, Long limit) { 46 SQLiteCondition condition = new SQLiteConditionBuilder() 47 .addField(\u0026#34;id\u0026#34;) 48 .addSQLOperator(inclusive ? GREATER_OR_EQUAL : GREATER_THAN) 49 .addValue(fromId) 50 .addSQLOperator(AND) 51 .addField(\u0026#34;id\u0026#34;) 52 .addSQLOperator(inclusive ? LESS_OR_EQUAL : LESS_THAN) 53 .addValue(toId) 54 .build(); 55 QueryParameters qparam = new QueryParameters(); 56 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 57 return findWhere(condition, qparam); 58 } 59 60 public List\u0026lt;RandomModel\u0026gt; findAllRandomModels(Long offset, Long limit) { 61 QueryParameters qparam = new QueryParameters(); 62 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 63 return findAll(qparam); 64 } 65 66} \nBy default, all configurations of KittyORM are defined in annotations (however you can extend KittyORM for using any other configuration approach). Let\u0026rsquo;s give a look at most common KittyORM annotations, when they should be used and for what purposes.\n   Annotation name Annotated element Annotation purposes     @KITTY_DATABASE KittyDatabase regular implementation Used for setting such properties as package domains, schema name, schema version, log tag etc.   @KITTY_DATABASE_HELPER KittyDatabase regular implementation Used for managing default file paths for SQLite script and on database upgrade behavior.   @KITTY_EXTENDED_CRUD KittyModel regular implementation Used for exact defining of extended CRUD controller related to this particular POJO.   @KITTY_TABLE KittyModel regular implementation Used for defining a table name this POJO associated with and some other options such as setting a POJO schema model or using this POJO with the correspondent table.   @KITTY_COLUMN KittyModel implementation field that corresponds to the table column Used for defining an associated column name, type affinity, order etc   @KITTY_COLUMN_ACCEPTED_VALUES KittyModel implementation field that corresponds to the table column Used for partial CHECK constraint simulation. If model field value is not in the provided array, then KittyRuntimeException would be thrown. It works, but presents a kind of not needed functional. Sometimes, when KittyORM would have Java8 support it would use Lambda expressions.   @KITTY_COLUMN_SERIALIZATION KittyModel implementation field that corresponds to the table column Used for auto-mapping of complex objects to SQLite TEXT or NONE type affinity. For example, POJO may contain Bitmap field that would be automatically stored as BLOB in database and BLOB from database would be converted back to Bitmap.   @KITTY_DATABASE_REGISTRY KittyDatabase regular implementation Used for KittyORM database registry definition.   @KITTY_REGISTRY_PAIR KittyDatabase regular implementation Used for model and mapper pair definition apart with KittyORM database registry definition via @KITTY_DATABASE_REGISTRY.    You can find more documentation about KittyORM basic annotations at KittyORM project page.\nCreating new entity and storing it in database Use object wrappers for PK. No primitives. No exceptions.\n Tip #2  In this lesson we would work with RandomModel.class. KittyORM can handle enumerations and wrapped primitives automatically. Enumerations would be stored as TEXT type affinity, wrappers would be stored as INTEGER or NUMERIC type affinities, boolean and Boolean stored as INTEGER type affinity.\n\n Demo application screenshots for this article  As you can see, RandomModel.class contains only one model field, String randomAnimalSays. id, randomInt, randomInteger, randomAnimal and randomAnimalName were inherited from super class. So the generated table for RandomModel.class has name random and consists of columns defined both in RandomModel.class and AbstractRandomModel.class.\nFor inserting new RandomModel into database just get KittyMapper from RandomDatabase with method getMapper(RandomModel.class), create new instance of RandomModel and save it with save(model) or insert(model)method of acquired mapper instance.\n1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Initializing model 6RandomModel toInsert = new RandomModel(); 7// Setting model fields 8toInsert.randomInt = 10; 9... 10// Saving model with save method 11mapper.save(toInsert); 12// Saving model with direct insert call 13mapper.insert(toInsert); What is the best method to save new entity? Actually, there is no \u0026lsquo;best\u0026rsquo; method to save new entity. KittyMapper provides two main methods for saving new model. They are KittyMapper.save(M model) and KittyMapper.insert(M model).\nBy using KittyMapper.save(M model) you force KittyORM to define what operation should be done with provided model: update or insert. KittyORM makes this decision based on state of entity fields that can be used for unambiguous definition of associated record in database.\nIt checks rowid first, if rowid value is NULL or table was created with WITHOUT ROWID flag, KittyORM tries to check PRIMARY KEY field values. If table has INTEGER PRIMARY KEY as PK, KittyORM would check if it is set. If table has complex PRIMARY KEY that KittyORM would check state of all entity fields that correspond with PRIMARY KEY columns of this table that defined via @KITTY_COLUMN annotation as generated at insertion by SQLite. After all of those actions KittyORM can suppose provided model to be new or existing and ran INSERT or UPDATE query. That means that KittyMapper.save(M model) method slower than KittyMapper.insert(M model) and not suitable for tables created without PRIMARY KEY that has no auto generated column values and with WITHOUT ROWID flag.\nAlso, KittyMapper.save(M model) is a void and instead of KittyMapper.insert(M model) doesn\u0026rsquo;t return rowid of newly inserted record.\nHowever, KittyMapper.save(List\u0026lt;M\u0026gt; models) allows you to save entities associated with both new and existing records in target table.\nSo some tip: use most suitable method for concrete task. If you want to save 100% newly created entity then just use insert(M model) method. If you for some reasons do not know is model associated with new or with existing record and model has support of rowid\\IPK\\PK with auto generated columns than use save(M model).\nOverview of supported SQLite type affinities and Java → type affinity table located in KittyORM datatypes mapping.\n Tip #3  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/constraints/l3t2_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM constraint declaration examples   Click to view NOT NULL constraint declaration example:  1@KITTY_COLUMN(columnOrder = 0) 2@PRIMARY_KEY 3@NOT_NULL // NOT NULL constraint declaration 4public Long id; \n  Click to view DEFAULT constraint declaration examples:  1@KITTY_COLUMN(columnOrder = 3) 2@DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 3@NOT_NULL 4public Integer defaultNumber; 5 6@KITTY_COLUMN(columnOrder = 4) 7@DEFAULT( 8 predefinedLiteralValue = LiteralValues.CURRENT_DATE 9) 10@NOT_NULL 11public String creationDate; \n  Click to view UNIQUE constraint declaration examples:  1@KITTY_COLUMN(columnOrder = 1) 2@NOT_NULL 3@UNIQUE 4public Long rndId; 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13@UNIQUE_T(columns = {\u0026#34;rnd_id, animal\u0026#34;}) // Declaring unique constraint on more than two columns 14public class IndexesAndConstraintsModel extends KittyModel { 15 ... 16} \n  Click to view CHECK constraint declaration example:  1@KITTY_COLUMN(columnOrder = 2) 2@CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 3public Animals animal; \n  Click to view COLLATE constraint declaration example:  1@KITTY_COLUMN(columnOrder = 2) 2@COLLATE(collation = BuiltInCollations.NOCASE) // Collation example 3@CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) 4public Animals animal; \n  Click to view PRIMARY KEY constraint declaration examples:  1@KITTY_COLUMN( 2 columnOrder = 0, 3 isIPK = true 4) 5public Long id; 1@KITTY_COLUMN(columnOrder = 0) 2@PRIMARY_KEY 3@NOT_NULL 4public Long id; 1@KITTY_TABLE(tableName = \u0026#34;cpk_test\u0026#34;) 2@PRIMARY_KEY_T( 3 columns = {\u0026#34;user_name\u0026#34;, \u0026#34;email\u0026#34;} 4) 5public class CPKModel extends KittyModel { 6 7 @KITTY_COLUMN(columnOrder = 0) 8 public String userName; 9 10 @KITTY_COLUMN(columnOrder = 1) 11 @UNIQUE 12 public String email; 13 14 ... 15} \n  Click to view FOREIGN KEY constraint declaration examples:  1@KITTY_COLUMN(columnOrder = 1) 2@NOT_NULL 3@UNIQUE 4@FOREIGN_KEY( 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12public Long rndId; 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 ... 15 16 @KITTY_COLUMN(columnOrder = 1) 17 @NOT_NULL 18 @UNIQUE 19 public Long rndId; 20 21 ... 22} \n  Click to view index declaration examples:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) // index declaration 13public class IndexesAndConstraintsModel extends KittyModel { 14 ... 15 16 @KITTY_COLUMN(columnOrder = 4) 17 @DEFAULT( 18 predefinedLiteralValue = LiteralValues.CURRENT_DATE 19 ) 20 @NOT_NULL 21 public String creationDate; // indexed column 22 23 ... 24} 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2... 3public class IndexesAndConstraintsModel extends KittyModel { 4 ... 5 6 @KITTY_COLUMN(columnOrder = 5) 7 @DEFAULT( 8 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 9 ) 10 // One column indexe declaration example 11 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 12 @NOT_NULL 13 public Timestamp creationTmstmp; 14 15 ... 16} \n  KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \n  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \n  Click to view ComplexRandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \n  Click to view ComplexRandomMapper.class:  1public class ComplexRandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; ComplexRandomMapper(KittyTableConfiguration tableConfiguration, M blankModelInstance, String databasePassword) { 4 super(tableConfiguration, blankModelInstance, databasePassword); 5 } 6 7} \n  Click to view IndexesAndConstraintsModel.class:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 static final String RANDOM_ID_CNAME = \u0026#34;rnd_id\u0026#34;; 15 16 @KITTY_COLUMN(columnOrder = 0) 17 @PRIMARY_KEY 18 @NOT_NULL 19 public Long id; 20 21 @KITTY_COLUMN(columnOrder = 1) 22 @NOT_NULL 23 @UNIQUE 24 public Long rndId; 25 26 @KITTY_COLUMN(columnOrder = 2) 27 @CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 28 public Animals animal; 29 30 @KITTY_COLUMN(columnOrder = 3) 31 @DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 32 @NOT_NULL 33 public Integer defaultNumber; 34 35 @KITTY_COLUMN(columnOrder = 4) 36 @DEFAULT( 37 predefinedLiteralValue = LiteralValues.CURRENT_DATE 38 ) 39 @NOT_NULL 40 public String creationDate; 41 42 @KITTY_COLUMN(columnOrder = 5) 43 @DEFAULT( 44 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 45 ) 46 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 47 @NOT_NULL 48 public Timestamp creationTmstmp; 49 50 @Override 51 public String toString() { 52 StringBuilder sb = new StringBuilder(64); 53 sb.append(\u0026#34;[ RowID = \u0026#34;).append(getRowID()) 54 .append(\u0026#34; ; id = \u0026#34;).append(id) 55 .append(\u0026#34; ; rndId = \u0026#34;).append(rndId) 56 .append(\u0026#34; ; animal = \u0026#34;).append(animal) 57 .append(\u0026#34; ; defaultNumber = \u0026#34;).append(defaultNumber) 58 .append(\u0026#34; ; creationDate = \u0026#34;).append(creationDate) 59 .append(\u0026#34; ; creationTmstmp = \u0026#34;).append(creationTmstmp).append(\u0026#34; ]\u0026#34;); 60 return sb.toString(); 61 } 62} \n  Fragment code used in this tutorial    Click to view Lesson3Tab2Constraints.class:  1public class Lesson3Tab2Constraints extends Lesson3BaseFragment { 2 3 private BasicDatabase database; 4 5 protected ArrayAdapter\u0026lt;String\u0026gt; animalAdapter; 6 protected Spinner animalSpinner; 7 8 public Lesson3Tab2Constraints() {} 9 10 EditText rndIdFkET; 11 EditText defaultIntET; 12 EditText creationDateET; 13 EditText creationTmstmpET; 14 15 Button saveNewModelButton; 16 Button wipeAllButton; 17 18 @Override 19 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 20 View rootView = inflater.inflate(R.layout.lesson3_tab2_constraints_and_indexes, container, false); 21 22 rndIdFkET = rootView.findViewById(R.id.l3_t2_et_fk); 23 defaultIntET = rootView.findViewById(R.id.l3_t2_et_default_number); 24 creationDateET = rootView.findViewById(R.id.l3_t2_et_creation_date); 25 creationTmstmpET = rootView.findViewById(R.id.l3_t2_et_current_timestamp); 26 27 saveNewModelButton = rootView.findViewById(R.id._l3_t2_save_button); 28 saveNewModelButton.setOnClickListener(new View.OnClickListener() { 29 @Override 30 public void onClick(View v) { 31 IndexesAndConstraintsModel model = getModelFromInput(); 32 if(model==null) return; 33 new InsertNewAsync().execute(model); 34 } 35 }); 36 37 wipeAllButton = rootView.findViewById(R.id._l3_t2_wipe_button); 38 wipeAllButton.setOnClickListener(new View.OnClickListener() { 39 @Override 40 public void onClick(View v) { 41 new WipeAsync().execute(0l); 42 } 43 }); 44 45 46 setUpExpandedList( 47 rootView, 48 R.id._l3_t2_expanded_panel_lw, 49 R.id._l3_t2_expanded_panel_text, 50 R.string._l3_t2_expanded_text_pattern 51 ); 52 53 setAnimalSpinner(rootView, R.id.l3_t2_spinner, new AdapterView.OnItemSelectedListener() { 54 @Override 55 public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { 56 } 57 58 @Override 59 public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) { 60 } 61 }); 62 63 reloadTableExpandedList(); 64 return rootView; 65 } 66 67 private void reloadTableExpandedList() { 68 new ReloadTableAsync().execute(0l); 69 } 70 71 private IndexesAndConstraintsModel getModelFromInput() { 72 IndexesAndConstraintsModel model = new IndexesAndConstraintsModel(); 73 String rndId = rndIdFkET.getText().toString(); 74 if(rndId == null) model.rndId = null; 75 else if(rndId.trim().length() == 0) model.rndId = null; 76 else { 77 try { 78 model.rndId = Long.parseLong(rndId); 79 } catch (Exception e) { 80 getLessonActivity().showWarningDialog( 81 R.string._warning_dialog_title, 82 R.string._l3_t2_rnd_id_cant_be_treated_as_null_or_long_only, 83 R.string._warning_dialog_ok_button_text); 84 return null; 85 } 86 } 87 String animalEnumStringValue = animalSpinner.getSelectedItem().toString(); 88 if(!animalEnumStringValue.equals(animalAdapter.getItem(animalAdapter.getCount()))) { 89 model.animal = Animals.valueOf(animalEnumStringValue); 90 } 91 String defInteger = defaultIntET.getText().toString(); 92 if(defInteger == null) model.setFieldExclusion(\u0026#34;defaultNumber\u0026#34;); 93 else if(defInteger.trim().length() == 0) model.setFieldExclusion(\u0026#34;defaultNumber\u0026#34;); 94 else { 95 try { 96 model.defaultNumber = Integer.parseInt(defInteger); 97 } catch (Exception e) { 98 getLessonActivity().showWarningDialog( 99 R.string._warning_dialog_title, 100 R.string._l3_t2_default_number_can_be_treated_as_null_or_long_only, 101 R.string._warning_dialog_ok_button_text); 102 return null; 103 } 104 } 105 String creationDate = creationDateET.getText().toString(); 106 if(creationDate == null) model.setFieldExclusion(\u0026#34;creationDate\u0026#34;); 107 else if(creationDate.trim().length() == 0) model.setFieldExclusion(\u0026#34;creationDate\u0026#34;); 108 else model.creationDate = creationDate; 109 String creationTimestamp = creationTmstmpET.getText().toString(); 110 if(creationTimestamp == null) model.setFieldExclusion(\u0026#34;creationTmstmp\u0026#34;); 111 else if(creationTimestamp.trim().length() == 0) model.setFieldExclusion(\u0026#34;creationTmstmp\u0026#34;); 112 else { 113 Long creationTimestampLong = null; 114 try { 115 creationTimestampLong = Long.parseLong(creationTimestamp); 116 } catch (Exception e) { 117 getLessonActivity().showWarningDialog( 118 R.string._warning_dialog_title, 119 R.string._l3_t2_creation_timestamp_can_be_treated_as_null_or_long_only, 120 R.string._warning_dialog_ok_button_text); 121 return null; 122 } 123 model.creationTmstmp = new Timestamp(creationTimestampLong); 124 } 125 126 return model; 127 } 128 129 private BasicDatabase getDatabase() { 130 if(database != null) return database; 131 database = new BasicDatabase(getContext()); 132 return database; 133 } 134 135 @Override 136 public void onVisible() { 137 reloadTableExpandedList(); 138 } 139 140 @Override 141 protected int snackbarMessageResource() { 142 return R.string._l3_t2_snackbar_message; 143 } 144 145 // Asyncs 146 147 class ReloadTableAsync extends AsyncTask\u0026lt;Long, Long, List\u0026lt;IndexesAndConstraintsModel\u0026gt;\u0026gt; { 148 149 @Override 150 protected List\u0026lt;IndexesAndConstraintsModel\u0026gt; doInBackground(Long... params) { 151 KittyMapper mapper = Lesson3Tab2Constraints.this.getDatabase().getMapper(IndexesAndConstraintsModel.class); 152 List\u0026lt;IndexesAndConstraintsModel\u0026gt; out = mapper.findAll(); 153 mapper.close(); 154 return out; 155 } 156 157 @Override 158 protected void onPostExecute(List\u0026lt;IndexesAndConstraintsModel\u0026gt; result) { 159 if(result != null) { 160 events.setAdapter(new CAIModelAdapter(getContext(), result)); 161 expandedTitle.setText(format(expandeddTitlePattern, result.size())); 162 } else { 163 events.setAdapter(new CAIModelAdapter(getContext(), new LinkedList\u0026lt;IndexesAndConstraintsModel\u0026gt;())); 164 expandedTitle.setText(format(expandeddTitlePattern, 0)); 165 } 166 } 167 } 168 169 private static final String ERR_STRING_WIPE = \u0026#34;Lesson3tab2WipeDataError, see exception details!\u0026#34;; 170 171 class WipeAsync extends AsyncTask\u0026lt;Long, Long, Long\u0026gt; { 172 173 ProgressDialog dialog; 174 175 @Override 176 protected void onPreExecute() { 177 dialog = ProgressDialog.show( 178 Lesson3Tab2Constraints.this.getLessonActivity(), 179 Lesson3Tab2Constraints.this.getString(R.string._l3_t2_running_requested_operation_pg_title), 180 Lesson3Tab2Constraints.this.getString(R.string._l3_t2_running_requested_operation_pg_body) 181 ); 182 dialog.setCancelable(false); 183 } 184 185 @Override 186 protected Long doInBackground(Long... params) { 187 try { 188 KittyMapper mapper = Lesson3Tab2Constraints.this.getDatabase().getMapper(IndexesAndConstraintsModel.class); 189 long affected = mapper.deleteAll(); 190 mapper.close(); 191 return affected; 192 } catch (Exception e) { 193 Log.e(BasicDatabase.LOG_TAG, ERR_STRING_WIPE, e); 194 if(e instanceof KittyRuntimeException) { 195 if(((KittyRuntimeException) e).getNestedException() != null) { 196 Log.e(BasicDatabase.LOG_TAG, ERR_STRING_WIPE, ((KittyRuntimeException) e).getNestedException()); 197 } 198 } 199 return -1l; 200 } 201 } 202 203 @Override 204 protected void onPostExecute(Long result) { 205 dialog.cancel(); 206 if (result \u0026lt;= -1l) { 207 getLessonActivity().showWarningDialog( 208 R.string._warning_dialog_title, 209 R.string._l3_t2_some_error_on_deleting, 210 R.string._warning_dialog_ok_button_text); 211 } else { 212 reloadTableExpandedList(); 213 } 214 } 215 } 216 217 static final String IA_EXPECTED_ONLY_ONE = \u0026#34;Lesson3Tab2Constraints$InsertNewAsync expects array with one element as parameter for doInBackground\u0026#34;; 218 static final String ERR_ON_INSERTION = \u0026#34;Lesson3Tab2Constraints$InsertNewAsync error on insertion, see exception details!\u0026#34;; 219 220 class InsertNewAsync extends AsyncTask\u0026lt;IndexesAndConstraintsModel, Long, InsertNewAsyncResult\u0026gt; { 221 @Override 222 protected InsertNewAsyncResult doInBackground(IndexesAndConstraintsModel... params) { 223 if(params.length \u0026gt; 1) 224 throw new IllegalArgumentException(IA_EXPECTED_ONLY_ONE); 225 try { 226 KittyMapper mapper = getDatabase().getMapper(IndexesAndConstraintsModel.class); 227 long insert = mapper.insert(params[0]); 228 mapper.close(); 229 if(insert \u0026gt; -1l) 230 return new InsertNewAsyncResult(true, null, insert); 231 else 232 return new InsertNewAsyncResult(false, null, insert); 233 } catch (Exception e) { 234 Log.e(BasicDatabase.LOG_TAG, ERR_ON_INSERTION, e); 235 if(e instanceof KittyRuntimeException) { 236 if(((KittyRuntimeException) e).getNestedException() != null) { 237 Log.e(BasicDatabase.LOG_TAG, ERR_ON_INSERTION, ((KittyRuntimeException) e).getNestedException()); 238 } 239 } 240 return new InsertNewAsyncResult(false, e, -1l); 241 } 242 } 243 244 protected void onPostExecute(InsertNewAsyncResult result) { 245 if(result.success) 246 reloadTableExpandedList(); 247 else { 248 getLessonActivity().showWarningDialog( 249 R.string._warning_dialog_title, 250 R.string._l3_t2_some_error_on_insertion, 251 R.string._warning_dialog_ok_button_text); 252 } 253 } 254 } 255 256 class InsertNewAsyncResult { 257 boolean success; 258 Exception exception; 259 long insertId; 260 261 public InsertNewAsyncResult(boolean success, Exception exception, long insertId) { 262 this.success = success; 263 this.exception = exception; 264 this.insertId = insertId; 265 } 266 } 267 268 // Animal spinner stuff 269 protected ArrayAdapter\u0026lt;String\u0026gt; newAnimalAdapter() { 270 ArrayAdapter\u0026lt;String\u0026gt; adapter = new ArrayAdapter\u0026lt;String\u0026gt;(getContext(), android.R.layout.simple_spinner_dropdown_item) { 271 272 @Override 273 public View getView(int position, View convertView, ViewGroup parent) { 274 275 View v = super.getView(position, convertView, parent); 276 if (position == getCount()) { 277 ((TextView)v.findViewById(android.R.id.text1)).setText(\u0026#34;\u0026#34;); 278 ((TextView)v.findViewById(android.R.id.text1)).setHint(getItem(getCount())); //\u0026#34;Hint to be displayed\u0026#34; 279 } 280 281 return v; 282 } 283 284 @Override 285 public int getCount() { 286 return super.getCount()-1; 287 } 288 289 }; 290 291 adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item); 292 String[] adapterStrings = getContext().getResources().getStringArray(R.array.animal_enum); 293 for(int i = 0; i \u0026lt; adapterStrings.length; i++) { 294 adapter.add(adapterStrings[i]); 295 } 296 adapter.add(getContext().getString(R.string._l2_t1_random_animal_hint)); 297 return adapter; 298 } 299 300 protected void setAnimalSpinner(View rootView, int spinnerId, AdapterView.OnItemSelectedListener onItemSelectedListener) { 301 animalSpinner = (Spinner) rootView.findViewById(spinnerId); 302 animalAdapter = newAnimalAdapter(); 303 animalSpinner.setAdapter(animalAdapter); 304 animalSpinner.setSelection(animalAdapter.getCount()); //display hint 305 animalSpinner.setOnItemSelectedListener(onItemSelectedListener); 306 } 307 308 // expanded list 309 CAIModelAdapter caiModelAdapter; 310 311 @Override 312 protected void setUpExpandedList(View rootView, int eventsId, int eventsTitleId, int eventTitleStringPattern) { 313 events = (ListView) rootView.findViewById(eventsId); 314 expandedTitle = (TextView) rootView.findViewById(eventsTitleId); 315 expandeddTitlePattern = getString(eventTitleStringPattern); 316 317 expandedTitle.setText(format(expandeddTitlePattern, 0)); 318 319 if(expandedAdapter == null) { 320 caiModelAdapter = new CAIModelAdapter(getContext(), new LinkedList\u0026lt;IndexesAndConstraintsModel\u0026gt;()); 321 } 322 323 events.setAdapter(caiModelAdapter); 324 events.setOnTouchListener(new View.OnTouchListener() { 325 326 // Setting on Touch Listener for handling the touch inside ScrollView 327 @Override 328 public boolean onTouch(View v, MotionEvent event) { 329 // Disallow the touch request for parent scroll on touch of child view 330 v.getParent().requestDisallowInterceptTouchEvent(true); 331 return false; 332 } 333 }); 334 } 335 336 // Fab menu section 337 338 @Override 339 public View.OnClickListener helpFabMenuAction() { 340 return new View.OnClickListener() { 341 @Override 342 public void onClick(View v) { 343 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L3_T2_TUTORIAL); 344 } 345 }; 346 } 347 348 @Override 349 public View.OnClickListener sourceFabMenuAction() { 350 return new View.OnClickListener() { 351 @Override 352 public void onClick(View v) { 353 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L3_T2_SOURCE); 354 } 355 }; 356 } 357 358 @Override 359 public View.OnClickListener schemaFabMenuAction() { 360 return new View.OnClickListener() { 361 @Override 362 public void onClick(View v) { 363 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L3_T2_SCHEMA); 364 } 365 }; 366 } 367}   "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/bulk/l2t5_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM bulk save example 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Generating list of entities to insert 6List\u0026lt;RandomModel\u0026gt; toSave = new ArrayList\u0026lt;\u0026gt;(); 7// Filling this list with randomly generated POJOs 8RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(getContext()); 9for(int i = 0; i \u0026lt; 100; i++) { 10 toSave.add(rndFactory.newRandomModel()); 11} 12// Running bulk save 13mapper.save(toSave); KittyORM bulk save in transaction mode example  1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Generating list of entities to insert 6List\u0026lt;RandomModel\u0026gt; toSave = new ArrayList\u0026lt;\u0026gt;(); 7// Filling this list with randomly generated POJOs 8RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(getContext()); 9for(int i = 0; i \u0026lt; 100; i++) { 10 toSave.add(rndFactory.newRandomModel()); 11} 12// Running bulk save in transaction 13mapper.saveInTransaction(toSave); 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Generating list of entities to insert 6List\u0026lt;RandomModel\u0026gt; toInsert = new ArrayList\u0026lt;\u0026gt;(); 7// Filling this list with randomly generated POJOs 8RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(getContext()); 9for(int i = 0; i \u0026lt; 100; i++) { 10 toInsert.add(rndFactory.newRandomModel()); 11} 12// Starting transaction for your database write operations 13startTransaction(TRANSACTION_MODES.NON_EXCLUSIVE_MODE); 14// Running some write database operations 15mapper.insert(toSave); 16SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 17builder.addField(AbstractRandomModel.RND_ANIMAL_CNAME) 18 .addSQLOperator(SQLiteOperator.EQUAL) 19 .addValue(Animals.DOG.name()); 20mapper.deleteWhere(); 21// Finishing transaction 22finishTransaction();  KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \n  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \n  Click to view RandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) 3@INDEX( 4 indexName = \u0026#34;random_animal_index\u0026#34;, 5 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 6) 7public class RandomModel extends AbstractRandomModel { 8 9 10 public RandomModel() { 11 super(); 12 } 13 14 @KITTY_COLUMN(columnOrder = 5) 15 public String randomAnimalSays; 16 17 @Override 18 public String toString() { 19 return new StringBuffer(64).append(\u0026#34;[ id = \u0026#34;) 20 .append(id) 21 .append(\u0026#34;; randomInt = \u0026#34;) 22 .append(Integer.toString(randomInt)) 23 .append(\u0026#34;; randomInteger = \u0026#34;) 24 .append(randomInteger) 25 .append(\u0026#34;; randomAnimal = \u0026#34;) 26 .append(randomAnimal) 27 .append(\u0026#34;; randomAnimnalLocalizedName = \u0026#34;) 28 .append(randomAnimalName) 29 .append(\u0026#34;; randomAnimalSays = \u0026#34;) 30 .append(randomAnimalSays).append(\u0026#34; ]\u0026#34;).toString(); 31 } 32} \n  Click to view RandomMapper.class:  1public class RandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; RandomMapper(KittyTableConfiguration tableConfiguration, 4 M blankModelInstance, 5 String databasePassword) { 6 super(tableConfiguration, blankModelInstance, databasePassword); 7 } 8 9 protected SQLiteCondition getAnimalCondition(Animals animal) { 10 return new SQLiteConditionBuilder() 11 .addField(RND_ANIMAL_CNAME) 12 .addSQLOperator(SQLiteOperator.EQUAL) 13 .addObjectValue(animal) 14 .build(); 15 } 16 17 public long deleteByRandomIntegerRange(int start, int end) { 18 SQLiteCondition condition = new SQLiteConditionBuilder() 19 .addField(\u0026#34;random_int\u0026#34;) 20 .addSQLOperator(GREATER_OR_EQUAL) 21 .addValue(start) 22 .addSQLOperator(AND) 23 .addField(\u0026#34;random_int\u0026#34;) 24 .addSQLOperator(LESS_OR_EQUAL) 25 .addValue(end) 26 .build(); 27 return deleteByWhere(condition); 28 } 29 30 public long deleteByAnimal(Animals animal) { 31 return deleteByWhere(getAnimalCondition(animal)); 32 } 33 34 public List\u0026lt;RandomModel\u0026gt; findByAnimal(Animals animal, long offset, long limit, boolean groupingOn) { 35 SQLiteCondition condition = getAnimalCondition(animal); 36 QueryParameters qparam = new QueryParameters(); 37 qparam.setLimit(limit).setOffset(offset); 38 if(groupingOn) 39 qparam.setGroupByColumns(RND_ANIMAL_CNAME); 40 else 41 qparam.setGroupByColumns(KittyConstants.ROWID); 42 return findWhere(condition, qparam); 43 } 44 45 public List\u0026lt;RandomModel\u0026gt; findByIdRange(long fromId, long toId, boolean inclusive, Long offset, Long limit) { 46 SQLiteCondition condition = new SQLiteConditionBuilder() 47 .addField(\u0026#34;id\u0026#34;) 48 .addSQLOperator(inclusive ? GREATER_OR_EQUAL : GREATER_THAN) 49 .addValue(fromId) 50 .addSQLOperator(AND) 51 .addField(\u0026#34;id\u0026#34;) 52 .addSQLOperator(inclusive ? LESS_OR_EQUAL : LESS_THAN) 53 .addValue(toId) 54 .build(); 55 QueryParameters qparam = new QueryParameters(); 56 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 57 return findWhere(condition, qparam); 58 } 59 60 public List\u0026lt;RandomModel\u0026gt; findAllRandomModels(Long offset, Long limit) { 61 QueryParameters qparam = new QueryParameters(); 62 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 63 return findAll(qparam); 64 } 65} \n  Click to view ComplexRandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \n  Click to view IndexesAndConstraintsModel.class:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 static final String RANDOM_ID_CNAME = \u0026#34;rnd_id\u0026#34;; 15 16 @KITTY_COLUMN(columnOrder = 0) 17 @PRIMARY_KEY 18 @NOT_NULL 19 public Long id; 20 21 @KITTY_COLUMN(columnOrder = 1) 22 @NOT_NULL 23 @UNIQUE 24 public Long rndId; 25 26 @KITTY_COLUMN(columnOrder = 2) 27 @CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 28 public Animals animal; 29 30 @KITTY_COLUMN(columnOrder = 3) 31 @DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 32 @NOT_NULL 33 public Integer defaultNumber; 34 35 @KITTY_COLUMN(columnOrder = 4) 36 @DEFAULT( 37 predefinedLiteralValue = LiteralValues.CURRENT_DATE 38 ) 39 @NOT_NULL 40 public String creationDate; 41 42 @KITTY_COLUMN(columnOrder = 5) 43 @DEFAULT( 44 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 45 ) 46 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 47 @NOT_NULL 48 public Timestamp creationTmstmp; 49 50 @Override 51 public String toString() { 52 StringBuilder sb = new StringBuilder(64); 53 sb.append(\u0026#34;[ RowID = \u0026#34;).append(getRowID()) 54 .append(\u0026#34; ; id = \u0026#34;).append(id) 55 .append(\u0026#34; ; rndId = \u0026#34;).append(rndId) 56 .append(\u0026#34; ; animal = \u0026#34;).append(animal) 57 .append(\u0026#34; ; defaultNumber = \u0026#34;).append(defaultNumber) 58 .append(\u0026#34; ; creationDate = \u0026#34;).append(creationDate) 59 .append(\u0026#34; ; creationTmstmp = \u0026#34;).append(creationTmstmp).append(\u0026#34; ]\u0026#34;); 60 return sb.toString(); 61 } 62} \n  Fragment and utility code used in this tutorial   Click to view RNDRandomModelFactory.class:  1public class RNDRandomModelFactory { 2 3 private final Context context; 4 private final Random randomizer; 5 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 7 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 8 9 public RNDRandomModelFactory(Context context) { 10 super(); 11 this.context = context; 12 this.randomizer = new Random(); 13 14 // Lol, getContext().getString() method is slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 15 // Right now getting those string causes only 14% of execution time 16 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 17 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 18 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 19 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 20 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 21 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 22 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 23 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 24 25 26 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 27 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 28 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 29 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 30 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 31 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 32 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 33 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 34 35 } 36 37 public RandomModel newRandomModel() { 38 RandomModel out = new RandomModel(); 39 out.randomInt = randomizer.nextInt(); 40 out.randomInteger = randomizer.nextInt(); 41 out.randomAnimal = Animals.rndAnimal(randomizer); 42 out.randomAnimalSays = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(out.randomAnimal)); 43 out.randomAnimalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(out.randomAnimal)); 44 return out; 45 } 46} \n  Click to view Lesson2Tab5Random.class:  1public class Lesson2Tab5Random extends Lesson2BaseFragment { 2 3 public Lesson2Tab5Random(){} 4 5 CheckBox newInstanceCheckbox; 6 Button new10Button; 7 Button new500Button; 8 Button new500TXButton; 9 10 @Override 11 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 12 View rootView = inflater.inflate(R.layout.lesson2_tab5_rnd, container, false); 13 newInstanceCheckbox = rootView.findViewById(R.id.l2_t5_check_new_database_instance_for_operation); 14 new10Button = rootView.findViewById(R.id.l2_t5_insert_10); 15 new500Button = rootView.findViewById(R.id.l2_t5_insert_50k); 16 new500TXButton = rootView.findViewById(R.id.l2_t5_insert_50k_tx); 17 new10Button.setOnClickListener(new View.OnClickListener() { 18 @Override 19 public void onClick(View v) { 20 //insert50RandomForProfiling(); 21 countRecordsToExpandedPanel(getMapper()); 22 InsertInAsync ten = new InsertInAsync(OPERATION_TEN_NEW, newInstanceCheckbox.isChecked()); 23 ten.execute(\u0026#34;\u0026#34;); 24 } 25 }); 26 new500Button.setOnClickListener(new View.OnClickListener() { 27 @Override 28 public void onClick(View v) { 29 countRecordsToExpandedPanel(getMapper()); 30 InsertInAsync fh = new InsertInAsync(OPERATION_FIFTY_K_NEW, newInstanceCheckbox.isChecked()); 31 fh.execute(\u0026#34;\u0026#34;); 32 } 33 }); 34 new500TXButton.setOnClickListener(new View.OnClickListener() { 35 @Override 36 public void onClick(View v) { 37 countRecordsToExpandedPanel(getMapper()); 38 InsertInAsync fhtx = new InsertInAsync(OPERATION_FIFTY_K_TX_NEW, newInstanceCheckbox.isChecked()); 39 fhtx.execute(\u0026#34;\u0026#34;); 40 } 41 }); 42 setUpExpandedList( 43 rootView, 44 R.id._l2_t5_expanded_panel_lw, 45 R.id._l2_t5_expanded_panel_text, 46 R.string._l2_t5_expanded_text_pattern 47 ); 48 return rootView; 49 } 50 51 void countRecordsToExpandedPanel(RandomMapper mapper) { 52 addNewEventToExpandedPanel(format(getString(R.string._l2_t5_count_completed), mapper.countAll())); 53 } 54 55 void insert50RandomForProfiling() { 56 RandomMapper m = getMapper(); 57 List\u0026lt;RandomModel\u0026gt; genRnd = new LinkedList\u0026lt;\u0026gt;(); 58 RNDRandomModelFactory factory = new RNDRandomModelFactory(getContext()); 59 for(int i = 0; i\u0026lt;50; i++) { 60 genRnd.add(factory.newRandomModel()); 61 } 62 m.insertInTransaction(genRnd); 63 } 64 65 // Fab menu section 66 67 @Override 68 public View.OnClickListener helpFabMenuAction() { 69 return new View.OnClickListener() { 70 @Override 71 public void onClick(View v) { 72 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T5_TUTORIAL); 73 } 74 }; 75 } 76 77 @Override 78 public View.OnClickListener sourceFabMenuAction() { 79 return new View.OnClickListener() { 80 @Override 81 public void onClick(View v) { 82 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T5_SOURCE); 83 } 84 }; 85 } 86 87 @Override 88 public View.OnClickListener schemaFabMenuAction() { 89 return new View.OnClickListener() { 90 @Override 91 public void onClick(View v) { 92 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T5_SCHEMA); 93 } 94 }; 95 } 96 97 @Override 98 protected int snackbarMessageResource() { 99 return R.string._l2_t5_snackbar_message; 100 } 101 102 final static int OPERATION_TEN_NEW = 0; 103 final static int OPERATION_FIFTY_K_NEW = 1; 104 final static int OPERATION_FIFTY_K_TX_NEW = 2; 105 106 class InsertInAsync extends AsyncTask\u0026lt;String, String, Integer\u0026gt; { 107 108 // It is not profiling (!) 109 private long nanosStart; 110 private long nanosGetDatabaseAnaMapper; 111 private long nanosGenerateRandomModelsToInsert; 112 private long nanosInsert; 113 114 private final int operation; 115 116 private final boolean useNewDatabaseObject; 117 118 ProgressDialog dialog; 119 120 InsertInAsync(int operation, boolean useNewDatabaseObject) { 121 this.operation = operation; 122 this.useNewDatabaseObject = useNewDatabaseObject; 123 } 124 125 BasicDatabase getDatabase() { 126 if(useNewDatabaseObject) 127 return new BasicDatabase(Lesson2Tab5Random.this.getContext()); 128 else 129 return Lesson2Tab5Random.this.getDb(); 130 } 131 132 RandomMapper getRandomMapperForAssync() { 133 return (RandomMapper) getDatabase().getMapper(RandomModel.class); 134 } 135 136 void insertIntoDB() { 137 RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(Lesson2Tab5Random.this.getContext()); 138 nanosStart = System.nanoTime(); 139 RandomMapper mapper = getRandomMapperForAssync(); 140 nanosGetDatabaseAnaMapper = System.nanoTime(); 141 List\u0026lt;RandomModel\u0026gt; toInsert = new ArrayList\u0026lt;\u0026gt;(); 142 switch (operation) { 143 case OPERATION_TEN_NEW: 144 for(int i = 0; i \u0026lt; 10; i++) { 145 toInsert.add(rndFactory.newRandomModel()); 146 } 147 break; 148 default: 149 for(int i = 0; i \u0026lt; 50000; i++) { 150 toInsert.add(rndFactory.newRandomModel()); 151 } 152 } 153 nanosGenerateRandomModelsToInsert = System.nanoTime(); 154 switch (operation) { 155 case OPERATION_TEN_NEW: 156 mapper.insert(toInsert); 157 break; 158 case OPERATION_FIFTY_K_TX_NEW: 159 mapper.insertInTransaction(toInsert); 160 break; 161 case OPERATION_FIFTY_K_NEW: 162 mapper.insert(toInsert); 163 break; 164 } 165 nanosInsert = System.nanoTime(); 166 mapper.close(); 167 } 168 169 /** 170* Override this method to perform a computation on a background thread. The 171* specified parameters are the parameters passed to {@link #execute} 172* by the caller of this task. 173* \u0026lt;p\u0026gt; 174* This method can call {@link #publishProgress} to publish updates 175* on the UI thread. 176* 177* @param strings The parameters of the task. 178* @return A result, defined by the subclass of this task. 179* @see #onPreExecute() 180* @see #onPostExecute 181* @see #publishProgress 182*/ 183 @Override 184 protected Integer doInBackground(String... strings) { 185 try { 186 insertIntoDB(); 187 } catch (Exception e) { 188 Log.e(BasicDatabase.LOG_TAG, \u0026#34;Exception caught on insertion, see details\u0026#34;, e); 189 if(e instanceof KittyRuntimeException) 190 if(((KittyRuntimeException) e).getNestedException() != null) 191 Log.e(BasicDatabase.LOG_TAG, \u0026#34;Nested exception: \u0026#34;, ((KittyRuntimeException) e).getNestedException()); 192 return -1; 193 } 194 return 1; 195 } 196 197 @Override 198 protected void onPreExecute() { 199 int progressDialogStringId = 0; 200 switch (operation) { 201 case OPERATION_TEN_NEW: 202 progressDialogStringId = R.string._l2_t5_inserting_10; 203 break; 204 case OPERATION_FIFTY_K_NEW: 205 progressDialogStringId = R.string._l2_t5_inserting_50k; 206 break; 207 case OPERATION_FIFTY_K_TX_NEW: 208 progressDialogStringId = R.string._l2_t5_inserting_50kTX; 209 break; 210 } 211 dialog = ProgressDialog.show( 212 Lesson2Tab5Random.this.getLessonActivity(), 213 Lesson2Tab5Random.this.getString(R.string._l2_t5_inserting_dialog_title), 214 Lesson2Tab5Random.this.getString(progressDialogStringId) 215 ); 216 dialog.setCancelable(false); 217 } 218 219 @Override 220 protected void onPostExecute(Integer result) { 221 int operationNameStringId = 0; 222 switch (operation) { 223 case OPERATION_TEN_NEW: 224 operationNameStringId = R.string._l2_t5_inserting_10_OP; 225 break; 226 case OPERATION_FIFTY_K_NEW: 227 operationNameStringId = R.string._l2_t5_inserting_50k_OP; 228 break; 229 case OPERATION_FIFTY_K_TX_NEW: 230 operationNameStringId = R.string._l2_t5_inserting_50kTX_OP; 231 break; 232 } 233 if(result \u0026gt; 0) { 234 235 String successfullEvent = format( 236 Lesson2Tab5Random.this.getString(R.string._l2_t5_inserted_event), 237 Lesson2Tab5Random.this.getString(operationNameStringId), 238 useNewDatabaseObject, 239 nanosInsert - nanosStart, 240 nanosGetDatabaseAnaMapper - nanosStart, 241 nanosGenerateRandomModelsToInsert - nanosGetDatabaseAnaMapper, 242 nanosInsert - nanosGenerateRandomModelsToInsert 243 ); 244 Lesson2Tab5Random.this.addNewEventToExpandedPanel(successfullEvent); 245 } else { 246 String eventErrorMessage = format( 247 Lesson2Tab5Random.this.getString(R.string._l2_t5_inserted_event_error), 248 Lesson2Tab5Random.this.getString(operation), 249 BasicDatabase.LOG_TAG 250 ); 251 Lesson2Tab5Random.this.addNewEventToExpandedPanel(eventErrorMessage); 252 } 253 dialog.cancel(); 254 countRecordsToExpandedPanel(getMapper()); 255 } 256 } 257} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/delete/l2t3_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM delete example  1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel toDelete = mapper.findByIPK(0l); 7// Deleting model 8long rowsAffected = mapper.delete(toDelete); 1// Deleting by random_int range 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Creating clause for deletion 6SQLiteCondition condition = new SQLiteConditionBuilder() 7 .addField(\u0026#34;random_int\u0026#34;) 8 .addSQLOperator(GREATER_OR_EQUAL) 9 .addValue(0) 10 .addSQLOperator(AND) 11 .addField(\u0026#34;random_int\u0026#34;) 12 .addSQLOperator(LESS_OR_EQUAL) 13 .addValue(10000) 14 .build(); 15// Deleting with generated clause 16mapper.deleteByWhere(condition);  KittyORM SQLiteConditionBuilder example 1SQLiteCondition condition = new SQLiteConditionBuilder() 2 .addField(\u0026#34;a_column\u0026#34;) 3 .addSQLOperator(EQUAL) 4 .addValue(\u0026#34;a\u0026#34;) 5 .addSQLOperator(AND) 6 .addSQLOperator(OPEN_SUBC) 7 .addField(\u0026#34;b_column\u0026#34;) 8 .addSQLOperator(GREATER_THAN) 9 .addValue(0) 10 .addSQLOperator(OR) 11 .addSQLOperator(BETWEEN) 12 .addValue(10) 13 .addSQLOperator(AND) 14 .addValue(20) 15 .addSQLOperator(CLOSE_SUBC) 16 .build(); KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \n  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \n  Click to view RandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) 3@INDEX( 4 indexName = \u0026#34;random_animal_index\u0026#34;, 5 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 6) 7public class RandomModel extends AbstractRandomModel { 8 9 10 public RandomModel() { 11 super(); 12 } 13 14 @KITTY_COLUMN(columnOrder = 5) 15 public String randomAnimalSays; 16 17 @Override 18 public String toString() { 19 return new StringBuffer(64).append(\u0026#34;[ id = \u0026#34;) 20 .append(id) 21 .append(\u0026#34;; randomInt = \u0026#34;) 22 .append(Integer.toString(randomInt)) 23 .append(\u0026#34;; randomInteger = \u0026#34;) 24 .append(randomInteger) 25 .append(\u0026#34;; randomAnimal = \u0026#34;) 26 .append(randomAnimal) 27 .append(\u0026#34;; randomAnimnalLocalizedName = \u0026#34;) 28 .append(randomAnimalName) 29 .append(\u0026#34;; randomAnimalSays = \u0026#34;) 30 .append(randomAnimalSays).append(\u0026#34; ]\u0026#34;).toString(); 31 } 32} \n  Click to view RandomMapper.class:  1public class RandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; RandomMapper(KittyTableConfiguration tableConfiguration, 4 M blankModelInstance, 5 String databasePassword) { 6 super(tableConfiguration, blankModelInstance, databasePassword); 7 } 8 9 protected SQLiteCondition getAnimalCondition(Animals animal) { 10 return new SQLiteConditionBuilder() 11 .addField(RND_ANIMAL_CNAME) 12 .addSQLOperator(SQLiteOperator.EQUAL) 13 .addObjectValue(animal) 14 .build(); 15 } 16 17 public long deleteByRandomIntegerRange(int start, int end) { 18 SQLiteCondition condition = new SQLiteConditionBuilder() 19 .addField(\u0026#34;random_int\u0026#34;) 20 .addSQLOperator(GREATER_OR_EQUAL) 21 .addValue(start) 22 .addSQLOperator(AND) 23 .addField(\u0026#34;random_int\u0026#34;) 24 .addSQLOperator(LESS_OR_EQUAL) 25 .addValue(end) 26 .build(); 27 return deleteByWhere(condition); 28 } 29 30 public long deleteByAnimal(Animals animal) { 31 return deleteByWhere(getAnimalCondition(animal)); 32 } 33 34 public List\u0026lt;RandomModel\u0026gt; findByAnimal(Animals animal, long offset, long limit, boolean groupingOn) { 35 SQLiteCondition condition = getAnimalCondition(animal); 36 QueryParameters qparam = new QueryParameters(); 37 qparam.setLimit(limit).setOffset(offset); 38 if(groupingOn) 39 qparam.setGroupByColumns(RND_ANIMAL_CNAME); 40 else 41 qparam.setGroupByColumns(KittyConstants.ROWID); 42 return findWhere(condition, qparam); 43 } 44 45 public List\u0026lt;RandomModel\u0026gt; findByIdRange(long fromId, long toId, boolean inclusive, Long offset, Long limit) { 46 SQLiteCondition condition = new SQLiteConditionBuilder() 47 .addField(\u0026#34;id\u0026#34;) 48 .addSQLOperator(inclusive ? GREATER_OR_EQUAL : GREATER_THAN) 49 .addValue(fromId) 50 .addSQLOperator(AND) 51 .addField(\u0026#34;id\u0026#34;) 52 .addSQLOperator(inclusive ? LESS_OR_EQUAL : LESS_THAN) 53 .addValue(toId) 54 .build(); 55 QueryParameters qparam = new QueryParameters(); 56 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 57 return findWhere(condition, qparam); 58 } 59 60 public List\u0026lt;RandomModel\u0026gt; findAllRandomModels(Long offset, Long limit) { 61 QueryParameters qparam = new QueryParameters(); 62 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 63 return findAll(qparam); 64 } 65} \n  Click to view ComplexRandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \n  Click to view IndexesAndConstraintsModel.class:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 static final String RANDOM_ID_CNAME = \u0026#34;rnd_id\u0026#34;; 15 16 @KITTY_COLUMN(columnOrder = 0) 17 @PRIMARY_KEY 18 @NOT_NULL 19 public Long id; 20 21 @KITTY_COLUMN(columnOrder = 1) 22 @NOT_NULL 23 @UNIQUE 24 public Long rndId; 25 26 @KITTY_COLUMN(columnOrder = 2) 27 @CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 28 public Animals animal; 29 30 @KITTY_COLUMN(columnOrder = 3) 31 @DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 32 @NOT_NULL 33 public Integer defaultNumber; 34 35 @KITTY_COLUMN(columnOrder = 4) 36 @DEFAULT( 37 predefinedLiteralValue = LiteralValues.CURRENT_DATE 38 ) 39 @NOT_NULL 40 public String creationDate; 41 42 @KITTY_COLUMN(columnOrder = 5) 43 @DEFAULT( 44 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 45 ) 46 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 47 @NOT_NULL 48 public Timestamp creationTmstmp; 49 50 @Override 51 public String toString() { 52 StringBuilder sb = new StringBuilder(64); 53 sb.append(\u0026#34;[ RowID = \u0026#34;).append(getRowID()) 54 .append(\u0026#34; ; id = \u0026#34;).append(id) 55 .append(\u0026#34; ; rndId = \u0026#34;).append(rndId) 56 .append(\u0026#34; ; animal = \u0026#34;).append(animal) 57 .append(\u0026#34; ; defaultNumber = \u0026#34;).append(defaultNumber) 58 .append(\u0026#34; ; creationDate = \u0026#34;).append(creationDate) 59 .append(\u0026#34; ; creationTmstmp = \u0026#34;).append(creationTmstmp).append(\u0026#34; ]\u0026#34;); 60 return sb.toString(); 61 } 62} \n  Fragment and utility code used in this tutorial   Click to view RNDRandomModelFactory.class:  1public class RNDRandomModelFactory { 2 3 private final Context context; 4 private final Random randomizer; 5 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 7 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 8 9 public RNDRandomModelFactory(Context context) { 10 super(); 11 this.context = context; 12 this.randomizer = new Random(); 13 14 // Lol, getContext().getString() method is slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 15 // Right now getting those string causes only 14% of execution time 16 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 17 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 18 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 19 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 20 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 21 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 22 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 23 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 24 25 26 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 27 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 28 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 29 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 30 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 31 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 32 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 33 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 34 35 } 36 37 public RandomModel newRandomModel() { 38 RandomModel out = new RandomModel(); 39 out.randomInt = randomizer.nextInt(); 40 out.randomInteger = randomizer.nextInt(); 41 out.randomAnimal = Animals.rndAnimal(randomizer); 42 out.randomAnimalSays = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(out.randomAnimal)); 43 out.randomAnimalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(out.randomAnimal)); 44 return out; 45 } 46} \n  Click to view Lesson2Tab3Delete.class:  1public class Lesson2Tab3Delete extends Lesson2BaseFragment { 2 3 public Lesson2Tab3Delete(){}; 4 5 EditText deleteByIdEt; 6 Button deleteByIdButton; 7 8 EditText deleteByRangeStartET; 9 EditText deleteByRangeEndET; 10 Button deleteByRangeButton; 11 12 Button deleteByAnimalButton; 13 14 Button wipeDataButton; 15 16 17 @Override 18 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 19 View rootView = inflater.inflate(R.layout.lesson2_tab3_delete, container, false); 20 21 setAnimalSpinner(rootView, R.id.l2_t3_spinner, new AdapterView.OnItemSelectedListener() { 22 @Override 23 public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { 24 // do nothing 25 } 26 27 @Override 28 public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) { 29 // do nothing 30 } 31 }); 32 33 deleteByIdEt = rootView.findViewById(R.id.l2_t3_et_id); 34 deleteByIdButton = rootView.findViewById(R.id.l2_t3_delete_by_id_button); 35 36 deleteByRangeStartET = rootView.findViewById(R.id.l2_t3_et_id_range_start); 37 deleteByRangeEndET = rootView.findViewById(R.id.l2_t3_et_id_range_end); 38 deleteByRangeButton = rootView.findViewById(R.id.l2_t3_delete_by_range_button); 39 40 deleteByAnimalButton = rootView.findViewById(R.id.l2_t3_delete_by_animal_button); 41 42 deleteByIdButton.setOnClickListener(new View.OnClickListener() { 43 @Override 44 public void onClick(View v) { 45 deleteById(); 46 } 47 }); 48 49 deleteByRangeButton.setOnClickListener(new View.OnClickListener() { 50 @Override 51 public void onClick(View v) { 52 deleteByRange(); 53 } 54 }); 55 56 deleteByAnimalButton.setOnClickListener(new View.OnClickListener() { 57 @Override 58 public void onClick(View v) { 59 deleteByAnimal(); 60 } 61 }); 62 63 wipeDataButton = rootView.findViewById(R.id.l2_t3_wipe); 64 wipeDataButton.setOnClickListener(new View.OnClickListener() { 65 @Override 66 public void onClick(View v) { 67 wipeData(); 68 } 69 }); 70 71 setUpExpandedList( 72 rootView, 73 R.id._l2_t3_expanded_panel_lw, 74 R.id._l2_t3_expanded_panel_text, 75 R.string._l2_t3_expanded_text_pattern 76 ); 77 78 return rootView; 79 } 80 81 void wipeData() { 82 RandomMapper mapper = getMapper(); 83 countRecordsToExpandedPanel(mapper); 84 85 DeleteAsync task = new DeleteAsync(new DeleteTask(DELETE_ALL, mapper, null, null, null) { 86 87 @Override 88 void publishResultToEventList(Long resultDelete) { 89 String result = null; 90 StringBuilder operation = new StringBuilder(16).append(\u0026#34;\\\u0026#39;wipe all\\\u0026#39;\u0026#34;); 91 if(resultDelete \u0026gt; -1) { 92 result = format(getString(R.string._l2_t3_delete_model_completed), resultDelete, operation); 93 } else { 94 result = format(getString(R.string._l2_t3_delete_model_error), LOG_TAG, operation); 95 } 96 addNewEventToExpandedPanel(result); 97 countRecordsToExpandedPanel(deleteMapper); 98 deleteMapper.close(); 99 } 100 }); 101 102 task.execute(\u0026#34;\u0026#34;); 103 } 104 105 void deleteById() { 106 RandomMapper mapper = getMapper(); 107 countRecordsToExpandedPanel(mapper); 108 String inputId = deleteByIdEt.getText().toString(); 109 if(inputId == null) { 110 getLessonActivity().showWarningDialog( 111 R.string._warning_dialog_title, 112 R.string._l2_t3_delete_by_id_message, 113 R.string._warning_dialog_ok_button_text 114 ); 115 mapper.close(); 116 return; 117 } 118 if(inputId.length() == 0) { 119 getLessonActivity().showWarningDialog( 120 R.string._warning_dialog_title, 121 R.string._l2_t3_delete_by_id_message, 122 R.string._warning_dialog_ok_button_text 123 ); 124 mapper.close(); 125 return; 126 } 127 Long idToDelete = null; 128 try { 129 idToDelete = Long.valueOf(inputId); 130 } catch (Exception e) { 131 getLessonActivity().showWarningDialog( 132 R.string._warning_dialog_title, 133 R.string._l2_t3_delete_by_id_message, 134 R.string._warning_dialog_ok_button_text 135 ); 136 mapper.close(); 137 return; 138 } 139 long affectedRecords = mapper.deleteByIPK(idToDelete); 140 String result = null; 141 StringBuilder operation = new StringBuilder(16).append(\u0026#34;id = \u0026#34;).append(idToDelete); 142 if(affectedRecords \u0026gt; -1) { 143 result = format(getString(R.string._l2_t3_delete_model_completed), affectedRecords, operation); 144 } else { 145 result = format(getString(R.string._l2_t3_delete_model_error), LOG_TAG, operation); 146 } 147 addNewEventToExpandedPanel(result); 148 countRecordsToExpandedPanel(mapper); 149 mapper.close(); 150 } 151 152 void deleteByRange() { 153 RandomMapper mapper = getMapper(); 154 countRecordsToExpandedPanel(mapper); 155 String rangeStart = deleteByRangeStartET.getText().toString(); 156 String rangeEnd = deleteByRangeEndET.getText().toString(); 157 if(rangeStart == null || rangeEnd == null) { 158 getLessonActivity().showWarningDialog( 159 R.string._warning_dialog_title, 160 R.string._l2_t3_delete_by_range_message, 161 R.string._warning_dialog_ok_button_text 162 ); 163 mapper.close(); 164 return; 165 } 166 if(rangeStart.length() == 0 || rangeEnd.length() == 0) { 167 getLessonActivity().showWarningDialog( 168 R.string._warning_dialog_title, 169 R.string._l2_t3_delete_by_range_message, 170 R.string._warning_dialog_ok_button_text 171 ); 172 mapper.close(); 173 return; 174 } 175 int rangeStartInt = 0; int rangeEndInt = 0; 176 try { 177 rangeStartInt = Integer.parseInt(rangeStart); 178 rangeEndInt = Integer.parseInt(rangeEnd); 179 } catch (Exception e) { 180 getLessonActivity().showWarningDialog( 181 R.string._warning_dialog_title, 182 R.string._l2_t3_delete_by_range_message, 183 R.string._warning_dialog_ok_button_text 184 ); 185 mapper.close(); 186 return; 187 } 188 189 DeleteAsync task = new DeleteAsync(new DeleteTask(DELETE_BY_RANGE, mapper, null, rangeStartInt, rangeEndInt) { 190 191 @Override 192 void publishResultToEventList(Long resultDelete) { 193 String result = null; 194 StringBuilder operation = new StringBuilder(32).append(\u0026#34;randomInt range [\u0026#34;) 195 .append(deleteRangeStart) 196 .append(\u0026#34;; \u0026#34;) 197 .append(deleteRangeEnd) 198 .append(\u0026#34;]\u0026#34;); 199 if(resultDelete \u0026gt; -1) { 200 result = format(getString(R.string._l2_t3_delete_model_completed), resultDelete, operation); 201 } else { 202 result = format(getString(R.string._l2_t3_delete_model_error), LOG_TAG, operation); 203 } 204 addNewEventToExpandedPanel(result); 205 countRecordsToExpandedPanel(deleteMapper); 206 deleteMapper.close(); 207 } 208 }); 209 210 task.execute(\u0026#34;\u0026#34;); 211 } 212 213 void deleteByAnimal() { 214 RandomMapper mapper = getMapper(); 215 countRecordsToExpandedPanel(mapper); 216 String animalStr = (String) animalSpinner.getSelectedItem(); 217 if(animalStr.equals(animalAdapter.getItem(animalAdapter.getCount()))) { 218 getLessonActivity().showWarningDialog( 219 R.string._warning_dialog_title, 220 R.string._l2_t3_delete_by_animal_message, 221 R.string._warning_dialog_ok_button_text 222 ); 223 mapper.close(); 224 return; 225 } 226 Animals animal = Animals.valueOf(animalStr); 227 228 DeleteAsync task = new DeleteAsync(new DeleteTask(DELETE_BY_ANIMAL, mapper, animal, null, null) { 229 230 @Override 231 void publishResultToEventList(Long resultDelete) { 232 String result = null; 233 StringBuilder operation = new StringBuilder(16).append(\u0026#34;deleteAnimal = \u0026#34;).append(deleteAnimal.name()); 234 if(resultDelete \u0026gt; -1) { 235 result = format(getString(R.string._l2_t3_delete_model_completed), resultDelete, operation); 236 } else { 237 result = format(getString(R.string._l2_t3_delete_model_error), LOG_TAG, operation); 238 } 239 addNewEventToExpandedPanel(result); 240 countRecordsToExpandedPanel(deleteMapper); 241 deleteMapper.close(); 242 } 243 }); 244 245 task.execute(\u0026#34;\u0026#34;); 246 247 } 248 249 void countRecordsToExpandedPanel(RandomMapper mapper) { 250 addNewEventToExpandedPanel(format(getString(R.string._l2_t3_delete_model_count_completed), mapper.countAll())); 251 } 252 253 private static final int DELETE_BY_RANGE = 1; 254 private static final int DELETE_BY_ANIMAL = 2; 255 private static final int DELETE_ALL = 3; 256 257 abstract class DeleteTask { 258 259 private int operation; 260 RandomMapper deleteMapper; 261 Animals deleteAnimal; 262 Integer deleteRangeStart; 263 Integer deleteRangeEnd; 264 265 public DeleteTask(int operation, RandomMapper mapper, Animals animal, Integer rangeStart, Integer rangeEnd) { 266 this.operation = operation; 267 this.deleteMapper = mapper; 268 this.deleteAnimal = animal; 269 this.deleteRangeStart = rangeStart; 270 this.deleteRangeEnd = rangeEnd; 271 } 272 273 Long deleteInBackground() { 274 switch (operation) { 275 case DELETE_BY_RANGE: 276 return deleteMapper.deleteByRandomIntegerRange(deleteRangeStart, deleteRangeEnd); 277 case DELETE_BY_ANIMAL: 278 return deleteMapper.deleteByAnimal(deleteAnimal); 279 case DELETE_ALL: 280 return deleteMapper.deleteAll(); 281 } 282 return -1l; 283 } 284 285 abstract void publishResultToEventList(Long resultDelete); 286 } 287 288 class DeleteAsync extends AsyncTask\u0026lt;String, String, Long\u0026gt; { 289 private DeleteTask deleteTask; 290 291 ProgressDialog dialog; 292 293 DeleteAsync(DeleteTask task) { 294 deleteTask = task; 295 } 296 297 @Override 298 protected void onPreExecute() { 299 dialog = ProgressDialog.show( 300 Lesson2Tab3Delete.this.getLessonActivity(), 301 Lesson2Tab3Delete.this.getString(R.string._l2_t3_delete_dialog_title), 302 Lesson2Tab3Delete.this.getString(R.string._l2_t3_delete_message) 303 ); 304 dialog.setCancelable(false); 305 } 306 307 /** 308* Override this method to perform a computation on a background thread. The 309* specified parameters are the parameters passed to {@link #execute} 310* by the caller of this task. 311* \u0026lt;p\u0026gt; 312* This method can call {@link #publishProgress} to publish updates 313* on the UI thread. 314* 315* @param strings The parameters of the task. 316* @return A result, defined by the subclass of this task. 317* @see #onPreExecute() 318* @see #onPostExecute 319* @see #publishProgress 320*/ 321 @Override 322 protected Long doInBackground(String... strings) { 323 try { 324 return deleteTask.deleteInBackground(); 325 } catch (Exception e) { 326 Log.e(BasicDatabase.LOG_TAG, \u0026#34;Exception caught on delete, see details\u0026#34;, e); 327 if(e instanceof KittyRuntimeException) 328 if(((KittyRuntimeException) e).getNestedException() != null) 329 Log.e(BasicDatabase.LOG_TAG, \u0026#34;Nested exception: \u0026#34;, ((KittyRuntimeException) e).getNestedException()); 330 } 331 return -1l; 332 } 333 334 @Override 335 protected void onPostExecute(Long result) { 336 deleteTask.publishResultToEventList(result); 337 dialog.cancel(); 338 } 339 340 341 } 342 343 // Fab menu section 344 345 // Fab menu section 346 347 @Override 348 public View.OnClickListener helpFabMenuAction() { 349 return new View.OnClickListener() { 350 @Override 351 public void onClick(View v) { 352 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T3_TUTORIAL); 353 } 354 }; 355 } 356 357 @Override 358 public View.OnClickListener sourceFabMenuAction() { 359 return new View.OnClickListener() { 360 @Override 361 public void onClick(View v) { 362 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T3_SOURCE); 363 } 364 }; 365 } 366 367 @Override 368 public View.OnClickListener schemaFabMenuAction() { 369 return new View.OnClickListener() { 370 @Override 371 public void onClick(View v) { 372 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T3_SCHEMA); 373 } 374 }; 375 } 376 377 @Override 378 protected int snackbarMessageResource() { 379 return R.string._l2_t3_snackbar_message; 380 } 381} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/find/l2t4_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM find example 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel byIPK = mapper.findByIPK(0l); 7// Getting existing model with rowid (assuming that 10l model exists) 8RandomModel byRowid = mapper.findByRowID(10l); 9// Getting all models 10List\u0026lt;RandomModel\u0026gt; all = mapper.findAll(); 11// Getting model with condition (fetching 100 existing tigers) 12QueryParameters parameters = new QueryParameters(); 13parameters.setOffset(0l).setLimit(100l); 14SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 15builder.addField(AbstractRandomModel.RND_ANIMAL_CNAME) 16 .addSQLOperator(SQLiteOperator.EQUAL) 17 .addValue(Animals.TIGER.name()); 18List\u0026lt;RandomModel\u0026gt; hundredOfTigers = mapper.findWhere(builder.build(), parameters); KittyORM count and sum examples 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Count all records in database 6long count = mapper.countAll(); 7// Count all dogs 8SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 9builder.addField(AbstractRandomModel.RND_ANIMAL_CNAME) 10 .addSQLOperator(SQLiteOperator.EQUAL) 11 .addValue(Animals.DOG.name()); 12long dogsCount = mapper.countWhere(builder.build()); 13// Sum all dog\u0026#39;s random_int 14long dogsRndIntSum = mapper.sum(\u0026#34;random_int\u0026#34;, builder.build()); KittyORM extended CRUD controller registry definition example 1// Defining at registry example 2@KITTY_DATABASE( 3 databaseName = \u0026#34;basic_database\u0026#34;, 4 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 5 ... 6) 7@KITTY_DATABASE_REGISTRY( 8 domainPairs = { 9 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 10 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 11 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) // registry CRUD controller definition 12 } 13) 14public class BasicDatabase extends KittyDatabase { 15 ... 16} 17// Defining at model example 18@KITTY_TABLE 19@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) // model CRUD controller definition 20@INDEX( 21 indexName = \u0026#34;random_animal_index\u0026#34;, 22 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 23) 24public class RandomModel extends AbstractRandomModel { 25 ... 26} KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \n  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \n  Click to view RandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) 3@INDEX( 4 indexName = \u0026#34;random_animal_index\u0026#34;, 5 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 6) 7public class RandomModel extends AbstractRandomModel { 8 9 10 public RandomModel() { 11 super(); 12 } 13 14 @KITTY_COLUMN(columnOrder = 5) 15 public String randomAnimalSays; 16 17 @Override 18 public String toString() { 19 return new StringBuffer(64).append(\u0026#34;[ id = \u0026#34;) 20 .append(id) 21 .append(\u0026#34;; randomInt = \u0026#34;) 22 .append(Integer.toString(randomInt)) 23 .append(\u0026#34;; randomInteger = \u0026#34;) 24 .append(randomInteger) 25 .append(\u0026#34;; randomAnimal = \u0026#34;) 26 .append(randomAnimal) 27 .append(\u0026#34;; randomAnimnalLocalizedName = \u0026#34;) 28 .append(randomAnimalName) 29 .append(\u0026#34;; randomAnimalSays = \u0026#34;) 30 .append(randomAnimalSays).append(\u0026#34; ]\u0026#34;).toString(); 31 } 32} \n  Click to view RandomMapper.class:  1public class RandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; RandomMapper(KittyTableConfiguration tableConfiguration, 4 M blankModelInstance, 5 String databasePassword) { 6 super(tableConfiguration, blankModelInstance, databasePassword); 7 } 8 9 protected SQLiteCondition getAnimalCondition(Animals animal) { 10 return new SQLiteConditionBuilder() 11 .addField(RND_ANIMAL_CNAME) 12 .addSQLOperator(SQLiteOperator.EQUAL) 13 .addObjectValue(animal) 14 .build(); 15 } 16 17 public long deleteByRandomIntegerRange(int start, int end) { 18 SQLiteCondition condition = new SQLiteConditionBuilder() 19 .addField(\u0026#34;random_int\u0026#34;) 20 .addSQLOperator(GREATER_OR_EQUAL) 21 .addValue(start) 22 .addSQLOperator(AND) 23 .addField(\u0026#34;random_int\u0026#34;) 24 .addSQLOperator(LESS_OR_EQUAL) 25 .addValue(end) 26 .build(); 27 return deleteByWhere(condition); 28 } 29 30 public long deleteByAnimal(Animals animal) { 31 return deleteByWhere(getAnimalCondition(animal)); 32 } 33 34 public List\u0026lt;RandomModel\u0026gt; findByAnimal(Animals animal, long offset, long limit, boolean groupingOn) { 35 SQLiteCondition condition = getAnimalCondition(animal); 36 QueryParameters qparam = new QueryParameters(); 37 qparam.setLimit(limit).setOffset(offset); 38 if(groupingOn) 39 qparam.setGroupByColumns(RND_ANIMAL_CNAME); 40 else 41 qparam.setGroupByColumns(KittyConstants.ROWID); 42 return findWhere(condition, qparam); 43 } 44 45 public List\u0026lt;RandomModel\u0026gt; findByIdRange(long fromId, long toId, boolean inclusive, Long offset, Long limit) { 46 SQLiteCondition condition = new SQLiteConditionBuilder() 47 .addField(\u0026#34;id\u0026#34;) 48 .addSQLOperator(inclusive ? GREATER_OR_EQUAL : GREATER_THAN) 49 .addValue(fromId) 50 .addSQLOperator(AND) 51 .addField(\u0026#34;id\u0026#34;) 52 .addSQLOperator(inclusive ? LESS_OR_EQUAL : LESS_THAN) 53 .addValue(toId) 54 .build(); 55 QueryParameters qparam = new QueryParameters(); 56 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 57 return findWhere(condition, qparam); 58 } 59 60 public List\u0026lt;RandomModel\u0026gt; findAllRandomModels(Long offset, Long limit) { 61 QueryParameters qparam = new QueryParameters(); 62 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 63 return findAll(qparam); 64 } 65} \n  Click to view ComplexRandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \n  Click to view IndexesAndConstraintsModel.class:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 static final String RANDOM_ID_CNAME = \u0026#34;rnd_id\u0026#34;; 15 16 @KITTY_COLUMN(columnOrder = 0) 17 @PRIMARY_KEY 18 @NOT_NULL 19 public Long id; 20 21 @KITTY_COLUMN(columnOrder = 1) 22 @NOT_NULL 23 @UNIQUE 24 public Long rndId; 25 26 @KITTY_COLUMN(columnOrder = 2) 27 @CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 28 public Animals animal; 29 30 @KITTY_COLUMN(columnOrder = 3) 31 @DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 32 @NOT_NULL 33 public Integer defaultNumber; 34 35 @KITTY_COLUMN(columnOrder = 4) 36 @DEFAULT( 37 predefinedLiteralValue = LiteralValues.CURRENT_DATE 38 ) 39 @NOT_NULL 40 public String creationDate; 41 42 @KITTY_COLUMN(columnOrder = 5) 43 @DEFAULT( 44 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 45 ) 46 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 47 @NOT_NULL 48 public Timestamp creationTmstmp; 49 50 @Override 51 public String toString() { 52 StringBuilder sb = new StringBuilder(64); 53 sb.append(\u0026#34;[ RowID = \u0026#34;).append(getRowID()) 54 .append(\u0026#34; ; id = \u0026#34;).append(id) 55 .append(\u0026#34; ; rndId = \u0026#34;).append(rndId) 56 .append(\u0026#34; ; animal = \u0026#34;).append(animal) 57 .append(\u0026#34; ; defaultNumber = \u0026#34;).append(defaultNumber) 58 .append(\u0026#34; ; creationDate = \u0026#34;).append(creationDate) 59 .append(\u0026#34; ; creationTmstmp = \u0026#34;).append(creationTmstmp).append(\u0026#34; ]\u0026#34;); 60 return sb.toString(); 61 } 62} \n  Fragment and utility code used in this tutorial   Click to view RNDRandomModelFactory.class:  1public class RNDRandomModelFactory { 2 3 private final Context context; 4 private final Random randomizer; 5 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 7 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 8 9 public RNDRandomModelFactory(Context context) { 10 super(); 11 this.context = context; 12 this.randomizer = new Random(); 13 14 // Lol, getContext().getString() method is slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 15 // Right now getting those string causes only 14% of execution time 16 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 17 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 18 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 19 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 20 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 21 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 22 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 23 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 24 25 26 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 27 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 28 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 29 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 30 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 31 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 32 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 33 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 34 35 } 36 37 public RandomModel newRandomModel() { 38 RandomModel out = new RandomModel(); 39 out.randomInt = randomizer.nextInt(); 40 out.randomInteger = randomizer.nextInt(); 41 out.randomAnimal = Animals.rndAnimal(randomizer); 42 out.randomAnimalSays = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(out.randomAnimal)); 43 out.randomAnimalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(out.randomAnimal)); 44 return out; 45 } 46} \n  Click to view Lesson2Tab4Find.class:  1public class Lesson2Tab4Find extends Lesson2BaseFragment { 2 3 // Pagination start 4 Button firstPage; 5 Button pageUp; 6 Button pageDown; 7 Button lastPage; 8 9 SQLiteCondition currentCondition; 10 FindResultsPager pager; 11 12 ListView pagerEntitiesLW; 13 TextView expandedTitleTW; 14 TextView paginationCounterTW; 15 16 BasicRandomModelAdapter entitiesAdapter; 17 18 String expandedPanelTitlePattern; 19 String expandedPanelPageCounterTitlePattern; 20 // Pagination end 21 22 // Fragment controls 23 EditText findByIdET; 24 Button findByIdButton; 25 26 EditText findByRangeStartET; 27 EditText findByRangeEndET; 28 Button findByRangeButton; 29 30 Button findByAnimalButton; 31 32 Button findAllButton; 33 34 public Lesson2Tab4Find(){}; 35 36 @Override 37 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 38 View rootView = inflater.inflate(R.layout.lesson2_tab4_find, container, false); 39 40 setAnimalSpinner(rootView, R.id.l2_t4_spinner, new AdapterView.OnItemSelectedListener() { 41 @Override 42 public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { 43 44 } 45 46 @Override 47 public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) { 48 49 } 50 }); 51 52 setUpPagination(rootView); 53 54 findByIdET = rootView.findViewById(R.id.l2_t4_et_id); 55 findByIdButton = rootView.findViewById(R.id.l2_t4_find_by_id_button); 56 findByIdButton.setOnClickListener(new View.OnClickListener() { 57 @Override 58 public void onClick(View v) { 59 findById(); 60 } 61 }); 62 63 findByRangeStartET = rootView.findViewById(R.id.l2_t4_et_id_range_start); 64 findByRangeEndET = rootView.findViewById(R.id.l2_t4_et_id_range_end); 65 findByRangeButton = rootView.findViewById(R.id.l2_t4_find_by_range_button); 66 findByRangeButton.setOnClickListener(new View.OnClickListener() { 67 @Override 68 public void onClick(View v) { 69 findByRange(); 70 } 71 }); 72 73 findByAnimalButton = rootView.findViewById(R.id.l2_t4_find_by_animal); 74 findByAnimalButton.setOnClickListener(new View.OnClickListener() { 75 @Override 76 public void onClick(View v) { 77 findByAnimal(); 78 } 79 }); 80 81 findAllButton = rootView.findViewById(R.id._l2_t4_find_all_button); 82 findAllButton.setOnClickListener(new View.OnClickListener() { 83 @Override 84 public void onClick(View v) { 85 findAll(); 86 } 87 }); 88 89 reloadPager(); 90 91 return rootView; 92 } 93 94 void findById() { 95 String inputId = findByIdET.getText().toString(); 96 if(inputId == null) { 97 getLessonActivity().showWarningDialog( 98 R.string._warning_dialog_title, 99 R.string._l2_t4_find_by_id_message, 100 R.string._warning_dialog_ok_button_text 101 ); 102 return; 103 } 104 if(inputId.length() == 0) { 105 getLessonActivity().showWarningDialog( 106 R.string._warning_dialog_title, 107 R.string._l2_t4_find_by_id_message, 108 R.string._warning_dialog_ok_button_text 109 ); 110 return; 111 } 112 Long idToFind = null; 113 try { 114 idToFind = Long.valueOf(inputId); 115 } catch (Exception e) { 116 getLessonActivity().showWarningDialog( 117 R.string._warning_dialog_title, 118 R.string._l2_t4_find_by_id_message, 119 R.string._warning_dialog_ok_button_text 120 ); 121 return; 122 } 123 if(idToFind \u0026lt; 1) { 124 getLessonActivity().showWarningDialog( 125 R.string._warning_dialog_title, 126 R.string._l2_t4_find_by_id_must_be_positive, 127 R.string._warning_dialog_ok_button_text 128 ); 129 return; 130 } 131 SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 132 builder.addField(\u0026#34;id\u0026#34;).addSQLOperator(SQLiteOperator.EQUAL).addValue(idToFind); 133 setPaginationResults(builder.build()); 134 } 135 136 void findByRange() { 137 String rangeStart = findByRangeStartET.getText().toString(); 138 String rangeEnd = findByRangeEndET.getText().toString(); 139 if(rangeStart == null || rangeEnd == null) { 140 getLessonActivity().showWarningDialog( 141 R.string._warning_dialog_title, 142 R.string._l2_t4_find_by_range_message, 143 R.string._warning_dialog_ok_button_text 144 ); 145 return; 146 } 147 if(rangeStart.length() == 0 || rangeEnd.length() == 0) { 148 getLessonActivity().showWarningDialog( 149 R.string._warning_dialog_title, 150 R.string._l2_t4_find_by_range_message, 151 R.string._warning_dialog_ok_button_text 152 ); 153 return; 154 } 155 int rangeStartInt = 0; int rangeEndInt = 0; 156 try { 157 rangeStartInt = Integer.parseInt(rangeStart); 158 rangeEndInt = Integer.parseInt(rangeEnd); 159 } catch (Exception e) { 160 getLessonActivity().showWarningDialog( 161 R.string._warning_dialog_title, 162 R.string._l2_t4_find_by_range_message, 163 R.string._warning_dialog_ok_button_text 164 ); 165 return; 166 } 167 SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 168 builder.addField(\u0026#34;random_int\u0026#34;) 169 .addSQLOperator(SQLiteOperator.GREATER_OR_EQUAL) 170 .addValue(rangeStartInt) 171 .addSQLOperator(SQLiteOperator.AND) 172 .addField(\u0026#34;random_int\u0026#34;) 173 .addSQLOperator(SQLiteOperator.LESS_OR_EQUAL) 174 .addValue(rangeEndInt); 175 setPaginationResults(builder.build()); 176 } 177 178 void findByAnimal() { 179 String animalStr = (String) animalSpinner.getSelectedItem(); 180 if(animalStr.equals(animalAdapter.getItem(animalAdapter.getCount()))) { 181 getLessonActivity().showWarningDialog( 182 R.string._warning_dialog_title, 183 R.string._l2_t4_find_by_animal_message, 184 R.string._warning_dialog_ok_button_text 185 ); 186 return; 187 } 188 Animals animal = Animals.valueOf(animalStr); 189 SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 190 builder.addField(AbstractRandomModel.RND_ANIMAL_CNAME) 191 .addSQLOperator(SQLiteOperator.EQUAL) 192 .addValue(animal.name()); 193 setPaginationResults(builder.build()); 194 } 195 196 void findAll() { 197 currentCondition = new SQLiteConditionBuilder().addValue(1) 198 .build(); 199 setPaginationResults(currentCondition); 200 } 201 202 @Override 203 public void onVisible() { 204 reloadPager(); 205 } 206 207 void reloadPager() { 208 new ReloadPagerTask().execute(0l); 209 } 210 211 void setUpPagination(View root) { 212 firstPage = root.findViewById(R.id._l2_t4_pagination_at_start); 213 pageUp = root.findViewById(R.id._l2_t4_pagination_page_up); 214 pageDown = root.findViewById(R.id._l2_t4_pagination_page_down); 215 lastPage = root.findViewById(R.id._l2_t4_pagination_end); 216 pagerEntitiesLW = root.findViewById(R.id._l2_t4_find_result_enteties_list); 217 paginationCounterTW = root.findViewById(R.id._l2_t4_page_counter); 218 expandedTitleTW = root.findViewById(R.id._l2_t4_expanded_panel_title); 219 entitiesAdapter = new BasicRandomModelAdapter(getContext(), new LinkedList\u0026lt;RandomModel\u0026gt;()); 220 pagerEntitiesLW.setAdapter(entitiesAdapter); 221 pagerEntitiesLW.setOnTouchListener(new View.OnTouchListener() { 222 223 // Setting on Touch Listener for handling the touch inside ScrollView 224 @Override 225 public boolean onTouch(View v, MotionEvent event) { 226 // Disallow the touch request for parent scroll on touch of child view 227 v.getParent().requestDisallowInterceptTouchEvent(true); 228 return false; 229 } 230 }); 231 pagerEntitiesLW.setOnItemClickListener(new AdapterView.OnItemClickListener() { 232 @Override 233 public void onItemClick(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { 234 RandomModel model = entitiesAdapter.getItem(position); 235 Toast.makeText( 236 getLessonActivity(), 237 format( 238 getString(R.string._l2_t4_pager_select_entity_pattern), 239 model.id 240 ), Toast.LENGTH_SHORT 241 ).show(); 242 setLoadedModelId(model.id); 243 244 } 245 }); 246 expandedPanelTitlePattern = getString(R.string._l2_t4_expanded_title_pattern); 247 expandedPanelPageCounterTitlePattern = getString(R.string._l2_t4_pager_pattern); 248 paginationCounterTW.setText(format(expandedPanelPageCounterTitlePattern,0, 0)); 249 expandedTitleTW.setText(format(expandedPanelTitlePattern, 0)); 250 firstPage.setOnClickListener(new View.OnClickListener() { 251 @Override 252 public void onClick(View v) { 253 loadPage(1l); 254 } 255 }); 256 pageUp.setOnClickListener(new View.OnClickListener() { 257 @Override 258 public void onClick(View v) { 259 if(pager != null) { 260 loadPage(pager.currentPage-1); 261 } 262 } 263 }); 264 pageDown.setOnClickListener(new View.OnClickListener() { 265 @Override 266 public void onClick(View v) { 267 if(pager != null) { 268 loadPage(pager.currentPage+1); 269 } 270 } 271 }); 272 lastPage.setOnClickListener(new View.OnClickListener() { 273 @Override 274 public void onClick(View v) { 275 if(pager != null) { 276 loadPage(pager.getPagesCount()); 277 } 278 } 279 }); 280 } 281 282 void setPaginationResults(SQLiteCondition condition) { 283 RandomMapper mapper = getMapper(); 284 this.currentCondition = condition; 285 this.pager = new FindResultsPager(mapper.countWhere(condition, null)); 286 mapper.close(); 287 loadPage(1l); 288 } 289 290 void setPaginationButtonsState() { 291 if(pager == null || currentCondition == null) { 292 firstPage.setEnabled(false); 293 firstPage.setTextColor(getColourForPB(false)); 294 pageUp.setEnabled(false); 295 pageUp.setTextColor(getColourForPB(false)); 296 pageDown.setEnabled(false); 297 pageDown.setTextColor(getColourForPB(false)); 298 lastPage.setEnabled(false); 299 lastPage.setTextColor(getColourForPB(false)); 300 } else { 301 firstPage.setEnabled(!pager.isFirstPage()); 302 firstPage.setTextColor(getColourForPB(!pager.isFirstPage())); 303 pageUp.setEnabled(!pager.isFirstPage()); 304 pageUp.setTextColor(getColourForPB(!pager.isFirstPage())); 305 pageDown.setEnabled(!pager.isLastPage()); 306 pageDown.setTextColor(getColourForPB(!pager.isLastPage())); 307 lastPage.setEnabled(!pager.isLastPage()); 308 lastPage.setTextColor(getColourForPB(!pager.isLastPage())); 309 } 310 } 311 312 int getColourForPB(boolean isActive) { 313 if(isActive) 314 return getResources().getColor(R.color.colorGrayLightest); 315 return getResources().getColor(R.color.colorPrimaryDark); 316 } 317 318 void loadPage(long pageNumber) { 319 if(currentCondition == null || pager == null) { 320 entitiesAdapter.notifyDataSetChanged(); 321 paginationCounterTW.setText(format(expandedPanelPageCounterTitlePattern, 0, 0)); 322 expandedTitleTW.setText(format(expandedPanelTitlePattern, 0)); 323 setPaginationButtonsState(); 324 return; 325 } 326 327 pager.setCurrentPage(pageNumber); 328 entitiesAdapter.clear(); 329 330 RandomMapper mapper = getMapper(); 331 List\u0026lt;RandomModel\u0026gt; page = mapper.findWhere(currentCondition, pager.getQueryParameter()); 332 mapper.close(); 333 if(page == null) { 334 entitiesAdapter.notifyDataSetChanged(); 335 paginationCounterTW.setText(format(expandedPanelPageCounterTitlePattern, 0, 0)); 336 expandedTitleTW.setText(format(expandedPanelTitlePattern, 0)); 337 } else { 338 entitiesAdapter.addAll(page); 339 entitiesAdapter.notifyDataSetChanged(); 340 paginationCounterTW.setText(format( 341 expandedPanelPageCounterTitlePattern, 342 pager.currentPage, 343 pager.getPagesCount() 344 )); 345 expandedTitleTW.setText(format(expandedPanelTitlePattern, pager.entitiesAmount)); 346 } 347 setPaginationButtonsState(); 348 } 349 350 class FindResultsPager { 351 long entitiesAmount; 352 long currentPage = 1l; 353 final long entitiesPerPage = 50l; 354 355 void setCurrentPage(long pageNumber) { 356 if(getPagesCount() == 0) { 357 currentPage = 1l; 358 return; 359 } 360 if(pageNumber \u0026lt; 1l) { 361 currentPage = 1l; 362 return; 363 } 364 if(pageNumber \u0026gt; getPagesCount()) { 365 currentPage = getPagesCount(); 366 return; 367 } 368 currentPage = pageNumber; 369 } 370 371 boolean isFirstPage() { 372 if(currentPage == 1l) return true; 373 return false; 374 } 375 376 boolean isLastPage() { 377 if(currentPage == getPagesCount()) return true; 378 return false; 379 } 380 381 long getPagesCount() { 382 if((entitiesAmount % entitiesPerPage) \u0026gt; 0) { 383 return (entitiesAmount / entitiesPerPage)+1; 384 } else { 385 return (entitiesAmount / entitiesPerPage); 386 } 387 } 388 389 FindResultsPager(long entitiesAmount) { 390 this.entitiesAmount = entitiesAmount; 391 } 392 393 long getCurrentPage() { 394 return currentPage; 395 } 396 397 long getOffset(long pageNumber) { 398 return entitiesPerPage * pageNumber; 399 } 400 401 long getLimit() { 402 return entitiesPerPage; 403 } 404 405 QueryParameters getQueryParameter() { 406 QueryParameters parameters = new QueryParameters(); 407 parameters.setLimit(entitiesPerPage); 408 long offset = (currentPage - 1) * entitiesPerPage; 409 parameters.setOffset(offset); 410 parameters.setOrderByColumns(\u0026#34;id\u0026#34;); 411 parameters.setOrderAscDesc(AscDesc.ASCENDING); 412 return parameters; 413 } 414 } 415 416 417 // Fab menu section 418 // Fab menu section 419 420 @Override 421 public View.OnClickListener helpFabMenuAction() { 422 return new View.OnClickListener() { 423 @Override 424 public void onClick(View v) { 425 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T4_TUTORIAL); 426 } 427 }; 428 } 429 430 @Override 431 public View.OnClickListener sourceFabMenuAction() { 432 return new View.OnClickListener() { 433 @Override 434 public void onClick(View v) { 435 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T4_SOURCE); 436 } 437 }; 438 } 439 440 @Override 441 public View.OnClickListener schemaFabMenuAction() { 442 return new View.OnClickListener() { 443 @Override 444 public void onClick(View v) { 445 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T4_SCHEMA); 446 } 447 }; 448 } 449 450 @Override 451 protected int snackbarMessageResource() { 452 return R.string._l2_t4_snackbar_message; 453 } 454 455 class ReloadPagerTask extends AsyncTask\u0026lt;Long, Long, ArrayList\u0026lt;RandomModel\u0026gt;\u0026gt; { 456 ProgressDialog dialog; 457 458 @Override 459 protected void onPreExecute() { 460 } 461 462 @Override 463 protected ArrayList\u0026lt;RandomModel\u0026gt; doInBackground(Long... params) { 464 long oldPage = 1l; 465 if(pager != null) 466 oldPage = pager.currentPage; 467 RandomMapper mapper = getMapper(); 468 pager = new FindResultsPager(mapper.countWhere(currentCondition, null)); 469 mapper.close(); 470 ArrayList\u0026lt;RandomModel\u0026gt; page = getPage(1l); 471 if(pager != null) { 472 if(oldPage != 1l) { 473 if(oldPage \u0026lt;= pager.getPagesCount()) { 474 page = getPage(oldPage); 475 } 476 } 477 } 478 return page; 479 } 480 481 private ArrayList\u0026lt;RandomModel\u0026gt; getPage(Long pageNumber) { 482 if(currentCondition == null || pager == null) { 483 return null; 484 } 485 pager.setCurrentPage(pageNumber); 486 RandomMapper mapper = getMapper(); 487 ArrayList\u0026lt;RandomModel\u0026gt; page = (ArrayList)mapper.findWhere(currentCondition, pager.getQueryParameter()); 488 mapper.close(); 489 return page; 490 } 491 492 @Override 493 protected void onPostExecute(ArrayList\u0026lt;RandomModel\u0026gt; result) { 494// dialog.cancel(); 495 if(currentCondition == null || pager == null) { 496 entitiesAdapter.notifyDataSetChanged(); 497 paginationCounterTW.setText(format(expandedPanelPageCounterTitlePattern, 0, 0)); 498 expandedTitleTW.setText(format(expandedPanelTitlePattern, 0)); 499 setPaginationButtonsState(); 500 return; 501 } else { 502 entitiesAdapter.clear(); 503 if(result == null) { 504 entitiesAdapter.notifyDataSetChanged(); 505 paginationCounterTW.setText(format(expandedPanelPageCounterTitlePattern, 0, 0)); 506 expandedTitleTW.setText(format(expandedPanelTitlePattern, 0)); 507 } else { 508 entitiesAdapter.addAll(result); 509 entitiesAdapter.notifyDataSetChanged(); 510 paginationCounterTW.setText(format( 511 expandedPanelPageCounterTitlePattern, 512 pager.currentPage, 513 pager.getPagesCount() 514 )); 515 expandedTitleTW.setText(format(expandedPanelTitlePattern, pager.entitiesAmount)); 516 } 517 setPaginationButtonsState(); 518 } 519 } 520 } 521} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/save/l2t1_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM insertion example 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Initializing model 6RandomModel toInsert = new RandomModel(); 7// Setting model fields 8toInsert.randomInt = 10; 9... 10// Saving model with save method 11mapper.save(toInsert); 12// Saving model with direct insert call 13mapper.insert(toInsert); KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \n  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \n  Click to view RandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) 3@INDEX( 4 indexName = \u0026#34;random_animal_index\u0026#34;, 5 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 6) 7public class RandomModel extends AbstractRandomModel { 8 9 10 public RandomModel() { 11 super(); 12 } 13 14 @KITTY_COLUMN(columnOrder = 5) 15 public String randomAnimalSays; 16 17 @Override 18 public String toString() { 19 return new StringBuffer(64).append(\u0026#34;[ id = \u0026#34;) 20 .append(id) 21 .append(\u0026#34;; randomInt = \u0026#34;) 22 .append(Integer.toString(randomInt)) 23 .append(\u0026#34;; randomInteger = \u0026#34;) 24 .append(randomInteger) 25 .append(\u0026#34;; randomAnimal = \u0026#34;) 26 .append(randomAnimal) 27 .append(\u0026#34;; randomAnimnalLocalizedName = \u0026#34;) 28 .append(randomAnimalName) 29 .append(\u0026#34;; randomAnimalSays = \u0026#34;) 30 .append(randomAnimalSays).append(\u0026#34; ]\u0026#34;).toString(); 31 } 32} \n  Click to view RandomMapper.class:  1public class RandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; RandomMapper(KittyTableConfiguration tableConfiguration, 4 M blankModelInstance, 5 String databasePassword) { 6 super(tableConfiguration, blankModelInstance, databasePassword); 7 } 8 9 protected SQLiteCondition getAnimalCondition(Animals animal) { 10 return new SQLiteConditionBuilder() 11 .addField(RND_ANIMAL_CNAME) 12 .addSQLOperator(SQLiteOperator.EQUAL) 13 .addObjectValue(animal) 14 .build(); 15 } 16 17 public long deleteByRandomIntegerRange(int start, int end) { 18 SQLiteCondition condition = new SQLiteConditionBuilder() 19 .addField(\u0026#34;random_int\u0026#34;) 20 .addSQLOperator(GREATER_OR_EQUAL) 21 .addValue(start) 22 .addSQLOperator(AND) 23 .addField(\u0026#34;random_int\u0026#34;) 24 .addSQLOperator(LESS_OR_EQUAL) 25 .addValue(end) 26 .build(); 27 return deleteByWhere(condition); 28 } 29 30 public long deleteByAnimal(Animals animal) { 31 return deleteByWhere(getAnimalCondition(animal)); 32 } 33 34 public List\u0026lt;RandomModel\u0026gt; findByAnimal(Animals animal, long offset, long limit, boolean groupingOn) { 35 SQLiteCondition condition = getAnimalCondition(animal); 36 QueryParameters qparam = new QueryParameters(); 37 qparam.setLimit(limit).setOffset(offset); 38 if(groupingOn) 39 qparam.setGroupByColumns(RND_ANIMAL_CNAME); 40 else 41 qparam.setGroupByColumns(KittyConstants.ROWID); 42 return findWhere(condition, qparam); 43 } 44 45 public List\u0026lt;RandomModel\u0026gt; findByIdRange(long fromId, long toId, boolean inclusive, Long offset, Long limit) { 46 SQLiteCondition condition = new SQLiteConditionBuilder() 47 .addField(\u0026#34;id\u0026#34;) 48 .addSQLOperator(inclusive ? GREATER_OR_EQUAL : GREATER_THAN) 49 .addValue(fromId) 50 .addSQLOperator(AND) 51 .addField(\u0026#34;id\u0026#34;) 52 .addSQLOperator(inclusive ? LESS_OR_EQUAL : LESS_THAN) 53 .addValue(toId) 54 .build(); 55 QueryParameters qparam = new QueryParameters(); 56 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 57 return findWhere(condition, qparam); 58 } 59 60 public List\u0026lt;RandomModel\u0026gt; findAllRandomModels(Long offset, Long limit) { 61 QueryParameters qparam = new QueryParameters(); 62 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 63 return findAll(qparam); 64 } 65} \n  Click to view ComplexRandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \n  Click to view IndexesAndConstraintsModel.class:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 static final String RANDOM_ID_CNAME = \u0026#34;rnd_id\u0026#34;; 15 16 @KITTY_COLUMN(columnOrder = 0) 17 @PRIMARY_KEY 18 @NOT_NULL 19 public Long id; 20 21 @KITTY_COLUMN(columnOrder = 1) 22 @NOT_NULL 23 @UNIQUE 24 public Long rndId; 25 26 @KITTY_COLUMN(columnOrder = 2) 27 @CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 28 public Animals animal; 29 30 @KITTY_COLUMN(columnOrder = 3) 31 @DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 32 @NOT_NULL 33 public Integer defaultNumber; 34 35 @KITTY_COLUMN(columnOrder = 4) 36 @DEFAULT( 37 predefinedLiteralValue = LiteralValues.CURRENT_DATE 38 ) 39 @NOT_NULL 40 public String creationDate; 41 42 @KITTY_COLUMN(columnOrder = 5) 43 @DEFAULT( 44 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 45 ) 46 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 47 @NOT_NULL 48 public Timestamp creationTmstmp; 49 50 @Override 51 public String toString() { 52 StringBuilder sb = new StringBuilder(64); 53 sb.append(\u0026#34;[ RowID = \u0026#34;).append(getRowID()) 54 .append(\u0026#34; ; id = \u0026#34;).append(id) 55 .append(\u0026#34; ; rndId = \u0026#34;).append(rndId) 56 .append(\u0026#34; ; animal = \u0026#34;).append(animal) 57 .append(\u0026#34; ; defaultNumber = \u0026#34;).append(defaultNumber) 58 .append(\u0026#34; ; creationDate = \u0026#34;).append(creationDate) 59 .append(\u0026#34; ; creationTmstmp = \u0026#34;).append(creationTmstmp).append(\u0026#34; ]\u0026#34;); 60 return sb.toString(); 61 } 62} \n  Fragment and utility code used in this tutorial   Click to view RNDRandomModelFactory.class:  1public class RNDRandomModelFactory { 2 3 private final Context context; 4 private final Random randomizer; 5 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 7 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 8 9 public RNDRandomModelFactory(Context context) { 10 super(); 11 this.context = context; 12 this.randomizer = new Random(); 13 14 // Lol, getContext().getString() method is slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 15 // Right now getting those string causes only 14% of execution time 16 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 17 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 18 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 19 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 20 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 21 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 22 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 23 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 24 25 26 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 27 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 28 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 29 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 30 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 31 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 32 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 33 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 34 35 } 36 37 public RandomModel newRandomModel() { 38 RandomModel out = new RandomModel(); 39 out.randomInt = randomizer.nextInt(); 40 out.randomInteger = randomizer.nextInt(); 41 out.randomAnimal = Animals.rndAnimal(randomizer); 42 out.randomAnimalSays = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(out.randomAnimal)); 43 out.randomAnimalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(out.randomAnimal)); 44 return out; 45 } 46} \n  Click to view Lesson2Tab1New.class:  1public class Lesson2Tab1New extends Lesson2BaseFragment { 2 3 private BasicDatabase db; 4 5 private EditText randomIntET; 6 private EditText randomIntegerET; 7 8 private EditText randomAnimalNameET; 9 private EditText randomAnimalSaysET; 10 11 12 13 private Button saveButton; 14 15 16 public Lesson2Tab1New() {}; 17 18 @Override 19 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 20 View rootView = inflater.inflate(R.layout.lesson2_tab1_new, container, false); 21 22 23 randomAnimalNameET = (EditText) rootView.findViewById(R.id.l2_t1_et_animal_localised_name); 24 randomAnimalSaysET = (EditText) rootView.findViewById(R.id.l2_t1_et_animal_says); 25 26 randomIntET = (EditText) rootView.findViewById(R.id.l2_t1_et_random_int); 27 randomIntegerET = (EditText) rootView.findViewById(R.id.l2_t1_et_random_integer); 28 29 30 31 saveButton = (Button) rootView.findViewById(R.id._l2_t1_save_button); 32 saveButton.setOnClickListener(new View.OnClickListener() { 33 @Override 34 public void onClick(View v) { 35 go(); 36 } 37 }); 38 39 setUpExpandedList( 40 rootView, 41 R.id._l2_t1_expanded_panel_lw, 42 R.id._l2_t1_expanded_panel_text, 43 R.string._l2_t1_expanded_panel_text_pattern 44 ); 45 46 setAnimalSpinner(rootView, R.id.l2_t1_spinner, new AdapterView.OnItemSelectedListener() { 47 @Override 48 public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { 49 String enumStringName = (String) animalSpinner.getAdapter().getItem(position); 50 if(enumStringName.equals(animalAdapter.getItem(animalAdapter.getCount()))) { 51 // do nothing, skip spinner hint 52 } else { 53 Animals animal = Animals.valueOf(enumStringName); 54 randomAnimalNameET.setText(Animals.getLocalizedAnimalNameResource(animal)); 55 randomAnimalSaysET.setText(Animals.getLocalizedAnimalSaysResource(animal)); 56 } 57 } 58 59 @Override 60 public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) { 61 62 } 63 }); 64 65 66 getDb().printPregeneratedCreateSchemaToLog(\u0026#34;KittyORM BDB C\u0026#34;); 67 getDb().printPregeneratedDropSchemaToLog(\u0026#34;KittyORM BDB D\u0026#34;); 68 69 return rootView; 70 } 71 72 void textWarnDialog() { 73 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._warning_dialog_test_message_big, R.string._warning_dialog_ok_button_text); 74 } 75 76 void go() { 77 String randomInt = randomIntET.getText().toString(); 78 String randomInteger = randomIntegerET.getText().toString(); 79 String animalEnumStringValue = animalSpinner.getSelectedItem().toString(); 80 81 if(animalEnumStringValue.equals(animalAdapter.getItem(animalAdapter.getCount()))) { 82 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_text, R.string._warning_dialog_ok_button_text); 83 return; 84 } 85 if(randomInt == null || randomInteger == null) { 86 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_text, R.string._warning_dialog_ok_button_text); 87 return; 88 } 89 if(randomInt.length() == 0 || randomInteger.length() == 0) { 90 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_text, R.string._warning_dialog_ok_button_text); 91 return; 92 } 93 int rndInt = 0; Integer rndInteger = null; 94 try { 95 rndInt = Integer.parseInt(randomInt); 96 rndInteger = Integer.valueOf(randomInteger); 97 } catch (Exception e) { 98 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_bad_input, R.string._warning_dialog_ok_button_text); 99 return; 100 } 101 RandomModel toInsert = new RandomModel(); 102 toInsert.randomInt = rndInt; 103 toInsert.randomInteger = rndInteger; 104 Animals animal = Animals.valueOf(animalEnumStringValue); 105 toInsert.randomAnimal = animal; 106 toInsert.randomAnimalName = getString(Animals.getLocalizedAnimalNameResource(animal)); 107 toInsert.randomAnimalSays = getString(Animals.getLocalizedAnimalSaysResource(animal)); 108 KittyMapper mapper = getMapper(); 109 long rowid = mapper.insert(toInsert); 110 if(rowid \u0026gt; 0) { 111 addNewEventToExpandedPanel(format(getString(R.string._l2_t1_expanded_added), rowid, toInsert, mapper.countAll())); 112 } else { 113 addNewEventToExpandedPanel(format(getString(R.string._l2_t1_expanded_error), toInsert)); 114 } 115 mapper.close(); 116 } 117 118 @Override 119 public void onCreate(Bundle bundle) { 120 super.onCreate(bundle); 121 } 122 123 // Fab menu section 124 125 @Override 126 public View.OnClickListener helpFabMenuAction() { 127 return new View.OnClickListener() { 128 @Override 129 public void onClick(View v) { 130 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T1_TUTORIAL); 131 } 132 }; 133 } 134 135 @Override 136 public View.OnClickListener sourceFabMenuAction() { 137 return new View.OnClickListener() { 138 @Override 139 public void onClick(View v) { 140 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T1_SOURCE); 141 } 142 }; 143 } 144 145 @Override 146 public View.OnClickListener schemaFabMenuAction() { 147 return new View.OnClickListener() { 148 @Override 149 public void onClick(View v) { 150 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T1_SCHEMA); 151 } 152 }; 153 } 154 155 @Override 156 protected int snackbarMessageResource() { 157 return R.string._l2_t1_snackbar_message; 158 } 159} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/update/l2t2_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM update example  1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel toUpdate = mapper.findByIPK(0l); 7// Setting model fields 8toUpdate.randomInt = 12; 9... 10// Saving model with save method 11mapper.save(toUpdate); 12// Saving model with direct insert call 13mapper.update(toInsert); 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Creating condition builder instance 6SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 7builder.addField(\u0026#34;id\u0026#34;) 8 .addSQLOperator(SQLiteOperator.GREATER_OR_EQUAL) 9 .addValue(10) 10 .addSQLOperator(SQLiteOperator.AND) 11 .addField(\u0026#34;id\u0026#34;) 12 .addSQLOperator(SQLiteOperator.LESS_OR_EQUAL) 13 .addValue(20); 14// Creating blank model and setting it fields 15RandomModel toUpdate = new RandomModel(); 16toUpdate.randomInt = 50; 17// Updating table with custom clause and values from model 18mapper.update(toUpdate, builder.build(), new String[]{\u0026#34;randomInt\u0026#34;}, CVUtils.INCLUDE_ONLY_SELECTED_FIELDS);  KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \n  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \n  Click to view RandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) 3@INDEX( 4 indexName = \u0026#34;random_animal_index\u0026#34;, 5 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 6) 7public class RandomModel extends AbstractRandomModel { 8 9 10 public RandomModel() { 11 super(); 12 } 13 14 @KITTY_COLUMN(columnOrder = 5) 15 public String randomAnimalSays; 16 17 @Override 18 public String toString() { 19 return new StringBuffer(64).append(\u0026#34;[ id = \u0026#34;) 20 .append(id) 21 .append(\u0026#34;; randomInt = \u0026#34;) 22 .append(Integer.toString(randomInt)) 23 .append(\u0026#34;; randomInteger = \u0026#34;) 24 .append(randomInteger) 25 .append(\u0026#34;; randomAnimal = \u0026#34;) 26 .append(randomAnimal) 27 .append(\u0026#34;; randomAnimnalLocalizedName = \u0026#34;) 28 .append(randomAnimalName) 29 .append(\u0026#34;; randomAnimalSays = \u0026#34;) 30 .append(randomAnimalSays).append(\u0026#34; ]\u0026#34;).toString(); 31 } 32} \n  Click to view RandomMapper.class:  1public class RandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; RandomMapper(KittyTableConfiguration tableConfiguration, 4 M blankModelInstance, 5 String databasePassword) { 6 super(tableConfiguration, blankModelInstance, databasePassword); 7 } 8 9 protected SQLiteCondition getAnimalCondition(Animals animal) { 10 return new SQLiteConditionBuilder() 11 .addField(RND_ANIMAL_CNAME) 12 .addSQLOperator(SQLiteOperator.EQUAL) 13 .addObjectValue(animal) 14 .build(); 15 } 16 17 public long deleteByRandomIntegerRange(int start, int end) { 18 SQLiteCondition condition = new SQLiteConditionBuilder() 19 .addField(\u0026#34;random_int\u0026#34;) 20 .addSQLOperator(GREATER_OR_EQUAL) 21 .addValue(start) 22 .addSQLOperator(AND) 23 .addField(\u0026#34;random_int\u0026#34;) 24 .addSQLOperator(LESS_OR_EQUAL) 25 .addValue(end) 26 .build(); 27 return deleteByWhere(condition); 28 } 29 30 public long deleteByAnimal(Animals animal) { 31 return deleteByWhere(getAnimalCondition(animal)); 32 } 33 34 public List\u0026lt;RandomModel\u0026gt; findByAnimal(Animals animal, long offset, long limit, boolean groupingOn) { 35 SQLiteCondition condition = getAnimalCondition(animal); 36 QueryParameters qparam = new QueryParameters(); 37 qparam.setLimit(limit).setOffset(offset); 38 if(groupingOn) 39 qparam.setGroupByColumns(RND_ANIMAL_CNAME); 40 else 41 qparam.setGroupByColumns(KittyConstants.ROWID); 42 return findWhere(condition, qparam); 43 } 44 45 public List\u0026lt;RandomModel\u0026gt; findByIdRange(long fromId, long toId, boolean inclusive, Long offset, Long limit) { 46 SQLiteCondition condition = new SQLiteConditionBuilder() 47 .addField(\u0026#34;id\u0026#34;) 48 .addSQLOperator(inclusive ? GREATER_OR_EQUAL : GREATER_THAN) 49 .addValue(fromId) 50 .addSQLOperator(AND) 51 .addField(\u0026#34;id\u0026#34;) 52 .addSQLOperator(inclusive ? LESS_OR_EQUAL : LESS_THAN) 53 .addValue(toId) 54 .build(); 55 QueryParameters qparam = new QueryParameters(); 56 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 57 return findWhere(condition, qparam); 58 } 59 60 public List\u0026lt;RandomModel\u0026gt; findAllRandomModels(Long offset, Long limit) { 61 QueryParameters qparam = new QueryParameters(); 62 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 63 return findAll(qparam); 64 } 65} \n  Click to view ComplexRandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \n  Click to view IndexesAndConstraintsModel.class:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 static final String RANDOM_ID_CNAME = \u0026#34;rnd_id\u0026#34;; 15 16 @KITTY_COLUMN(columnOrder = 0) 17 @PRIMARY_KEY 18 @NOT_NULL 19 public Long id; 20 21 @KITTY_COLUMN(columnOrder = 1) 22 @NOT_NULL 23 @UNIQUE 24 public Long rndId; 25 26 @KITTY_COLUMN(columnOrder = 2) 27 @CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 28 public Animals animal; 29 30 @KITTY_COLUMN(columnOrder = 3) 31 @DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 32 @NOT_NULL 33 public Integer defaultNumber; 34 35 @KITTY_COLUMN(columnOrder = 4) 36 @DEFAULT( 37 predefinedLiteralValue = LiteralValues.CURRENT_DATE 38 ) 39 @NOT_NULL 40 public String creationDate; 41 42 @KITTY_COLUMN(columnOrder = 5) 43 @DEFAULT( 44 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 45 ) 46 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 47 @NOT_NULL 48 public Timestamp creationTmstmp; 49 50 @Override 51 public String toString() { 52 StringBuilder sb = new StringBuilder(64); 53 sb.append(\u0026#34;[ RowID = \u0026#34;).append(getRowID()) 54 .append(\u0026#34; ; id = \u0026#34;).append(id) 55 .append(\u0026#34; ; rndId = \u0026#34;).append(rndId) 56 .append(\u0026#34; ; animal = \u0026#34;).append(animal) 57 .append(\u0026#34; ; defaultNumber = \u0026#34;).append(defaultNumber) 58 .append(\u0026#34; ; creationDate = \u0026#34;).append(creationDate) 59 .append(\u0026#34; ; creationTmstmp = \u0026#34;).append(creationTmstmp).append(\u0026#34; ]\u0026#34;); 60 return sb.toString(); 61 } 62} \n  Fragment and utility code used in this tutorial   Click to view RNDRandomModelFactory.class:  1public class RNDRandomModelFactory { 2 3 private final Context context; 4 private final Random randomizer; 5 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 7 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 8 9 public RNDRandomModelFactory(Context context) { 10 super(); 11 this.context = context; 12 this.randomizer = new Random(); 13 14 // Lol, getContext().getString() method is slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 15 // Right now getting those string causes only 14% of execution time 16 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 17 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 18 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 19 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 20 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 21 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 22 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 23 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 24 25 26 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 27 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 28 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 29 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 30 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 31 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 32 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 33 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 34 35 } 36 37 public RandomModel newRandomModel() { 38 RandomModel out = new RandomModel(); 39 out.randomInt = randomizer.nextInt(); 40 out.randomInteger = randomizer.nextInt(); 41 out.randomAnimal = Animals.rndAnimal(randomizer); 42 out.randomAnimalSays = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(out.randomAnimal)); 43 out.randomAnimalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(out.randomAnimal)); 44 return out; 45 } 46} \n  Click to view Lesson2Tab2Update.class:  1public class Lesson2Tab2Update extends Lesson2BaseFragment { 2 3 public Lesson2Tab2Update(){} 4 5 Button loadModelButton; 6 Button updateButton; 7 8 EditText loadModelIdET; 9 10 EditText randomIntET; 11 EditText randomIntegerET; 12 EditText randomAnimalNameET; 13 EditText randomAnimalSaysET; 14 15 TextView loadedModelTW; 16 17 18 @Override 19 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 20 View rootView = inflater.inflate(R.layout.lesson2_tab2_update, container, false); 21 setAnimalSpinner(rootView, R.id.l2_t2_spinner, new AdapterView.OnItemSelectedListener() { 22 @Override 23 public void onItemSelected(AdapterView\u0026lt;?\u0026gt; parent, View view, int position, long id) { 24 String enumStringName = (String) animalSpinner.getAdapter().getItem(position); 25 if(enumStringName.equals(animalAdapter.getItem(animalAdapter.getCount()))) { 26 // do nothing, skip spinner hint 27 } else { 28 Animals animal = Animals.valueOf(enumStringName); 29 randomAnimalNameET.setText(Animals.getLocalizedAnimalNameResource(animal)); 30 randomAnimalSaysET.setText(Animals.getLocalizedAnimalSaysResource(animal)); 31 } 32 } 33 34 @Override 35 public void onNothingSelected(AdapterView\u0026lt;?\u0026gt; parent) { 36 37 } 38 }); 39 40 loadedModelTW = rootView.findViewById(R.id.l2_t2_tw_current_model); 41 loadModelButton = rootView.findViewById(R.id.l2_t2_load_button); 42 43 loadModelButton.setOnClickListener(new View.OnClickListener() { 44 @Override 45 public void onClick(View v) { 46 loadModel(); 47 } 48 }); 49 50 updateButton = rootView.findViewById(R.id.l2_t2_update_model_button); 51 52 updateButton.setOnClickListener(new View.OnClickListener() { 53 54 /** 55* Called when a view has been clicked. 56* 57* @param v The view that was clicked. 58*/ 59 @Override 60 public void onClick(View v) { 61 updateModel(); 62 } 63 }); 64 65 randomIntET = rootView.findViewById(R.id.l2_t2_et_random_int); 66 randomIntegerET = rootView.findViewById(R.id.l2_t2_et_random_integer); 67 68 randomAnimalNameET = rootView.findViewById(R.id.l2_t2_et_animal_localised_name); 69 randomAnimalSaysET = rootView.findViewById(R.id.l2_t2_et_animal_says); 70 71 loadModelIdET = rootView.findViewById(R.id.l2_t2_et_id); 72 73 setUpExpandedList( 74 rootView, 75 R.id._l2_t2_expanded_panel_lw, 76 R.id._l2_t2_expanded_panel_text, 77 R.string._l2_t2_expanded_text_pattern 78 ); 79 80 return rootView; 81 } 82 83 void updateModel() { 84 String randomInt = randomIntET.getText().toString(); 85 String randomInteger = randomIntegerET.getText().toString(); 86 String animalEnumStringValue = animalSpinner.getSelectedItem().toString(); 87 88 if(animalEnumStringValue.equals(animalAdapter.getItem(animalAdapter.getCount()))) { 89 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_text, R.string._warning_dialog_ok_button_text); 90 return; 91 } 92 if(randomInt == null || randomInteger == null) { 93 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_text, R.string._warning_dialog_ok_button_text); 94 return; 95 } 96 if(randomInt.length() == 0 || randomInteger.length() == 0) { 97 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_text, R.string._warning_dialog_ok_button_text); 98 return; 99 } 100 int rndInt = 0; Integer rndInteger = null; 101 try { 102 rndInt = Integer.parseInt(randomInt); 103 rndInteger = Integer.valueOf(randomInteger); 104 } catch (Exception e) { 105 getLessonActivity().showWarningDialog(R.string._warning_dialog_title, R.string._l2_t1_warning_bad_input, R.string._warning_dialog_ok_button_text); 106 return; 107 } 108 if(isLoadedModelExists()) { 109 RandomMapper mapper = getMapper(); 110 RandomModel toUpdate = mapper.findByIPK(getLoadedModelId()); 111 RandomModel originalModel = toUpdate.clone(RandomModel.class); 112 toUpdate.randomInt = rndInt; 113 toUpdate.randomInteger = rndInteger; 114 Animals animal = Animals.valueOf(animalEnumStringValue); 115 toUpdate.randomAnimal = animal; 116 toUpdate.randomAnimalName = getString(Animals.getLocalizedAnimalNameResource(animal)); 117 toUpdate.randomAnimalSays = getString(Animals.getLocalizedAnimalSaysResource(animal)); 118 long updateStatus = mapper.update(toUpdate); 119 if(updateStatus \u0026gt; 0) { 120 addNewEventToExpandedPanel(format(getString(R.string._l2_t2_expanded_added), toUpdate.getRowID(), originalModel, toUpdate, mapper.countAll())); 121 } else { 122 addNewEventToExpandedPanel(format(getString(R.string._l2_t2_expanded_error), toUpdate)); 123 } 124 mapper.close(); 125 if(isLoadedModelExists()) { 126 modelExists(); 127 } else { 128 noModel(); 129 } 130 } else { 131 addNewEventToExpandedPanel(format(getString(R.string._l2_t2_expanded_error_unable), getLoadedModelId())); 132 } 133 } 134 135 void loadModel() { 136 String modelIdFromLoadET = loadModelIdET.getText().toString(); 137 if(modelIdFromLoadET == null) { 138 getLessonActivity().showWarningDialog( 139 R.string._warning_dialog_title, 140 R.string._l2_t2_warning_bad_id_input, 141 R.string._warning_dialog_ok_button_text); 142 return; 143 } 144 if(modelIdFromLoadET.length() == 0) { 145 getLessonActivity().showWarningDialog( 146 R.string._warning_dialog_title, 147 R.string._l2_t2_warning_bad_id_input, 148 R.string._warning_dialog_ok_button_text); 149 return; 150 } 151 Long modelToLoad = null; 152 try { 153 modelToLoad = Long.valueOf(modelIdFromLoadET); 154 } catch (Exception e) { 155 getLessonActivity().showWarningDialog( 156 R.string._warning_dialog_title, 157 R.string._l2_t2_warning_bad_id_input, 158 R.string._warning_dialog_ok_button_text); 159 return; 160 } 161 setLoadedModelId(modelToLoad); 162 if(isLoadedModelExists()) 163 modelExists(); 164 else { 165 getLessonActivity().showWarningDialog( 166 R.string._warning_dialog_title, 167 R.string._l2_t2_warning_no_record_with_id, 168 R.string._warning_dialog_ok_button_text); 169 noModel(); 170 } 171 } 172 173 @Override 174 public void onVisible() { 175 new LoadSelectedModel().execute(0l); 176 } 177 178 void modelExists() { 179 setUpdateFieldsActive(true); 180 loadModelData(getLoadedModelId()); 181 } 182 183 void noModel() { 184 setUpdateFieldsActive(false); 185 setLoadedModelTWText(null); 186 } 187 188 void loadModelData(Long IPK) { 189 RandomMapper mapper = getMapper(); 190 RandomModel model = mapper.findByIPK(IPK); 191 if(model == null) { 192 setUpdateFieldsActive(false); 193 } else { 194 loadModelValues(model); 195 } 196 setLoadedModelTWText(model); 197 } 198 199 void setLoadedModelTWText(RandomModel model) { 200 if(model == null) { 201 loadedModelTW.setText( 202 format( 203 getString(R.string._l2_t2_current_model_pattern), 204 getString(R.string._l2_t2_current_model_not_set) 205 ) 206 ); 207 } else { 208 loadedModelTW.setText( 209 format( 210 getString(R.string._l2_t2_current_model_pattern), 211 model 212 ) 213 ); 214 } 215 } 216 217 void loadModelValues(RandomModel model) { 218 loadModelIdET.setText(Long.toString(model.id)); 219 randomIntET.setText(Integer.toString(model.randomInt)); 220 randomIntegerET.setText(Integer.toString(model.randomInteger)); 221 randomAnimalSaysET.setText(model.randomAnimalSays); 222 randomAnimalNameET.setText(model.randomAnimalName); 223 animalSpinner.setSelection(animalAdapter.getPosition(model.randomAnimal.name()), true); 224 } 225 226 void setUpdateFieldsActive(boolean isActive) { 227 //randomIntET.setFocusable(isActive); 228 randomIntET.setEnabled(isActive); 229 230 //randomIntegerET.setFocusable(isActive); 231 randomIntegerET.setEnabled(isActive); 232 233 //updateButton.setFocusable(isActive); 234 updateButton.setEnabled(isActive); 235 236 //animalSpinner.setFocusable(isActive); 237 animalSpinner.setEnabled(isActive); 238 if(!isActive) 239 animalSpinner.setVisibility(View.GONE); 240 else 241 animalSpinner.setVisibility(View.VISIBLE); 242 243 randomAnimalSaysET.setEnabled(isActive); 244 randomAnimalNameET.setEnabled(isActive); 245 } 246 247 // Fab menu section 248 249 // Fab menu section 250 251 @Override 252 public View.OnClickListener helpFabMenuAction() { 253 return new View.OnClickListener() { 254 @Override 255 public void onClick(View v) { 256 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T2_TUTORIAL); 257 } 258 }; 259 } 260 261 @Override 262 public View.OnClickListener sourceFabMenuAction() { 263 return new View.OnClickListener() { 264 @Override 265 public void onClick(View v) { 266 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T2_SOURCE); 267 } 268 }; 269 } 270 271 @Override 272 public View.OnClickListener schemaFabMenuAction() { 273 return new View.OnClickListener() { 274 @Override 275 public void onClick(View v) { 276 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L2_T2_SCHEMA); 277 } 278 }; 279 } 280 281 @Override 282 protected int snackbarMessageResource() { 283 return R.string._l2_t2_snackbar_message; 284 } 285 286 // Assyncs 287 private static String LOG_E_EXCEPTION_ON_LOAD = \u0026#34;Error on loading initial model at Lesson2Tab2Update, see exception details: \u0026#34;; 288 private static String LOG_E_EXCEPTION_ON_LOAD_NESTED = \u0026#34;Error on loading initial model at Lesson2Tab2Update, see exception details (nested exception): \u0026#34;; 289 290 class LoadSelectedModel extends AsyncTask\u0026lt;Long, Long, RandomModel\u0026gt; { 291 ProgressDialog dialog; 292 293 @Override 294 protected void onPreExecute() {} 295 296 @Override 297 protected RandomModel doInBackground(Long... params) { 298 Long modelToLoad = getLoadedModelId(); 299 if(modelToLoad == null) return null; 300 else { 301 try { 302 RandomMapper mapper = (RandomMapper) getDb().getMapper(RandomModel.class); 303 return mapper.findByIPK(modelToLoad); 304 } catch (Exception e) { 305 Log.e(BasicDatabase.LOG_TAG, LOG_E_EXCEPTION_ON_LOAD, e); 306 if(e instanceof KittyRuntimeException) { 307 if(((KittyRuntimeException) e).getNestedException() != null) 308 Log.e(BasicDatabase.LOG_TAG, 309 LOG_E_EXCEPTION_ON_LOAD_NESTED, 310 ((KittyRuntimeException) e).getNestedException()); 311 } 312 return null; 313 } 314 } 315 } 316 317 @Override 318 protected void onPostExecute(RandomModel result) { 319 if (result != null) { 320 loadModelValues(result); 321 setLoadedModelTWText(result); 322 } else { 323 setUpdateFieldsActive(false); 324 setLoadedModelTWText(null); 325 } 326 } 327 } 328} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/datatype_mapping/l3t1_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM custom mapping implementation example   Click to view model field annotation example:  1// Saving to text 2@KITTY_COLUMN( 3 columnOrder = 18, 4 columnAffinity = TypeAffinities.TEXT 5) 6@KITTY_COLUMN_SERIALIZATION 7public AnimalSounds stringSDF; 8 9// Saving to blob 10@KITTY_COLUMN( 11 columnOrder = 20, 12 columnAffinity = TypeAffinities.BLOB 13) 14@KITTY_COLUMN_SERIALIZATION 15public Bitmap byteArraySDF; \n  Click to serialization\\deserialization methods implementation examples:  1String stringSDFSerialize() { 2 if(stringSDF == null) return null; 3 return new GsonBuilder().create().toJson(stringSDF); 4} 5 6AnimalSounds stringSDFDeserialize(String cvData) { 7 if(cvData == null) return null; 8 if(cvData.length() == 0) return null; 9 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 10} 11 12public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 13 if(byteArraySDF == null) return null; 14 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 15 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 16 return bmpStream.toByteArray(); 17} 18 19public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 20 if(cursorData == null) return null; 21 if(cursorData.length == 0) return null; 22 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 23} \n  KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 domainPairs = { 11 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 12 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 13 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 14 } 15) 16public class BasicDatabase extends KittyDatabase { 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31} \n  Click to view AbstractRandomModel.class:  1public abstract class AbstractRandomModel extends KittyModel { 2 3 public static final String RND_INTEGER_CNAME = \u0026#34;rnd_int_custom_column_name\u0026#34;; 4 public static final String RND_ANIMAL_CNAME = \u0026#34;rndanimal\u0026#34;; 5 6 @KITTY_COLUMN( 7 isIPK = true, 8 columnOrder = 0 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public int randomInt; 16 17 @KITTY_COLUMN( 18 columnOrder = 2, 19 columnName = RND_INTEGER_CNAME 20 ) 21 public Integer randomInteger; 22 23 @KITTY_COLUMN( 24 columnOrder = 3, 25 columnName = RND_ANIMAL_CNAME 26 ) 27 public Animals randomAnimal; 28 29 @KITTY_COLUMN( 30 columnOrder = 4, 31 columnAffinity = TypeAffinities.TEXT 32 ) 33 public String randomAnimalName; 34} \n  Click to view ComplexRandomModel.class:  1@KITTY_TABLE 2@KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 3public class ComplexRandomModel extends AbstractRandomModel { 4 5 public ComplexRandomModel() { 6 super(); 7 } 8 9 10 // Primitives 11 // (boolean, int, byte, double, long, short, float) 12 @KITTY_COLUMN(columnOrder = 5) 13 public boolean boolF; 14 15 16 @KITTY_COLUMN(columnOrder = 6) 17 public byte byteF; 18 19 @KITTY_COLUMN(columnOrder = 7) 20 public double doubleF; 21 22 @KITTY_COLUMN(columnOrder = 8) 23 public long longF; 24 25 @KITTY_COLUMN(columnOrder = 9) 26 public short shortF; 27 28 @KITTY_COLUMN(columnOrder = 10) 29 public float floatF; 30 31 // Byte array 32 @KITTY_COLUMN(columnOrder = 11) 33 public byte[] byteArray; 34 35 // String (TEXT) (String, BigDecimal, BigInteger, Enum) 36 @KITTY_COLUMN(columnOrder = 12) 37 public String stringF; 38 39 @KITTY_COLUMN(columnOrder = 13) 40 public BigDecimal bigDecimalF; 41 42 @KITTY_COLUMN(columnOrder = 14) 43 public BigInteger bigIntegerF; 44 45 @KITTY_COLUMN(columnOrder = 15) 46 public Uri uriF; 47 48 @KITTY_COLUMN(columnOrder = 16) 49 public File fileF; 50 51 @KITTY_COLUMN(columnOrder = 17) 52 public Currency currencyF; 53 54 // SD 55 @KITTY_COLUMN( 56 columnOrder = 18, 57 columnAffinity = TypeAffinities.TEXT 58 ) 59 @KITTY_COLUMN_SERIALIZATION 60 public AnimalSounds stringSDF; 61 62 @KITTY_COLUMN(columnOrder = 19) 63 public SomeColours bitmapColour; 64 65 @KITTY_COLUMN( 66 columnOrder = 20, 67 columnAffinity = TypeAffinities.BLOB 68 ) 69 @KITTY_COLUMN_SERIALIZATION 70 public Bitmap byteArraySDF; 71 72 String stringSDFSerialize() { 73 if(stringSDF == null) return null; 74 return new GsonBuilder().create().toJson(stringSDF); 75 } 76 77 AnimalSounds stringSDFDeserialize(String cvData) { 78 if(cvData == null) return null; 79 if(cvData.length() == 0) return null; 80 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 81 } 82 83 public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 84 if(byteArraySDF == null) return null; 85 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 86 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 87 return bmpStream.toByteArray(); 88 } 89 90 public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 91 if(cursorData == null) return null; 92 if(cursorData.length == 0) return null; 93 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 94 } 95 96 // Primitive wrappers Boolean, Integer, Byte, Double, Short or Float 97 @KITTY_COLUMN(columnOrder = 21) 98 public Boolean boolFF; 99 100 101 @KITTY_COLUMN(columnOrder = 22) 102 public Byte byteFF; 103 104 @KITTY_COLUMN(columnOrder = 23) 105 public Double doubleFF; 106 107 @KITTY_COLUMN(columnOrder = 24) 108 public Short shortFF; 109 110 @KITTY_COLUMN(columnOrder = 25) 111 public Float floatFF; 112 113 114 // Long represented types Long, Date, Calendar, Timestamp 115 @KITTY_COLUMN(columnOrder = 26) 116 public Long longFF; 117 118 @KITTY_COLUMN(columnOrder = 27) 119 public Date dateF; 120 121 @KITTY_COLUMN(columnOrder = 28) 122 public Calendar calendarF; 123 124 @KITTY_COLUMN(columnOrder = 29) 125 public Timestamp timestampF; 126 127 @Override 128 public String toString() { 129 StringBuffer out = new StringBuffer(256); 130 out.append(\u0026#34;Long id : \u0026#34;+id+\u0026#34;\\r\\n\u0026#34;); 131 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;\\r\\n\u0026#34;); 132 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 133 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;\\r\\n\u0026#34;); 134 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;\\r\\n\u0026#34;); 135 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;\\r\\n\u0026#34;); 136 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;\\r\\n\u0026#34;); 137 out.append(\u0026#34;AnimalSounds stringSDF (HReadable) : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 138 out.append(\u0026#34;Uri uriF : \u0026#34; + uriF+\u0026#34;\\r\\n\u0026#34;); 139 out.append(\u0026#34;Currency currencyF : \u0026#34; + currencyF.getSymbol()+\u0026#34;\\r\\n\u0026#34;); 140 out.append(\u0026#34;... \\r\\n\u0026#34;); 141 return out.toString(); 142 } 143 144 public String toShortString() { 145 StringBuffer out = new StringBuffer(256); 146 out.append(\u0026#34;[ Long id : \u0026#34;+id+\u0026#34;; \u0026#34;); 147 out.append(\u0026#34;int randomInt : \u0026#34;+randomInt+\u0026#34;; \u0026#34;); 148 out.append(\u0026#34;String stringF : \u0026#34;+stringF+\u0026#34;; \u0026#34;); 149 out.append(\u0026#34;BigInteger bigIntegerF : \u0026#34;+bigIntegerF+\u0026#34;; \u0026#34;); 150 out.append(\u0026#34;SomeColours bitmapColour : \u0026#34;+bitmapColour+\u0026#34;; \u0026#34;); 151 out.append(\u0026#34;Short shortFF : \u0026#34;+shortFF+\u0026#34;; \u0026#34;); 152 out.append(\u0026#34;Timestamp timestampF (HReadable) : \u0026#34;+timestampF+\u0026#34;; ... ]\u0026#34;); 153 return out.toString(); 154 } 155 156 @Deprecated 157 public String toHTMLString() { 158 StringBuffer out = new StringBuffer(2048); 159 out.append(\u0026#34;\u0026lt;br\u0026gt;Long id : \u0026#34;+id.toString()+\u0026#34;\\r\\n\u0026#34;); 160 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 161 out.append(\u0026#34;\u0026lt;br\u0026gt;boolean boolF : \u0026#34;+Boolean.toString(boolF)+\u0026#34;\\r\\n\u0026#34;); 162 out.append(\u0026#34;\u0026lt;br\u0026gt;int randomInt : \u0026#34;+Integer.toString(randomInt)+\u0026#34;\\r\\n\u0026#34;); 163 out.append(\u0026#34;\u0026lt;br\u0026gt;byte byteF : \u0026#34;+Byte.toString(byteF)+\u0026#34;\\r\\n\u0026#34;); 164 out.append(\u0026#34;\u0026lt;br\u0026gt;double doubleF : \u0026#34;+Double.toString(doubleF)+\u0026#34;\\r\\n\u0026#34;); 165 out.append(\u0026#34;\u0026lt;br\u0026gt;long longF : \u0026#34;+Long.toString(longF)+\u0026#34;\\r\\n\u0026#34;); 166 out.append(\u0026#34;\u0026lt;br\u0026gt;short shortF : \u0026#34;+Short.toString(shortF)+\u0026#34;\\r\\n\u0026#34;); 167 out.append(\u0026#34;\u0026lt;br\u0026gt;float floatF : \u0026#34;+Float.toString(floatF)+\u0026#34;\\r\\n\u0026#34;); 168 out.append(\u0026#34;\u0026lt;br\u0026gt;byte[] byteArray : \u0026#34;+byteArrayToString(byteArray)+\u0026#34;\\r\\n\u0026#34;); 169 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;STRING AFFINITIES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 170 out.append(\u0026#34;\u0026lt;br\u0026gt;String randomAnimalName : \u0026#34;+randomAnimalName+\u0026#34;\\r\\n\u0026#34;); 171 out.append(\u0026#34;\u0026lt;br\u0026gt;String stringF : \u0026#34;+stringF+\u0026#34;\\r\\n\u0026#34;); 172 out.append(\u0026#34;\u0026lt;br\u0026gt;BigDecimal bigDecimalF : \u0026#34;+bigDecimalF.toEngineeringString()+\u0026#34;\\r\\n\u0026#34;); 173 out.append(\u0026#34;\u0026lt;br\u0026gt;BigInteger bigIntegerF : \u0026#34;+bigIntegerF.toString()+\u0026#34;\\r\\n\u0026#34;); 174 out.append(\u0026#34;\u0026lt;br\u0026gt;Animals randomAnimal : \u0026#34;+randomAnimal.toString()+\u0026#34;\\r\\n\u0026#34;); 175 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;SERIALIZATION AND DESERIALIZATION\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 176 out.append(\u0026#34;\u0026lt;br\u0026gt;AnimalSounds stringSDF : \u0026#34;+stringSDFSerialize()+\u0026#34;\\r\\n\u0026#34;); 177 out.append(\u0026#34;\u0026lt;br\u0026gt;SomeColours bitmapColour : \u0026#34;+bitmapColour.toString()+\u0026#34;\\r\\n\u0026#34;); 178 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;PRIMITIVE WRAPPERS\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 179 out.append(\u0026#34;\u0026lt;br\u0026gt;Boolean boolFF : \u0026#34;+boolFF.toString()+\u0026#34;\\r\\n\u0026#34;); 180 out.append(\u0026#34;\u0026lt;br\u0026gt;Integer randomInteger : \u0026#34;+randomInteger.toString()+\u0026#34;\\r\\n\u0026#34;); 181 out.append(\u0026#34;\u0026lt;br\u0026gt;Byte byteFF : \u0026#34;+byteFF.toString()+\u0026#34;\\r\\n\u0026#34;); 182 out.append(\u0026#34;\u0026lt;br\u0026gt;Double doubleFF : \u0026#34;+doubleFF.toString()+\u0026#34;\\r\\n\u0026#34;); 183 out.append(\u0026#34;\u0026lt;br\u0026gt;Short shortFF : \u0026#34;+shortFF.toString()+\u0026#34;\\r\\n\u0026#34;); 184 out.append(\u0026#34;\u0026lt;br\u0026gt;Float floatFF :\u0026#34;+floatFF.toString()+\u0026#34;\\r\\n\u0026#34;); 185 out.append(\u0026#34;\u0026lt;br\u0026gt;\u0026lt;b\u0026gt;LONG REPRESENTED TYPES\u0026lt;/b\u0026gt;\u0026#34;+\u0026#34;\\r\\n\u0026#34;); 186 out.append(\u0026#34;\u0026lt;br\u0026gt;Long longFF : \u0026#34;+longFF.toString()+\u0026#34;\\r\\n\u0026#34;); 187 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF : \u0026#34;+Long.toString(dateF.getTime())+\u0026#34;\\r\\n\u0026#34;); 188 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF : \u0026#34;+Long.toString(calendarF.getTimeInMillis())+\u0026#34;\\r\\n\u0026#34;); 189 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF : \u0026#34;+Long.toString(timestampF.getTime())+\u0026#34;\\r\\n\u0026#34;); 190 out.append(\u0026#34;\u0026lt;br\u0026gt;Date dateF (HReadable) : \u0026#34;+dateF.toString()+\u0026#34;\\r\\n\u0026#34;); 191 out.append(\u0026#34;\u0026lt;br\u0026gt;Calendar calendarF (HReadable) : \u0026#34;+calendarF.getTime().toString()+\u0026#34;\\r\\n\u0026#34;); 192 out.append(\u0026#34;\u0026lt;br\u0026gt;Timestamp timestampF (HReadable) : \u0026#34;+timestampF.toString()+\u0026#34;\\r\\n\u0026#34;); 193 return out.toString(); 194 } 195 196 public String byteArrayToString(byte[] toString) { 197 String[] strings = new String[toString.length]; 198 for(int i = 0; i \u0026lt; toString.length; i++) { 199 strings[i] = Byte.toString(toString[i]); 200 } 201 return KittyUtils.implodeWithCommaInBKT(strings); 202 } 203} \n  Click to view ComplexRandomMapper.class:  1public class ComplexRandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; ComplexRandomMapper(KittyTableConfiguration tableConfiguration, M blankModelInstance, String databasePassword) { 4 super(tableConfiguration, blankModelInstance, databasePassword); 5 } 6 7} \n  Fragment and utility code used in this tutorial   Click to view RNDComplexRandomModelFactory.class:  1public class RNDComplexRandomModelFactory { 2 3 private final Random randomizer; 4 5 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 7 8 private final Context context; 9 10 private final static String[] ISO4217_EXAMPLE_CODES = {\u0026#34;USD\u0026#34;, \u0026#34;GBP\u0026#34;, \u0026#34;EUR\u0026#34;, \u0026#34;CNY\u0026#34;, \u0026#34;JPY\u0026#34;, \u0026#34;MYR\u0026#34;, \u0026#34;AUD\u0026#34;, \u0026#34;HKD\u0026#34;, \u0026#34;PHP\u0026#34;}; // \u0026#34;KOR\u0026#34; currency code not present at 4.4 11 private final static String[] URI_EXAMPLES = {\u0026#34;http://example.com\u0026#34;, \u0026#34;file:///usr/somefile\u0026#34;, \u0026#34;http://example.org\u0026#34;}; 12 private final static String[] FILE_EXAPLES = {\u0026#34;/file/one\u0026#34;, \u0026#34;/file/two/some.txt\u0026#34;, \u0026#34;/file/three/sys.iso\u0026#34;}; 13 14 public RNDComplexRandomModelFactory(Context context) { 15 super(); 16 this.context = context; 17 18 this.randomizer = new Random(); 19 20 // Lol, getContext().getString() method is fucking slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 21 // Right now getting those string causes only 14% of execution time 22 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 23 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 24 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 25 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 26 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 27 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 28 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 29 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 30 31 32 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 33 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 34 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 35 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 36 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 37 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 38 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 39 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 40 } 41 42 public ComplexRandomModel newComplexRandomModel() { 43 ComplexRandomModel model = new ComplexRandomModel(); 44 45 model.boolF = randomizer.nextBoolean(); 46 model.randomInt = randomizer.nextInt(); 47 model.byteF = (byte) randomizer.nextInt(128); 48 model.doubleF = randomizer.nextDouble(); 49 model.longF = randomizer.nextLong(); 50 model.shortF = (short) randomizer.nextInt(1000); 51 model.floatF = randomizer.nextFloat(); 52 model.byteArray = new byte[8]; 53 randomizer.nextBytes(model.byteArray); 54 55 StringBuffer rndStrBuffer = new StringBuffer(8); 56 for(int i = 0; i \u0026lt; model.byteArray.length; i++) { 57 rndStrBuffer.append((char) model.byteArray[i]); 58 } 59 model.stringF = rndStrBuffer.toString(); 60 model.bigDecimalF = new BigDecimal(randomizer.nextDouble()); 61 model.bigIntegerF = BigInteger.valueOf(randomizer.nextLong()); 62 model.randomAnimal = Animals.rndAnimal(randomizer); 63 model.uriF = Uri.parse(URI_EXAMPLES[randomizer.nextInt(URI_EXAMPLES.length)]); 64 model.fileF = new File(FILE_EXAPLES[randomizer.nextInt(FILE_EXAPLES.length)]); 65 model.currencyF = Currency.getInstance(ISO4217_EXAMPLE_CODES[randomizer.nextInt(ISO4217_EXAMPLE_CODES.length)]); 66 67 AnimalSounds animalSounds = new AnimalSounds(); 68 animalSounds.animalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(model.randomAnimal)); 69 animalSounds.animalSounds = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(model.randomAnimal)); 70 model.stringSDF = animalSounds; 71 72 model.bitmapColour = SomeColours.rndColour(randomizer); 73 model.byteArraySDF = SomeColours.getSomeColourBitmpap( 74 SomeColours.getSomeColoursBitmapResource(model.bitmapColour), context 75 ); 76 77 model.boolFF = Boolean.valueOf(randomizer.nextBoolean()); 78 model.randomInteger = Integer.valueOf(randomizer.nextInt()); 79 model.randomAnimalName = context.getString(Animals.getLocalizedAnimalNameResource(model.randomAnimal)); 80 model.byteFF = Byte.valueOf((byte) randomizer.nextInt(128)); 81 model.doubleFF = Double.valueOf(randomizer.nextDouble()); 82 model.shortFF = new Short((short) randomizer.nextInt(10000)); 83 model.floatFF = Float.valueOf(randomizer.nextFloat()); 84 85 model.longFF = currentTimeMillis(); 86 model.dateF = new Date(model.longFF); 87 model.calendarF = Calendar.getInstance(); 88 model.calendarF.setTimeInMillis(model.longFF); 89 model.timestampF = new Timestamp(model.longFF); 90 91 return model; 92 } 93} \n  Click to view Lesson3Tab1DatatypesAffinities.class:  1public class Lesson3Tab1DatatypesAffinities extends Lesson3BaseFragment { 2 3 private BasicDatabase database; 4 5 public Lesson3Tab1DatatypesAffinities() {} 6 7 private Button insertRandomButton; 8 private Button clearTableButton; 9 private ListView eventsListView; 10 11 @Override 12 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 13 View rootView = inflater.inflate(R.layout.lesson3_tab1_datatype_affinities, container, false); 14 15 insertRandomButton = rootView.findViewById(R.id.l3_t1_go_button); 16 clearTableButton = rootView.findViewById(R.id.l3_t1_clear_button); 17 18 eventsListView = rootView.findViewById(R.id.l3_t1_actions); 19 20 insertRandomButton.setOnClickListener(new View.OnClickListener() { 21 @Override 22 public void onClick(View v) { 23 insert25RND(); 24 } 25 }); 26 27 clearTableButton.setOnClickListener(new View.OnClickListener() { 28 @Override 29 public void onClick(View v) { 30 clearTable(); 31 } 32 }); 33 34 setUpExpandedList( 35 rootView, 36 R.id._l3_t1_expanded_panel_list, 37 R.id._l3_t1_expanded_panel_text, 38 R.string._l3_t1_expanded_text_pattern 39 ); 40 41 reloadTableExpandedList(); 42 return rootView; 43 } 44 45 private BasicDatabase getDatabase() { 46 if(database != null) return database; 47 database = new BasicDatabase(getContext()); 48 return database; 49 } 50 51 ComplexRandomModelDTAAdapter complexExpandedAdapter; 52 53 @Override 54 protected void setUpExpandedList(View rootView, int eventsId, int eventsTitleId, int eventTitleStringPattern) { 55 events = (ListView) rootView.findViewById(eventsId); 56 expandedTitle = (TextView) rootView.findViewById(eventsTitleId); 57 expandeddTitlePattern = getString(eventTitleStringPattern); 58 59 expandedTitle.setText(format(expandeddTitlePattern, 0)); 60 61 if(expandedAdapter == null) { 62 complexExpandedAdapter = new ComplexRandomModelDTAAdapter(getContext(), new LinkedList\u0026lt;ComplexRandomModel\u0026gt;()); 63 } 64 65 events.setAdapter(complexExpandedAdapter); 66 events.setOnTouchListener(new View.OnTouchListener() { 67 68 // Setting on Touch Listener for handling the touch inside ScrollView 69 @Override 70 public boolean onTouch(View v, MotionEvent event) { 71 // Disallow the touch request for parent scroll on touch of child view 72 v.getParent().requestDisallowInterceptTouchEvent(true); 73 return false; 74 } 75 }); 76 } 77 78 @Override 79 public void onVisible() { 80 reloadTableExpandedList(); 81 } 82 83 private void insert25RND() { 84 new InsertRandomAsync().execute(0l); 85 } 86 87 private void clearTable() { 88 new WipeAsync().execute(0l); 89 } 90 91 private void reloadTableExpandedList() { 92 new ReloadTableAsync().execute(0l); 93 } 94 95 @Override 96 protected int snackbarMessageResource() { 97 return R.string._l3_t1_snackbar_message; 98 } 99 100 101 // Asyncs 102 103 class ReloadTableAsync extends AsyncTask\u0026lt;Long, Long, List\u0026lt;ComplexRandomModel\u0026gt;\u0026gt; { 104 105 @Override 106 protected List\u0026lt;ComplexRandomModel\u0026gt; doInBackground(Long... params) { 107 ComplexRandomMapper mapper = (ComplexRandomMapper) Lesson3Tab1DatatypesAffinities.this.getDatabase().getMapper(ComplexRandomModel.class); 108 List\u0026lt;ComplexRandomModel\u0026gt; out = mapper.findAll(); 109 mapper.close(); 110 return out; 111 } 112 113 @Override 114 protected void onPostExecute(List\u0026lt;ComplexRandomModel\u0026gt; result) { 115 if(result != null) { 116 events.setAdapter(new ComplexRandomModelDTAAdapter(getContext(), (ArrayList\u0026lt;ComplexRandomModel\u0026gt;) result)); 117 expandedTitle.setText(format(expandeddTitlePattern, result.size())); 118 } else { 119 events.setAdapter(new ComplexRandomModelDTAAdapter(getContext(), new LinkedList\u0026lt;ComplexRandomModel\u0026gt;())); 120 expandedTitle.setText(format(expandeddTitlePattern, 0)); 121 } 122 } 123 } 124 125 private static final String ERR_STRING_WIPE = \u0026#34;Lesson3tab1WipeDataError, see exception details!\u0026#34;; 126 127 class WipeAsync extends AsyncTask\u0026lt;Long, Long, WipeAsyncResult\u0026gt; { 128 129 ProgressDialog dialog; 130 131 @Override 132 protected void onPreExecute() { 133 dialog = ProgressDialog.show( 134 Lesson3Tab1DatatypesAffinities.this.getLessonActivity(), 135 Lesson3Tab1DatatypesAffinities.this.getString(R.string._l3_t1_running_requested_operation_pg_title), 136 Lesson3Tab1DatatypesAffinities.this.getString(R.string._l3_t1_running_requested_operation_pg_body) 137 ); 138 dialog.setCancelable(false); 139 } 140 141 @Override 142 protected WipeAsyncResult doInBackground(Long... params) { 143 try { 144 final ComplexRandomMapper mapper = (ComplexRandomMapper) Lesson3Tab1DatatypesAffinities.this.getDatabase().getMapper(ComplexRandomModel.class); 145 long recordsCount = mapper.countAll(); 146 long affected = mapper.deleteAll(); 147 mapper.close(); 148 return new WipeAsyncResult(affected, recordsCount); 149 } catch (Exception e) { 150 Log.e(BasicDatabase.LOG_TAG, ERR_STRING_WIPE, e); 151 if(e instanceof KittyRuntimeException) { 152 if(((KittyRuntimeException) e).getNestedException() != null) { 153 Log.e(BasicDatabase.LOG_TAG, ERR_STRING_WIPE, ((KittyRuntimeException) e).getNestedException()); 154 } 155 } 156 return new WipeAsyncResult(-1l, -1l); 157 } 158 } 159 160 @Override 161 protected void onPostExecute(WipeAsyncResult result) { 162 dialog.cancel(); 163 164 if (eventsListView != null) { 165 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 166 eventsListView.setOnTouchListener(new View.OnTouchListener() { 167 168 // Setting on Touch Listener for handling the touch inside ScrollView 169 @Override 170 public boolean onTouch(View v, MotionEvent event) { 171 // Disallow the touch request for parent scroll on touch of child view 172 v.getParent().requestDisallowInterceptTouchEvent(true); 173 return false; 174 } 175 }); 176 if (result.recordsCount \u0026gt; -1 \u0026amp;\u0026amp; result.affectedRows \u0026gt; -1) { 177 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l3_t1_count_to_events), result.recordsCount)); 178 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l3_t1_deleted_to_events), result.affectedRows)); 179 } else { 180 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l3_t1_error_event)); 181 } 182 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 183 reloadTableExpandedList(); 184 } 185 } 186 } 187 188 class WipeAsyncResult { 189 Long affectedRows; 190 Long recordsCount; 191 192 public WipeAsyncResult(Long affectedRows, Long recordsCount) { 193 this.affectedRows = affectedRows; 194 this.recordsCount = recordsCount; 195 } 196 } 197 198 static final int INSERT_AMOUNT = 25; 199 200 static final String ERR_INSERT_RND = \u0026#34;Lesson3tab1InsertRNDDataError, see exception details!\u0026#34;; 201 202 class InsertRandomAsync extends AsyncTask\u0026lt;Long, Long, InsertRandomResults\u0026gt; { 203 ProgressDialog dialog; 204 205 @Override 206 protected void onPreExecute() { 207 dialog = ProgressDialog.show( 208 Lesson3Tab1DatatypesAffinities.this.getLessonActivity(), 209 Lesson3Tab1DatatypesAffinities.this.getString(R.string._l3_t1_running_requested_operation_pg_title), 210 Lesson3Tab1DatatypesAffinities.this.getString(R.string._l3_t1_running_requested_operation_pg_body) 211 ); 212 dialog.setCancelable(false); 213 } 214 215 @Override 216 protected InsertRandomResults doInBackground(Long... strings) { 217 try { 218 ComplexRandomMapper mapper = (ComplexRandomMapper) Lesson3Tab1DatatypesAffinities.this.getDatabase().getMapper(ComplexRandomModel.class); 219 long recordsCount = mapper.countAll(); 220 long affected = mapper.deleteAll(); 221 LinkedList\u0026lt;ComplexRandomModel\u0026gt; modelsToInsert = new LinkedList\u0026lt;\u0026gt;(); 222 RNDComplexRandomModelFactory factory = new RNDComplexRandomModelFactory(getContext()); 223 for(int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 224 ComplexRandomModel m = factory.newComplexRandomModel(); 225 modelsToInsert.addLast(m); 226 } 227 mapper.insertInTransaction(modelsToInsert); 228 List\u0026lt;ComplexRandomModel\u0026gt; models = mapper.findAll(); 229 long recordsCountAfter = mapper.countAll(); 230 mapper.close(); 231 return new InsertRandomResults(models, affected, recordsCount, recordsCountAfter, true); 232 } catch (Exception e) { 233 Log.e(BasicDatabase.LOG_TAG, ERR_INSERT_RND, e); 234 if(e instanceof KittyRuntimeException) { 235 if(((KittyRuntimeException) e).getNestedException() != null) { 236 Log.e(BasicDatabase.LOG_TAG, ERR_INSERT_RND, ((KittyRuntimeException) e).getNestedException()); 237 } 238 } 239 return new InsertRandomResults(null, -1l, -1l, -1l, false); 240 } 241 } 242 243 @Override 244 protected void onPostExecute(InsertRandomResults result) { 245 dialog.cancel(); 246 247 if (eventsListView != null) { 248 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 249 eventsListView.setOnTouchListener(new View.OnTouchListener() { 250 251 // Setting on Touch Listener for handling the touch inside ScrollView 252 @Override 253 public boolean onTouch(View v, MotionEvent event) { 254 // Disallow the touch request for parent scroll on touch of child view 255 v.getParent().requestDisallowInterceptTouchEvent(true); 256 return false; 257 } 258 }); 259 if (result.operationSuccess) { 260 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l3_t1_count_to_events), result.modelsCountBefore)); 261 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l3_t1_deleted_to_events), result.deletedModelsAffectedRows)); 262 for(ComplexRandomModel m : result.modelInsertions) { 263 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l3_t1_inserted_to_events), m.toShortString())); 264 } 265 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l3_t1_count_to_events), result.modelsCountAfter)); 266 } else { 267 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l3_t1_error_event)); 268 } 269 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 270 } 271 reloadTableExpandedList(); 272 } 273 274 275 } 276 277 class InsertRandomResults { 278 List\u0026lt;ComplexRandomModel\u0026gt; modelInsertions; 279 long deletedModelsAffectedRows; 280 long modelsCountBefore; 281 long modelsCountAfter; 282 boolean operationSuccess; 283 284 public InsertRandomResults(List\u0026lt;ComplexRandomModel\u0026gt; modelInsertions, long deletedModelsAffectedRows, long modelsCountBefore, long modelsCountAfter, boolean opSuccess) { 285 this.modelInsertions = modelInsertions; 286 this.deletedModelsAffectedRows = deletedModelsAffectedRows; 287 this.modelsCountBefore = modelsCountBefore; 288 this.modelsCountAfter = modelsCountAfter; 289 this.operationSuccess = opSuccess; 290 } 291 } 292 293 // Fab menu section 294 295 @Override 296 public View.OnClickListener helpFabMenuAction() { 297 return new View.OnClickListener() { 298 @Override 299 public void onClick(View v) { 300 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L3_T1_TUTORIAL); 301 } 302 }; 303 } 304 305 @Override 306 public View.OnClickListener sourceFabMenuAction() { 307 return new View.OnClickListener() { 308 @Override 309 public void onClick(View v) { 310 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L3_T1_SOURCE); 311 } 312 }; 313 } 314 315 @Override 316 public View.OnClickListener schemaFabMenuAction() { 317 return new View.OnClickListener() { 318 @Override 319 public void onClick(View v) { 320 ((KittyTutorialActivity)getActivity()).showWebViewDialog(LessonsUriConstants.L3_T1_SCHEMA); 321 } 322 }; 323 } 324} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/debug/l4t2_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " Example of KittyORM logging setup: 1@KITTY_DATABASE( 2 isLoggingOn = true, // Base logging flag 3 isProductionOn = false, // Production logging flag 4 isKittyDexUtilLoggingEnabled = false, // dex logging flag 5 logTag = MigrationDBv3.LTAG, // log tag 6 databaseName = \u0026#34;mig\u0026#34;, // database name 7 databaseVersion = 3, // database version 8 ... 9) 10 11public class MigrationDBv3 extends KittyDatabase { 12 13 public static final String LTAG = \u0026#34;MIGv3\u0026#34;; 14 15 ... 16} Example of KittyModel implementaion toLogString() method overload: 1@KITTY_TABLE 2public class SimpleExampleModel extends KittyModel { 3 public SimpleExampleModel() { 4 super(); 5 } 6 7 @KITTY_COLUMN( 8 isIPK = true, 9 columnOrder = 0 10 ) 11 public Long id; 12 13 @KITTY_COLUMN(columnOrder = 1) 14 public int randomInteger; 15 16 @KITTY_COLUMN(columnOrder = 2) 17 public String firstName; 18 19 @Override 20 public String toString() { 21 StringBuilder sb = new StringBuilder(64); 22 return sb.append(\u0026#34;[ rowid = \u0026#34;) 23 .append(getRowID()) 24 .append(\u0026#34; ; id = \u0026#34;) 25 .append(id) 26 .append(\u0026#34; ; randomInteger = \u0026#34;) 27 .append(randomInteger) 28 .append(\u0026#34; ; firstName = \u0026#34;) 29 .append(firstName) 30 .append(\u0026#34; ]\u0026#34;) 31 .toString(); 32 } 33 34 public String toLogString() { 35 return toString(); 36 } 37} "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/encrypt/l4t3_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " Example script for changing all imports at KittyORM that import Android database classes to corresponding classes of SQLCipher: #!/bin/bash find . -name \u0026#39;*.java\u0026#39; -exec sed -i -e \u0026#39;s/android.database.sqlite/net.sqlcipher.database/g\u0026#39; {} \\; find . -name \u0026#39;*.java\u0026#39; -exec sed -i -e \u0026#39;s/android.database/net.sqlcipher/g\u0026#39; {} \\; Modifying methods of KittyDatabaseHelper.class for encryption support: 1public SQLiteDatabase getWritableDatabase(String pwd) { 2 return super.getWritableDatabase(pwd); 3} 4 5public SQLiteDatabase getReadableDatabase(String pwd) { 6 return super.getReadableDatabase(pwd); 7} Modifying сonstructor of KittyDatabase.class for adding support of database encryption: 1public KittyDatabase(Context ctx, String databasePassword) { 2 net.sqlcipher.database.SQLiteDatabase.loadLibs(ctx); 3 4 ... // Old constructor code 5} "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/getting_started/l1_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " Database, model, supporting classes  Click to view SimpleDatabase.class 1package net.akaish.kittyormdemo.sqlite.introductiondb; 2 3import android.content.Context; 4 5import net.akaish.kitty.orm.KittyDatabase; 6import net.akaish.kitty.orm.annotations.KITTY_DATABASE; 7 8/** 9* Created by akaish on 09.08.18. 10*/ 11@KITTY_DATABASE( 12 isLoggingOn = true, 13 isProductionOn = false, 14 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.introductiondb\u0026#34;} 15) 16public class SimpleDatabase extends KittyDatabase { 17 /** 18* KittyORM main database class that represents bootstrap and holder for all related with database 19* components. 20* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 21* 22* @param ctx 23*/ 24 public SimpleDatabase(Context ctx) { 25 super(ctx); 26 } 27} \n Click to view SimpleExampleModel.class 1package net.akaish.kittyormdemo.sqlite.introductiondb; 2 3import net.akaish.kitty.orm.KittyModel; 4import net.akaish.kitty.orm.annotations.column.KITTY_COLUMN; 5import net.akaish.kitty.orm.annotations.table.KITTY_TABLE; 6 7@KITTY_TABLE 8public class SimpleExampleModel extends KittyModel { 9 public SimpleExampleModel() { 10 super(); 11 } 12 13 @KITTY_COLUMN( 14 isIPK = true, 15 columnOrder = 0 16 ) 17 public Long id; 18 19 @KITTY_COLUMN(columnOrder = 1) 20 public int randomInteger; 21 22 @KITTY_COLUMN(columnOrder = 2) 23 public String firstName; 24 25 @Override 26 public String toString() { 27 StringBuilder sb = new StringBuilder(64); 28 return sb.append(\u0026#34;[ rowid = \u0026#34;) 29 .append(getRowID()) 30 .append(\u0026#34; ; id = \u0026#34;) 31 .append(id) 32 .append(\u0026#34; ; randomInteger = \u0026#34;) 33 .append(randomInteger) 34 .append(\u0026#34; ; firstName = \u0026#34;) 35 .append(firstName) 36 .append(\u0026#34; ]\u0026#34;) 37 .toString(); 38 } 39} \n Click to view RandomSimpleExampleModelUtil.class 1package net.akaish.kittyormdemo.sqlite.introductiondb.util; 2 3import net.akaish.kittyormdemo.sqlite.introductiondb.SimpleExampleModel; 4 5import java.util.Random; 6 7/** 8* Created by akaish on 21.08.18. 9*/ 10 11public class RandomSimpleExampleModelUtil { 12 13 private static String NAMES[] = new String[] {\u0026#34;Adam\u0026#34;, \u0026#34;Ada\u0026#34;, \u0026#34;Joseph\u0026#34;, \u0026#34;Michel\u0026#34;, \u0026#34;Mickie\u0026#34;, \u0026#34;Boris\u0026#34;, \u0026#34;Denis\u0026#34;, \u0026#34;Denise\u0026#34;, \u0026#34;Alexander\u0026#34;, \u0026#34;Irina\u0026#34;}; 14 15 public static SimpleExampleModel randomSEModel() { 16 SimpleExampleModel m = new SimpleExampleModel(); 17 Random rnd = new Random(); 18 m.randomInteger = rnd.nextInt(1000); 19 m.firstName = NAMES[rnd.nextInt(10)]; 20 return m; 21 } 22} \n\u0026ldquo;RUN CRUD OPERATIONS\u0026rdquo; code  Click to view GettingStartedTutorialCode.allInOne() 1// Creating new instance of SimpleDatabase 2SimpleDatabase simpleDatabase = new SimpleDatabase(ctx); 3 4KittyMapper mapper = simpleDatabase.getMapper(SimpleExampleModel.class); 5 6// Counting records in db table and deleting them if table not empty 7if(mapper.countAll() \u0026gt; 0) 8 mapper.deleteAll(); 9 10// Insert new model example 11// Creating and setting three new models 12SimpleExampleModel alex = new SimpleExampleModel(); 13 14alex.randomInteger = 545141; 15alex.firstName = \u0026#34;Alex\u0026#34;; 16 17SimpleExampleModel marina = new SimpleExampleModel(); 18 19marina.randomInteger = 228; 20marina.firstName = \u0026#34;Marina\u0026#34;; 21 22SimpleExampleModel marina2 = new SimpleExampleModel(); 23 24marina2.randomInteger = 445555; 25marina2.firstName = \u0026#34;Marina\u0026#34;; 26 27// Saving those models 28// Saving model with mapper.save(M model) 29mapper.save(alex); 30mapper.save(marina2); 31 32// Saving model with mapper.insert(M model) 33// Better to use insert(M model) for new DB records cause it is little bit faster 34long marinaRowid = mapper.insert(marina); 35 36 37// Finding existing records in DB and mapping them to entities 38 39// find with condition 40SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 41builder.addField(\u0026#34;first_name\u0026#34;) 42 .addSQLOperator(SQLiteOperator.EQUAL) 43 .addValue(\u0026#34;Marina\u0026#34;); 44List\u0026lt;SimpleExampleModel\u0026gt; marinas = mapper.findWhere(builder.build()); 45 46// find with RowID 47SimpleExampleModel marinaFromTableRowid = mapper.findByRowID(marinaRowid); 48 49// find with IPK 50SimpleExampleModel marinaFromTableIPK = mapper.findByIPK(marinaFromTableRowid.id); 51 52findOperationId++; 53// find with KittyPrimaryKey 54KittyPrimaryKey pk = new KittyPrimaryKeyBuilder() 55 .addKeyColumnValue(\u0026#34;id\u0026#34;, marinaFromTableRowid.id.toString()) 56 .build(); 57SimpleExampleModel marinaFromTableKPK = mapper.findByPK(pk); 58 59// Generating and inserting list of 10 random models 60List\u0026lt;SimpleExampleModel\u0026gt; randomModels = new LinkedList\u0026lt;\u0026gt;(); 61for(int i = 0; i \u0026lt; 10; i++) 62 randomModels.add(RandomSimpleExampleModelUtil.randomSEModel()); 63 mapper.save(randomModels); 64 65// Deleting some models 66// Deleting by entity, make sure that entity has RowID\\IPK\\PK set 67SQLiteCondition alexCondition = new SQLiteConditionBuilder() 68 .addField(\u0026#34;first_name\u0026#34;) 69 .addSQLOperator(SQLiteOperator.EQUAL) 70 .addValue(\u0026#34;Alex\u0026#34;) 71 .build(); 72SimpleExampleModel alexToDelete = mapper.findFirst(alexCondition); 73mapper.delete(alexToDelete); 74 75// Deleting with condition 76SQLiteCondition marina445555Condition = new SQLiteConditionBuilder() 77 .addField(\u0026#34;random_integer\u0026#34;) 78 .addSQLOperator(SQLiteOperator.EQUAL) 79 .addValue(marina2.randomInteger) 80 .build(); 81mapper.deleteByWhere(marina445555Condition); 82 83// Updating models 84// updating current model 85// if model has RowId or IPK or PrimaryKey values set (3-rd is slowest) just 86SimpleExampleModel newMarina = marinaFromTableIPK.clone(SimpleExampleModel.class); 87newMarina.randomInteger = 1337; 88if(mapper.update(newMarina) \u0026gt; 0) { 89 SimpleExampleModel marinaFromTableIPK2 = mapper.findByIPK(marinaFromTableRowid.id); 90} 91 92// another option is updating with generating query 93SimpleExampleModel updateMarina = new SimpleExampleModel(); 94updateMarina.randomInteger = 121212; 95builder = new SQLiteConditionBuilder(); 96builder.addField(\u0026#34;first_name\u0026#34;) 97 .addSQLOperator(SQLiteOperator.EQUAL) 98 .addValue(\u0026#34;Marina\u0026#34;); 99if(mapper.update(updateMarina, builder.build(), new String[]{\u0026#34;randomInteger\u0026#34;}, CVUtils.INCLUDE_ONLY_SELECTED_FIELDS) \u0026gt; 0) { 100 // find with IPK 101 SimpleExampleModel marinaFromTableIPK2 = mapper.findByIPK(marinaFromTableRowid.id); 102} 103 104// bulk operations in TX mode 105LinkedList\u0026lt;SimpleExampleModel\u0026gt; randModels = new LinkedList\u0026lt;\u0026gt;(); 106for(int i = 0; i \u0026lt; 10; i++) 107 randModels.add(RandomSimpleExampleModelUtil.randomSEModel()); 108mapper.saveInTransaction(randModels); 109 110// closing mapper 111mapper.close(); \nLesson\u0026rsquo;s activity fragment  Click to view SimpleDatabase.class 1package net.akaish.kittyormdemo.lessons.one; 2 3import android.os.Bundle; 4import android.view.LayoutInflater; 5import android.view.MotionEvent; 6import android.view.View; 7import android.view.ViewGroup; 8import android.widget.Button; 9import android.widget.ListView; 10import android.widget.TextView; 11 12import net.akaish.kitty.orm.CVUtils; 13import net.akaish.kitty.orm.KittyMapper; 14import net.akaish.kitty.orm.pkey.KittyPrimaryKey; 15import net.akaish.kitty.orm.pkey.KittyPrimaryKeyBuilder; 16import net.akaish.kitty.orm.query.condtitions.SQLiteCondition; 17import net.akaish.kitty.orm.query.condtitions.SQLiteConditionBuilder; 18import net.akaish.kitty.orm.query.condtitions.SQLiteOperator; 19import net.akaish.kitty.orm.util.KittyLog; 20import net.akaish.kittyormdemo.LessonDetailActivity; 21import net.akaish.kittyormdemo.R; 22import net.akaish.kittyormdemo.lessons.BasicArrayAdapter; 23import net.akaish.kittyormdemo.lessons.LessonBaseFragment; 24import net.akaish.kittyormdemo.sqlite.introductiondb.SimpleDatabase; 25import net.akaish.kittyormdemo.sqlite.introductiondb.SimpleExampleModel; 26import net.akaish.kittyormdemo.sqlite.introductiondb.util.RandomSimpleExampleModelUtil; 27 28import java.util.Iterator; 29import java.util.LinkedList; 30import java.util.List; 31 32import static java.text.MessageFormat.format; 33 34/** 35* Created by akaish on 21.08.18. 36*/ 37 38public class Lesson1Tab2GettingStarted extends LessonBaseFragment { 39 40 private static final String tutorialPageName = \u0026#34;l1t2\u0026#34;; 41 private static final String tutorialSchemaLocation = \u0026#34;l1_schema\u0026#34;; 42 private static final String tutorialSourceCodeLocation = \u0026#34;l1_code\u0026#34;; 43 44 private ListView actionsLW; 45 private Button goButton; 46 47 private ListView expandedLW; 48 private TextView expandedText; 49 private String expandedTextPattern; 50 51 public Lesson1Tab2GettingStarted() {} 52 53 @Override 54 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 55 View rootView = inflater.inflate(R.layout.lesson1_tab2_getting_started, container, false); 56 actionsLW = rootView.findViewById(R.id.l1_t2_actions); 57 goButton = rootView.findViewById(R.id.l1_t2_go_button); 58 goButton.setOnClickListener(new View.OnClickListener() { 59 @Override 60 public void onClick(View v) { 61 go(); 62 } 63 }); 64 expandedLW = rootView.findViewById(R.id._l1_t2_expanded_panel_list); 65 expandedText = rootView.findViewById(R.id._l1_t2_expanded_panel_text); 66 expandedTextPattern = getString(R.string._l1_t2_expanded_text_pattern); 67 rootView.findViewById(R.id.l1_t2_clear_button).setOnClickListener(new View.OnClickListener() { 68 @Override 69 public void onClick(View v) { 70 clear(); 71 } 72 }); 73 return rootView; 74 } 75 76 @Override 77 public void onResume() { 78 super.onResume(); 79 updateExpandPanelList(); 80 } 81 82 void clear() { 83 SimpleDatabase simpleDatabase = new SimpleDatabase(getContext()); 84 KittyMapper mapper = simpleDatabase.getMapper(SimpleExampleModel.class); 85 if(actionsLW != null) { 86 actionsLW.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 87 actionsLW.setOnTouchListener(new View.OnTouchListener() { 88 89 // Setting on Touch Listener for handling the touch inside ScrollView 90 @Override 91 public boolean onTouch(View v, MotionEvent event) { 92 // Disallow the touch request for parent scroll on touch of child view 93 v.getParent().requestDisallowInterceptTouchEvent(true); 94 return false; 95 } 96 }); 97 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 98 addActionListItem(format(getString(R.string._l1_t2_clear), mapper.deleteAll())); 99 updateExpandPanelList(); 100 } 101 mapper.close(); 102 } 103 104 void go() { 105 if(actionsLW != null) { 106 actionsLW.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 107 actionsLW.setOnTouchListener(new View.OnTouchListener() { 108 109 // Setting on Touch Listener for handling the touch inside ScrollView 110 @Override 111 public boolean onTouch(View v, MotionEvent event) { 112 // Disallow the touch request for parent scroll on touch of child view 113 v.getParent().requestDisallowInterceptTouchEvent(true); 114 return false; 115 } 116 }); 117 118 // Creating new instance of SimpleDatabase 119 SimpleDatabase simpleDatabase = new SimpleDatabase(getContext()); 120 121 // Printing generated by KittyORM schema create and drop scripts 122 simpleDatabase.printPregeneratedCreateSchemaToLog(\u0026#34;KITTY_ORM_DEMO_L1T2\u0026#34;); 123 simpleDatabase.printPregeneratedDropSchemaToLog(\u0026#34;KITTY_ORM_DEMO_L1T2\u0026#34;); 124 125 // Printing registry to log (e.g. collection of KittyModels-\u0026gt;KittyMappers that would be used) 126 simpleDatabase.printRegistryToLog(KittyLog.LOG_LEVEL.E); 127 KittyMapper mapper = simpleDatabase.getMapper(SimpleExampleModel.class); 128 129 // Counting records in db table and deleting them if table not empty 130 if(mapper.countAll() \u0026gt; 0) 131 mapper.deleteAll(); 132 133 // Insert new model example 134 // Creating and setting three new models 135 SimpleExampleModel alex = new SimpleExampleModel(); 136 137 alex.randomInteger = 545141; 138 alex.firstName = \u0026#34;Alex\u0026#34;; 139 140 SimpleExampleModel marina = new SimpleExampleModel(); 141 142 marina.randomInteger = 228; 143 marina.firstName = \u0026#34;Marina\u0026#34;; 144 145 SimpleExampleModel marina2 = new SimpleExampleModel(); 146 147 marina2.randomInteger = 445555; 148 marina2.firstName = \u0026#34;Marina\u0026#34;; 149 150 addActionListItem(format(getString(R.string._l1_t2_inserting), alex)); 151 addActionListItem(format(getString(R.string._l1_t2_inserting), marina)); 152 addActionListItem(format(getString(R.string._l1_t2_inserting), marina2)); 153 154 // Saving those models 155 // Saving model with mapper.save(M model) 156 mapper.save(alex); 157 mapper.save(marina2); 158 159 // Saving model with mapper.insert(M model) 160 // Better to use insert(M model) for new DB records cause it is little bit faster 161 long marinaRowid = mapper.insert(marina); 162 163 164 addActionListItem(format(getString(R.string._l1_t2_inserted), alex)); 165 addActionListItem(format(getString(R.string._l1_t2_inserted), marina)); 166 addActionListItem(format(getString(R.string._l1_t2_inserted), marina2)); 167 168 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 169 170 171 // Finding existing records in DB and mapping them to entities 172 173 int findOperationId = 0; 174 // find with condition 175 addActionListItem(format(getContext().getString(R.string._l1_t2_retrieving), \u0026#34;mapper.findWhere\u0026#34;, \u0026#34;WHERE first_name = Marina\u0026#34;, findOperationId)); 176 SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 177 builder.addField(\u0026#34;first_name\u0026#34;) 178 .addSQLOperator(SQLiteOperator.EQUAL) 179 .addValue(\u0026#34;Marina\u0026#34;); 180 List\u0026lt;SimpleExampleModel\u0026gt; marinas = mapper.findWhere(builder.build()); 181 if(marinas != null) { 182 addActionListItem(format(getString(R.string._l1_t2_retrieved), marinas.size(), findOperationId)); 183 } 184 int marinasCounter = 0; 185 for(SimpleExampleModel m : marinas) { 186 addActionListItem(format(getString(R.string._l1_t2_retrieved_model_show), findOperationId, marinasCounter, m)); 187 marinasCounter++; 188 } 189 190 findOperationId++; 191 // find with RowID 192 addActionListItem(format(getString(R.string._l1_t2_retrieving), \u0026#34;mapper.findByRowID\u0026#34;, \u0026#34;RowID = \u0026#34;+marinaRowid, findOperationId)); 193 SimpleExampleModel marinaFromTableRowid = mapper.findByRowID(marinaRowid); 194 if(marinaFromTableRowid != null) { 195 addActionListItem(format(getString(R.string._l1_t2_retrieved), 1, findOperationId)); 196 addActionListItem(format(getString(R.string._l1_t2_retrieved_model_show), findOperationId, 0, marinaFromTableRowid)); 197 } 198 199 findOperationId++; 200 // find with IPK 201 addActionListItem(format(getContext().getString(R.string._l1_t2_retrieving), \u0026#34;mapper.findByIPK\u0026#34;, \u0026#34;IPK = \u0026#34;+marinaFromTableRowid.id, findOperationId)); 202 SimpleExampleModel marinaFromTableIPK = mapper.findByIPK(marinaFromTableRowid.id); 203 if(marinaFromTableIPK != null) { 204 addActionListItem(format(getString(R.string._l1_t2_retrieved), 1, findOperationId)); 205 addActionListItem(format(getString(R.string._l1_t2_retrieved_model_show), findOperationId, 0, marinaFromTableIPK)); 206 } 207 208 findOperationId++; 209 // find with KittyPrimaryKey 210 addActionListItem(format(format(getString(R.string._l1_t2_retrieving), \u0026#34;mapper.findByPK\u0026#34;, \u0026#34;KittyPrimaryKey [ id = \u0026#34;+marinaFromTableRowid.id, findOperationId))); 211 KittyPrimaryKey pk = new KittyPrimaryKeyBuilder() 212 .addKeyColumnValue(\u0026#34;id\u0026#34;, marinaFromTableRowid.id.toString()) 213 .build(); 214 SimpleExampleModel marinaFromTableKPK = mapper.findByPK(pk); 215 if(marinaFromTableKPK != null) { 216 addActionListItem(format(getString(R.string._l1_t2_retrieved), 1, findOperationId)); 217 addActionListItem(format(getString(R.string._l1_t2_retrieved_model_show), findOperationId, 0, marinaFromTableKPK)); 218 } 219 220 // Generating and inserting list of 10 random models 221 List\u0026lt;SimpleExampleModel\u0026gt; randomModels = new LinkedList\u0026lt;\u0026gt;(); 222 for(int i = 0; i \u0026lt; 10; i++) 223 randomModels.add(RandomSimpleExampleModelUtil.randomSEModel()); 224 mapper.save(randomModels); 225 addActionListItem(getString(R.string._l1_t2_random_save)); 226 227 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 228 229 // Deleting some models 230 // Deleting by entity, make sure that entity has RowID\\IPK\\PK set 231 SQLiteCondition alexCondition = new SQLiteConditionBuilder() 232 .addField(\u0026#34;first_name\u0026#34;) 233 .addSQLOperator(SQLiteOperator.EQUAL) 234 .addValue(\u0026#34;Alex\u0026#34;) 235 .build(); 236 SimpleExampleModel alexToDelete = mapper.findFirst(alexCondition); 237 if(alexToDelete!=null) { 238 addActionListItem(getString(R.string._l1_t2_one_alex_to_delete_found)); 239 if(mapper.delete(alexToDelete) \u0026gt; 0) { 240 addActionListItem(getString(R.string._l1_t2_one_alex_deleted)); 241 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 242 } 243 } 244 245 // Deleting with condition 246 SQLiteCondition marina445555Condition = new SQLiteConditionBuilder() 247 .addField(\u0026#34;random_integer\u0026#34;) 248 .addSQLOperator(SQLiteOperator.EQUAL) 249 .addValue(marina2.randomInteger) 250 .build(); 251 addActionListItem(getString(R.string._l1_2_one_marina_deleting)); 252 if(mapper.deleteByWhere(marina445555Condition) \u0026gt; 0) { 253 addActionListItem(getString(R.string._l1_2_one_marina_deleted)); 254 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 255 } 256 257 // Updating models 258 // updating current model 259 // if model has RowId or IPK or PrimaryKey values set (3-rd is slowest) just 260 SimpleExampleModel oldMarina = marinaFromTableIPK.clone(SimpleExampleModel.class); 261 SimpleExampleModel newMarina = marinaFromTableIPK.clone(SimpleExampleModel.class); 262 newMarina.randomInteger = 1337; 263 addActionListItem(format(getString(R.string._l1_t2_updating_entity), oldMarina, newMarina)); 264 if(mapper.update(newMarina) \u0026gt; 0) { 265 addActionListItem(format(getString(R.string._l1_t2_updated), oldMarina, newMarina)); 266 findOperationId++; 267 // find with IPK 268 addActionListItem(format(getContext().getString(R.string._l1_t2_retrieving), \u0026#34;mapper.findByIPK\u0026#34;, \u0026#34;IPK = \u0026#34;+marinaFromTableRowid.id, findOperationId)); 269 SimpleExampleModel marinaFromTableIPK2 = mapper.findByIPK(marinaFromTableRowid.id); 270 if(marinaFromTableIPK != null) { 271 addActionListItem(format(getString(R.string._l1_t2_retrieved), 1, findOperationId)); 272 addActionListItem(format(getString(R.string._l1_t2_retrieved_model_show), findOperationId, 0, marinaFromTableIPK2)); 273 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 274 } 275 } 276 277 // another option is updating with generating query 278 SimpleExampleModel updateMarina = new SimpleExampleModel(); 279 updateMarina.randomInteger = 121212; 280 addActionListItem(format(getString(R.string._l1_t2_updating_query_like), updateMarina)); 281 builder = new SQLiteConditionBuilder(); 282 builder.addField(\u0026#34;first_name\u0026#34;) 283 .addSQLOperator(SQLiteOperator.EQUAL) 284 .addValue(\u0026#34;Marina\u0026#34;); 285 if(mapper.update(updateMarina, builder.build(), new String[]{\u0026#34;randomInteger\u0026#34;}, CVUtils.INCLUDE_ONLY_SELECTED_FIELDS) \u0026gt; 0) { 286 addActionListItem(format(getString(R.string._l1_t2_updating_query_like_updated), updateMarina)); 287 findOperationId++; 288 // find with IPK 289 addActionListItem(format(getContext().getString(R.string._l1_t2_retrieving), \u0026#34;mapper.findByIPK\u0026#34;, \u0026#34;IPK = \u0026#34;+marinaFromTableRowid.id, findOperationId)); 290 SimpleExampleModel marinaFromTableIPK2 = mapper.findByIPK(marinaFromTableRowid.id); 291 if(marinaFromTableIPK != null) { 292 addActionListItem(format(getString(R.string._l1_t2_retrieved), 1, findOperationId)); 293 addActionListItem(format(getString(R.string._l1_t2_retrieved_model_show), findOperationId, 0, marinaFromTableIPK2)); 294 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 295 } 296 } 297 298 // bulk operations in TX mode 299 LinkedList\u0026lt;SimpleExampleModel\u0026gt; randModels = new LinkedList\u0026lt;\u0026gt;(); 300 for(int i = 0; i \u0026lt; 10; i++) 301 randModels.add(RandomSimpleExampleModelUtil.randomSEModel()); 302 mapper.saveInTransaction(randModels); 303 addActionListItem(getString(R.string._l1_t2_random_save)); 304 305 addActionListItem(format(getString(R.string._l1_t2_count), mapper.countAll())); 306 307 // closing mapper 308 mapper.close(); 309 310 updateExpandPanelList(); 311 } 312 } 313 314 void updateExpandPanelList() { 315 if(expandedText != null \u0026amp;\u0026amp; expandedLW != null \u0026amp;\u0026amp; expandedTextPattern != null) { 316 SimpleDatabase sdb = new SimpleDatabase(getContext()); 317 KittyMapper mapper = sdb.getMapper(SimpleExampleModel.class); 318 expandedText.setText(format(expandedTextPattern, mapper.countAll())); 319 List\u0026lt;SimpleExampleModel\u0026gt; models = mapper.findAll(); 320 if(models!=null) { 321 LinkedList\u0026lt;String\u0026gt; modelsToString = new LinkedList\u0026lt;\u0026gt;(); 322 Iterator\u0026lt;SimpleExampleModel\u0026gt; modelIterator = models.iterator(); 323 while (modelIterator.hasNext()) { 324 modelsToString.addLast(modelIterator.next().toString()); 325 } 326 expandedLW.setAdapter(new BasicArrayAdapter(getContext(), modelsToString)); 327 expandedLW.setOnTouchListener(new View.OnTouchListener() { 328 329 // Setting on Touch Listener for handling the touch inside ScrollView 330 @Override 331 public boolean onTouch(View v, MotionEvent event) { 332 // Disallow the touch request for parent scroll on touch of child view 333 v.getParent().requestDisallowInterceptTouchEvent(true); 334 return false; 335 } 336 }); 337 } 338 mapper.close(); 339 } 340 } 341 342 void addActionListItem(String item) { 343 if(actionsLW != null) { 344 ((BasicArrayAdapter)actionsLW.getAdapter()).addItemLast(item); 345 ((BasicArrayAdapter) actionsLW.getAdapter()).notifyDataSetChanged(); 346 } 347 } 348 349 // Fab menu section 350 351 @Override 352 public View.OnClickListener helpFabMenuAction() { 353 return new View.OnClickListener() { 354 355 /** 356* Called when a view has been clicked. 357* 358* @param v The view that was clicked. 359*/ 360 @Override 361 public void onClick(View v) { 362 ((LessonDetailActivity) getParentFragment().getActivity()).showWebViewDialog(tutorialPageName, null); 363 } 364 }; 365 } 366 367 @Override 368 public View.OnClickListener sourceFabMenuAction() { 369 return new View.OnClickListener() { 370 371 /** 372* Called when a view has been clicked. 373* 374* @param v The view that was clicked. 375*/ 376 @Override 377 public void onClick(View v) { 378 ((LessonDetailActivity) getParentFragment().getActivity()).showWebViewDialog(tutorialSourceCodeLocation, null); 379 } 380 }; 381 } 382 383 @Override 384 public View.OnClickListener schemaFabMenuAction() { 385 return new View.OnClickListener() { 386 387 /** 388* Called when a view has been clicked. 389* 390* @param v The view that was clicked. 391*/ 392 @Override 393 public void onClick(View v) { 394 ((LessonDetailActivity) getParentFragment().getActivity()).showWebViewDialog(tutorialSchemaLocation, null); 395 } 396 }; 397 } 398 399 @Override 400 protected int snackbarMessageResource() { 401 return R.string._l1_t2_snackbar_message; 402 } 403} \n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/dropcreate/l5t2_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM mig v.2 implementation sources**   Click to view MigrationDBv2.class:  1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 databaseName = \u0026#34;mig\u0026#34;, 5 databaseVersion = 2, 6 logTag = MigrationDBv2.LTAG, 7 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.migrations.migv2\u0026#34;} 8) 9@KITTY_DATABASE_REGISTRY( 10 domainModels = { 11 net.akaish.kittyormdemo.sqlite.migrations.migv2.MigOneModel.class, 12 net.akaish.kittyormdemo.sqlite.migrations.migv2.MigTwoModel.class 13 } 14) 15@KITTY_DATABASE_HELPER( 16 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.DROP_AND_CREATE 17) 18public class MigrationDBv2 extends KittyDatabase { 19 20 public static final String LTAG = \u0026#34;MIGv2\u0026#34;; 21 22 /** 23* KittyORM main database class that represents bootstrap and holder for all related with database 24* components. 25* 26* @param ctx 27*/ 28 public MigrationDBv2(Context ctx) { 29 super(ctx); 30 } 31} \n  Click to view MigOneModel.class:  1@KITTY_TABLE( 2 tableName = \u0026#34;mig_one\u0026#34; 3) 4public class MigOneModel extends KittyModel { 5 @KITTY_COLUMN( 6 columnOrder = 0, 7 isIPK = true) 8 public Long id; 9 10 @KITTY_COLUMN(columnOrder = 1) 11 @NOT_NULL 12 @DEFAULT(predefinedLiteralValue = LiteralValues.CURRENT_DATE) 13 public String creationDate; 14 15 @KITTY_COLUMN(columnOrder = 2) 16 @DEFAULT(signedInteger = 228) 17 @ONE_COLUMN_INDEX(indexName = \u0026#34;m1_di_index\u0026#34;) 18 public Integer defaultInteger; 19 20 @KITTY_COLUMN(columnOrder = 3) 21 public Timestamp currentTimestamp; 22 23 public String toString() { 24 return new StringBuilder(64) 25 .append(\u0026#34;[ id = \u0026#34;) 26 .append(id) 27 .append(\u0026#34; ; creationDate = \u0026#34;) 28 .append(creationDate) 29 .append(\u0026#34; ; someInteger = \u0026#34;) 30 .append(defaultInteger) 31 .append(\u0026#34; ; currentTimestamp = \u0026#34;) 32 .append(currentTimestamp) 33 .append(\u0026#34; ]\u0026#34;).toString(); 34 } 35} \n  Click to view MigTwoModel.class:  1@KITTY_TABLE( 2 tableName = \u0026#34;mig_two\u0026#34; 3) 4@INDEX( 5 indexName = \u0026#34;m2_sa_index\u0026#34;, 6 indexColumns = {\u0026#34;some_animal\u0026#34;} 7) 8public class MigTwoModel extends KittyModel { 9 10 @KITTY_COLUMN( 11 columnOrder = 0, 12 isIPK = true 13 ) 14 public Long id; 15 16 @KITTY_COLUMN( 17 columnOrder = 1 18 ) 19 @FOREIGN_KEY( 20 reference = @FOREIGN_KEY_REFERENCE( 21 foreignTableName = \u0026#34;mig_one\u0026#34;, 22 foreignTableColumns = {\u0026#34;id\u0026#34;}, 23 onUpdate = OnUpdateDeleteActions.CASCADE, 24 onDelete = OnUpdateDeleteActions.CASCADE 25 ) 26 ) 27 public Long migOneReference; 28 29 @KITTY_COLUMN( 30 columnOrder = 2 31 ) 32 public Animals someAnimal; 33 34 @Override 35 public String toString() { 36 return new StringBuilder(64) 37 .append(\u0026#34;[ id = \u0026#34;) 38 .append(id) 39 .append(\u0026#34; ; migOneReference = \u0026#34;) 40 .append(migOneReference) 41 .append(\u0026#34; ; someAnimal = \u0026#34;) 42 .append(someAnimal) 43 .append(\u0026#34; ] \u0026#34;).toString(); 44 } 45} \n  Fragment and utility code used in this tutorial**   Click to view MigV2RandomModelFactory.class:  1public class MigV2RandomModelFactory { 2 final Context ctx; 3 final Random rnd; 4 5 public MigV2RandomModelFactory(Context ctx) { 6 this.ctx = ctx; 7 this.rnd = new Random(); 8 } 9 10 public MigOneModel newM1RndModel() { 11 return newM1RndModel(rnd.nextBoolean()); 12 } 13 14 public MigOneModel newM1RndModel(boolean setCDDefault) { 15 MigOneModel model = new MigOneModel(); 16 if(setCDDefault) 17 model.setFieldExclusion(\u0026#34;creationDate\u0026#34;); 18 else 19 model.creationDate = new Date(System.currentTimeMillis()).toString(); 20 model.defaultInteger = rnd.nextInt(); 21 model.currentTimestamp = new Timestamp(System.currentTimeMillis()); 22 return model; 23 } 24 25 public MigTwoModel newM2RndModel(ArrayList\u0026lt;MigOneModel\u0026gt; models) { 26 int mlSize = models.size(); 27 return newM2RndModel(models.get(rnd.nextInt(mlSize)).id); 28 } 29 30 public MigTwoModel newM2RndModel(Long migOneReference) { 31 MigTwoModel model = new MigTwoModel(); 32 model.someAnimal = Animals.rndAnimal(rnd); 33 model.migOneReference = migOneReference; 34 return model; 35 } 36 37} \n  Click to view Lesson5Tab2DCMigrations.class:  1public class Lesson5Tab2DCMigrations extends Lesson5BaseFragment { 2 3 private MigrationDBv2 databaseV2; 4 private SharedPreferencesMigDB sf; 5 6 private Button insertRandomButton; 7 private Button clearTableButton; 8 private Button deleteDatabaseButton; 9 10 private ListView eventsListView; 11 12 private TextView statusTV; 13 14 private MigDatabaseState mdbState; 15 16 17 final static int DB_IMPLEMENTATION_VERSION = 2; 18 final static int TABLE_AMOUNT = 2; 19 20 public Lesson5Tab2DCMigrations() {} 21 22 @Override 23 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 24 View rootView = inflater.inflate(R.layout.lesson5_tab2_dc_migration, container, false); 25 26 insertRandomButton = rootView.findViewById(R.id.l5_t2_go_button); 27 clearTableButton = rootView.findViewById(R.id.l5_t2_clear_button); 28 deleteDatabaseButton = rootView.findViewById(R.id.l5_t2_delete_database_button); 29 30 eventsListView = rootView.findViewById(R.id.l5_t2_actions); 31 32 insertRandomButton.setOnClickListener(new View.OnClickListener() { 33 @Override 34 public void onClick(View v) { 35 insert25RND(); 36 } 37 }); 38 39 clearTableButton.setOnClickListener(new View.OnClickListener() { 40 @Override 41 public void onClick(View v) { 42 clearTable(); 43 } 44 }); 45 46 deleteDatabaseButton.setOnClickListener(new View.OnClickListener() { 47 @Override 48 public void onClick(View v) { 49 deleteDatabase(); 50 } 51 }); 52 53 statusTV = rootView.findViewById(R.id.l5_t2_status); 54 55 56 setUpExpandedList( 57 rootView, 58 R.id._l5_t2_expanded_panel_list, 59 R.id._l5_t2_expanded_panel_text, 60 R.string._l5_t2_expanded_text_pattern 61 ); 62 63 reloadTableExpandedList(); 64 reloadStatus(); 65 return rootView; 66 } 67 68 public MigDatabaseState getMdbState(Context context, int implVersion, String[] tables) { 69 if(mdbState != null) return mdbState; 70 mdbState = new MigDatabaseState(implVersion, tables, context, getSf()); 71 return mdbState; 72 } 73 74 public void reloadStatus() { 75 if(statusTV != null) { 76 statusTV.setText(getMdbState(getContext(), DB_IMPLEMENTATION_VERSION, new String[] {M1M1TN, M1M2TN}).toString()); 77 } 78 } 79 80 81 @Override 82 public void onVisible() { 83 reloadTableExpandedList(); 84 reloadStatus(); 85 } 86 87 private SharedPreferencesMigDB getSf() { 88 if(sf != null) return sf; 89 sf = new SharedPreferencesMigDB(getContext()); 90 return sf; 91 } 92 93 private MigrationDBv2 getDatabase() { 94 // retrieving existing database after upgrade -\u0026gt; downgrade would cause onUpgrade() script would be run after mapper fetching 95 databaseV2 = new MigrationDBv2(getContext()); 96 return databaseV2; 97 } 98 99 private void insert25RND() { 100 new InsertRandomAsync().execute(0l); 101 } 102 103 private void clearTable() { 104 new WipeAsync().execute(0l); 105 } 106 107 private void deleteDatabase() { 108 new DeleteDatabaseAsync().execute(0l); 109 } 110 111 private void reloadTableExpandedList() { 112 new ReloadTableAsync().execute(0l); 113 } 114 115 @Override 116 protected int snackbarMessageResource() { 117 return R.string._l5_t2_snackbar_message; 118 } 119 120 121 122 // Asyncs 123 124 class ReloadTableAsync extends AsyncTask\u0026lt;Long, Long, List\u0026lt;String\u0026gt;\u0026gt; { 125 126 @Override 127 protected List\u0026lt;String\u0026gt; doInBackground(Long... params) { 128 LinkedList\u0026lt;String\u0026gt; toListView = new LinkedList\u0026lt;\u0026gt;(); 129 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 130 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 131 List\u0026lt;MigOneModel\u0026gt; m1Models = mapper.findAll(); 132 mapper.close(); 133 KittyMapper mapperT2 = getDatabase().getMapper(MigTwoModel.class); 134 List\u0026lt;MigTwoModel\u0026gt; m2Models = mapperT2.findAll(); 135 if(m1Models == null) { 136 toListView.addLast(format(getContext().getString(R.string._l5_t2_m1_db), 0)); 137 } else { 138 toListView.addLast(format(getContext().getString(R.string._l5_t2_m1_db), m1Models.size())); 139 Iterator\u0026lt;MigOneModel\u0026gt; mI = m1Models.iterator(); 140 while (mI.hasNext()) { 141 toListView.addLast(mI.next().toString()); 142 } 143 } 144 if(m2Models == null) { 145 toListView.addLast(format(getContext().getString(R.string._l5_t2_m2_db), 0)); 146 } else { 147 toListView.addLast(format(getContext().getString(R.string._l5_t2_m2_db), m2Models.size())); 148 Iterator\u0026lt;MigTwoModel\u0026gt; mI = m2Models.iterator(); 149 while (mI.hasNext()) { 150 toListView.addLast(mI.next().toString()); 151 } 152 } 153 return toListView; 154 } else { 155 if(!getSf().isDatabaseCreated() || getSf().isDatabaseDeletedManually()) { 156 toListView.addLast(getString(R.string._l5_t2_m1_db_doesnt_exist)); 157 return toListView; 158 } else { 159 toListView.addLast(format(getString(R.string._l5_t2_m1_db_has_different_version), getSf().currentMigDBVersion())); 160 return toListView; 161 } 162 } 163 } 164 165 @Override 166 protected void onPostExecute(List\u0026lt;String\u0026gt; result) { 167 int tableAmount = TABLE_AMOUNT; 168 if(getSf().isDatabaseDeletedManually() || !getSf().isDatabaseCreated() || getSf().currentMigDBVersion() != DB_IMPLEMENTATION_VERSION) 169 tableAmount = 0; 170 if(result != null) { 171 events.setAdapter(new MigAdapter(getContext(), result)); 172 int recordsAmount = result.size() - TABLE_AMOUNT; 173 if(tableAmount == 0) 174 recordsAmount = 0; 175 expandedTitle.setText(format(expandeddTitlePattern, recordsAmount, tableAmount)); 176 } else { 177 events.setAdapter(new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 178 expandedTitle.setText(format(expandeddTitlePattern, 0, tableAmount)); 179 } 180 } 181 } 182 183 private static final String ERR_STRING_WIPE = \u0026#34;Lesson5tab2WipeDataError, see exception details!\u0026#34;; 184 185 class WipeAsync extends AsyncTask\u0026lt;Long, Long, WipeAsyncResult\u0026gt; { 186 187 ProgressDialog dialog; 188 189 @Override 190 protected void onPreExecute() { 191 dialog = ProgressDialog.show( 192 getLessonActivity(), 193 getString(R.string._l5_t2_running_requested_operation_pg_title), 194 getString(R.string._l5_t2_running_requested_operation_pg_body) 195 ); 196 dialog.setCancelable(false); 197 } 198 199 @Override 200 protected WipeAsyncResult doInBackground(Long... params) { 201 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 202 try { 203 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 204 KittyMapper mapper2 = getDatabase().getMapper(MigTwoModel.class); 205 long recordsCount = mapper.countAll() + mapper2.countAll(); 206 long affected = mapper.deleteAll() + mapper2.deleteAll(); 207 mapper.close(); mapper2.close(); 208 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, affected, recordsCount); 209 } catch (Exception e) { 210 Log.e(MigrationDBv2.LTAG, ERR_STRING_WIPE, e); 211 if (e instanceof KittyRuntimeException) { 212 if (((KittyRuntimeException) e).getNestedException() != null) { 213 Log.e(MigrationDBv2.LTAG, ERR_STRING_WIPE, ((KittyRuntimeException) e).getNestedException()); 214 } 215 } 216 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, -1l, -1l); 217 } 218 } else { 219 return new WipeAsyncResult( 220 getSf().isDatabaseCreated(), 221 getSf().isDatabaseDeletedManually(), 222 getSf().currentMigDBVersion(), 223 -1l, -1l); 224 } 225 } 226 227 @Override 228 protected void onPostExecute(WipeAsyncResult result) { 229 dialog.cancel(); 230 231 if (eventsListView != null) { 232 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 233 eventsListView.setOnTouchListener(new View.OnTouchListener() { 234 235 // Setting on Touch Listener for handling the touch inside ScrollView 236 @Override 237 public boolean onTouch(View v, MotionEvent event) { 238 // Disallow the touch request for parent scroll on touch of child view 239 v.getParent().requestDisallowInterceptTouchEvent(true); 240 return false; 241 } 242 }); 243 244 if(!result.isCreated) { 245 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_not_existing)); 246 } else if (result.isDeleted) { 247 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_deleted)); 248 } else if (result.dbVersion != DB_IMPLEMENTATION_VERSION) { 249 if(result.dbVersion \u0026lt; 1) { 250 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_lower), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 251 } else { 252 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 253 } 254 } else if (result.recordsCount \u0026gt; -1 \u0026amp;\u0026amp; result.affectedRows \u0026gt; -1) { 255 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_count_to_events), result.recordsCount)); 256 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_deleted_to_events), result.affectedRows)); 257 } else { 258 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t2_error_event)); 259 } 260 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 261 reloadTableExpandedList(); 262 reloadStatus(); 263 } 264 } 265 } 266 267 class WipeAsyncResult { 268 boolean isCreated; 269 boolean isDeleted; 270 int dbVersion; 271 Long affectedRows; 272 Long recordsCount; 273 274 public WipeAsyncResult(boolean isCreated, boolean isDeleted, int dbVersion, 275 Long affectedRows, Long recordsCount) { 276 this.isCreated = isCreated; 277 this.isDeleted = isDeleted; 278 this.dbVersion = dbVersion; 279 this.affectedRows = affectedRows; 280 this.recordsCount = recordsCount; 281 } 282 } 283 284 static final int INSERT_AMOUNT = 25; 285 static final int INSERT_FK_AMOUNT = 10; 286 287 static final String ERR_INSERT_RND = \u0026#34;Lesson5tab2InsertRNDDataError, see exception details!\u0026#34;; 288 289 class InsertRandomAsync extends AsyncTask\u0026lt;Long, Long, InsertRandomResults\u0026gt; { 290 ProgressDialog dialog; 291 292 @Override 293 protected void onPreExecute() { 294 dialog = ProgressDialog.show( 295 getLessonActivity(), 296 getString(R.string._l5_t2_running_requested_operation_pg_title), 297 getString(R.string._l5_t2_running_requested_operation_pg_body) 298 ); 299 dialog.setCancelable(false); 300 } 301 302 @Override 303 protected InsertRandomResults doInBackground(Long... strings) { 304 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 305 return new InsertRandomResults( 306 null, 307 null, 308 -1l, 309 -1l, 310 -1l, 311 false, 312 getSf().currentMigDBVersion() 313 ); 314 } else { 315 try { 316 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 317 KittyMapper mapper2 = getDatabase().getMapper(MigTwoModel.class); 318 long recordsCount = mapper.countAll() + mapper2.countAll(); 319 long affected = mapper.deleteAll() + mapper2.deleteAll(); 320 LinkedList\u0026lt;MigOneModel\u0026gt; modelsToInsert = new LinkedList\u0026lt;\u0026gt;(); 321 getSf().setDatabaseCreated(true); 322 getSf().setCurrentMigDBVersion(DB_IMPLEMENTATION_VERSION); 323 getSf().setDatabaseDeletedManually(false); 324 MigV2RandomModelFactory factory = new MigV2RandomModelFactory(getContext()); 325 for (int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 326 MigOneModel m = factory.newM1RndModel(); 327 modelsToInsert.addLast(m); 328 } 329 mapper.insertInTransaction(modelsToInsert); 330 List\u0026lt;MigOneModel\u0026gt; models = mapper.findAll(); 331 332 Iterator\u0026lt;MigOneModel\u0026gt; mI = models.iterator(); 333 LinkedList\u0026lt;String\u0026gt; out = new LinkedList\u0026lt;\u0026gt;(); 334 while (mI.hasNext()) { 335 out.addLast(mI.next().toString()); 336 } 337 338 LinkedList\u0026lt;MigTwoModel\u0026gt; models2ToInsert = new LinkedList\u0026lt;\u0026gt;(); 339 for (int i = 0; i \u0026lt; INSERT_FK_AMOUNT; i++) { 340 MigTwoModel m = factory.newM2RndModel((ArrayList\u0026lt;MigOneModel\u0026gt;) models); 341 models2ToInsert.addLast(m); 342 } 343 mapper2.insertInTransaction(models2ToInsert); 344 List\u0026lt;MigTwoModel\u0026gt; models2 = mapper2.findAll(); 345 346 LinkedList\u0026lt;String\u0026gt; out2 = new LinkedList\u0026lt;\u0026gt;(); 347 Iterator\u0026lt;MigTwoModel\u0026gt; mI2 = models2.iterator(); 348 while (mI2.hasNext()) { 349 out2.addLast(mI2.next().toString()); 350 } 351 352 long recordsCountAfter = mapper.countAll() + mapper2.countAll(); 353 mapper.close(); mapper2.close(); 354 return new InsertRandomResults(out, out2, affected, recordsCount, recordsCountAfter, true, getSf().currentMigDBVersion()); 355 } catch (Exception e) { 356 Log.e(MigrationDBv1.LTAG, ERR_INSERT_RND, e); 357 if (e instanceof KittyRuntimeException) { 358 if (((KittyRuntimeException) e).getNestedException() != null) { 359 Log.e(MigrationDBv1.LTAG, ERR_INSERT_RND, ((KittyRuntimeException) e).getNestedException()); 360 } 361 } 362 return new InsertRandomResults( 363 null, 364 null, 365 -1l, 366 -1l, 367 -1l, 368 false, 369 getSf().currentMigDBVersion() 370 ); 371 } 372 } 373 } 374 375 @Override 376 protected void onPostExecute(InsertRandomResults result) { 377 dialog.cancel(); 378 if (eventsListView != null) { 379 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 380 eventsListView.setOnTouchListener(new View.OnTouchListener() { 381 382 // Setting on Touch Listener for handling the touch inside ScrollView 383 @Override 384 public boolean onTouch(View v, MotionEvent event) { 385 // Disallow the touch request for parent scroll on touch of child view 386 v.getParent().requestDisallowInterceptTouchEvent(true); 387 return false; 388 } 389 }); 390 if (result.operationSuccess) { 391 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_count_to_events), result.modelsCountBefore)); 392 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_deleted_to_events), result.deletedModelsAffectedRows)); 393 for (String modelString : result.modelInsertionsM1) { 394 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_inserted_to_events), M1M1TN, modelString)); 395 } 396 for (String modelString2 : result.modelInsertionsM2) { 397 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_inserted_to_events), M1M2TN, modelString2)); 398 } 399 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_count_to_events), result.modelsCountAfter)); 400 } else { 401 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 402 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 403 } else { 404 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t2_error_event)); 405 } 406 } 407 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 408 reloadTableExpandedList(); 409 reloadStatus(); 410 } 411 } 412 413 414 } 415 416 class InsertRandomResults { 417 List\u0026lt;String\u0026gt; modelInsertionsM1; 418 List\u0026lt;String\u0026gt; modelInsertionsM2; 419 long deletedModelsAffectedRows; 420 long modelsCountBefore; 421 long modelsCountAfter; 422 boolean operationSuccess; 423 int dbVersion; 424 425 public InsertRandomResults(List\u0026lt;String\u0026gt; modelInsertionsM1, List\u0026lt;String\u0026gt; modelInsertionsM2, 426 long deletedModelsAffectedRows, 427 long modelsCountBefore, long modelsCountAfter, boolean opSuccess, 428 int dbVersion) { 429 this.modelInsertionsM1 = modelInsertionsM1; 430 this.modelInsertionsM2 = modelInsertionsM2; 431 this.deletedModelsAffectedRows = deletedModelsAffectedRows; 432 this.modelsCountBefore = modelsCountBefore; 433 this.modelsCountAfter = modelsCountAfter; 434 this.operationSuccess = opSuccess; 435 this.dbVersion = dbVersion; 436 } 437 } 438 439 static final String ERR_DELETION = \u0026#34;Lesson5tab2DBDeleteError, see exception details!\u0026#34;; 440 441 class DeleteDatabaseAsync extends AsyncTask\u0026lt;Long, Long, Integer\u0026gt; { 442 ProgressDialog dialog; 443 444 final int DELETED = 1; 445 final int NOT_DELETED = 2; 446 final int ERROR = 3; 447 448 @Override 449 protected void onPreExecute() { 450 dialog = ProgressDialog.show( 451 getLessonActivity(), 452 getString(R.string._l5_t2_running_requested_operation_pg_title), 453 getString(R.string._l5_t2_running_requested_operation_pg_body) 454 ); 455 dialog.setCancelable(false); 456 } 457 458 @Override 459 protected Integer doInBackground(Long... strings) { 460 try { 461 boolean deleted = getDatabase().deleteDatabase(); 462 getSf().setDatabaseDeletedManually(true); 463 getSf().setDatabaseCreated(false); 464 getSf().setCurrentMigDBVersion(-1); 465 if(deleted) 466 return DELETED; 467 else 468 return NOT_DELETED; 469 } catch (Exception e) { 470 Log.e(MigrationDBv2.LTAG, ERR_DELETION, e); 471 if (e instanceof KittyRuntimeException) { 472 if (((KittyRuntimeException) e).getNestedException() != null) { 473 Log.e(MigrationDBv2.LTAG, ERR_DELETION, ((KittyRuntimeException) e).getNestedException()); 474 } 475 } 476 return ERROR; 477 } 478 } 479 480 @Override 481 protected void onPostExecute(Integer result) { 482 dialog.cancel(); 483 if (eventsListView != null) { 484 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 485 eventsListView.setOnTouchListener(new View.OnTouchListener() { 486 487 // Setting on Touch Listener for handling the touch inside ScrollView 488 @Override 489 public boolean onTouch(View v, MotionEvent event) { 490 // Disallow the touch request for parent scroll on touch of child view 491 v.getParent().requestDisallowInterceptTouchEvent(true); 492 return false; 493 } 494 }); 495 switch (result) { 496 case DELETED: 497 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_delete_db_success))); 498 break; 499 case NOT_DELETED: 500 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_delete_db_fail))); 501 break; 502 case ERROR: 503 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t2_error_event))); 504 break; 505 } 506 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 507 reloadTableExpandedList(); 508 reloadStatus(); 509 } 510 } 511 } 512 513 // Expanded list 514 MigAdapter migAdapter; 515 516 @Override 517 protected void setUpExpandedList(View rootView, int eventsId, int eventsTitleId, int eventTitleStringPattern) { 518 events = (ListView) rootView.findViewById(eventsId); 519 expandedTitle = (TextView) rootView.findViewById(eventsTitleId); 520 expandeddTitlePattern = getString(eventTitleStringPattern); 521 522 expandedTitle.setText(format(expandeddTitlePattern, 0)); 523 524 if(expandedAdapter == null) { 525 migAdapter = new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;()); 526 } 527 528 events.setAdapter(migAdapter); 529 events.setOnTouchListener(new View.OnTouchListener() { 530 531 // Setting on Touch Listener for handling the touch inside ScrollView 532 @Override 533 public boolean onTouch(View v, MotionEvent event) { 534 // Disallow the touch request for parent scroll on touch of child view 535 v.getParent().requestDisallowInterceptTouchEvent(true); 536 return false; 537 } 538 }); 539 } 540 541 // Fab menu section 542 543 @Override 544 public View.OnClickListener helpFabMenuAction() { 545 return new View.OnClickListener() { 546 547 /** 548* Called when a view has been clicked. 549* 550* @param v The view that was clicked. 551*/ 552 @Override 553 public void onClick(View v) { 554 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T2_TUTORIAL); 555 } 556 }; 557 } 558 559 @Override 560 public View.OnClickListener sourceFabMenuAction() { 561 return new View.OnClickListener() { 562 563 /** 564* Called when a view has been clicked. 565* 566* @param v The view that was clicked. 567*/ 568 @Override 569 public void onClick(View v) { 570 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T2_SOURCE); 571 } 572 }; 573 } 574 575 @Override 576 public View.OnClickListener schemaFabMenuAction() { 577 return new View.OnClickListener() { 578 579 /** 580* Called when a view has been clicked. 581* 582* @param v The view that was clicked. 583*/ 584 @Override 585 public void onClick(View v) { 586 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T2_SCHEMA); 587 } 588 }; 589 } 590} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/fsmigrations/l5t4_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM mig v.4 implementation sources   Click to view MigrationDBv4.class:  1@KITTY_DATABASE( 2 isLoggingOn = false, 3 isProductionOn = true, 4 isKittyDexUtilLoggingEnabled = false, 5 databaseName = \u0026#34;mig\u0026#34;, 6 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.migrations.migv4\u0026#34;}, 7 databaseVersion = 4, 8 logTag = MigrationDBv4.LTAG 9) 10@KITTY_DATABASE_REGISTRY( 11 domainModels = { 12 net.akaish.kittyormdemo.sqlite.migrations.migv4.MigTwoModel.class, 13 net.akaish.kittyormdemo.sqlite.migrations.migv4.MigThreeModel.class, 14 net.akaish.kittyormdemo.sqlite.migrations.migv4.MigFourModel.class 15 } 16) 17@KITTY_DATABASE_HELPER( 18 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.USE_FILE_MIGRATIONS 19) 20public class MigrationDBv4 extends KittyDatabase { 21 22 public static final String LTAG = \u0026#34;MIGv4\u0026#34;; 23 24 /** 25* KittyORM main database class that represents bootstrap and holder for all related with database 26* components. 27* 28* @param ctx 29*/ 30 public MigrationDBv4(Context ctx) { 31 super(ctx); 32 } 33} \n  Click to view MigTwoModel.class:  1@KITTY_TABLE( 2 tableName = \u0026#34;mig_two\u0026#34; 3) 4public class MigTwoModel extends KittyModel { 5 6 @KITTY_COLUMN( 7 columnOrder = 0, 8 isIPK = true 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 public Long migOneReference; 16 17 @KITTY_COLUMN(columnOrder = 2) 18 public Animals someAnimal; 19 20 @KITTY_COLUMN( 21 columnOrder = 3, 22 columnAffinity = TypeAffinities.TEXT 23 ) 24 @KITTY_COLUMN_SERIALIZATION 25 public AnimalSounds someAnimalSound; 26 27 String someAnimalSoundSerialize() { 28 if(someAnimalSound == null) return null; 29 return new GsonBuilder().create().toJson(someAnimalSound); 30 } 31 32 AnimalSounds someAnimalSoundDeserialize(String cvData) { 33 if(cvData == null) return null; 34 if(cvData.length() == 0) return null; 35 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 36 } 37 38 @Override 39 public String toString() { 40 return new StringBuilder(64) 41 .append(\u0026#34;[ id = \u0026#34;) 42 .append(id) 43 .append(\u0026#34; ; migOneReference = \u0026#34;) 44 .append(migOneReference) 45 .append(\u0026#34; ; someAnimal = \u0026#34;) 46 .append(someAnimal) 47 .append(\u0026#34; ; someAnimalSound = \u0026#34;) 48 .append(someAnimalSoundSerialize()) 49 .append(\u0026#34; ] \u0026#34;).toString(); 50 } 51} \n  Click to view MigThreeModel.class:  1@KITTY_TABLE(tableName = \u0026#34;mig_three\u0026#34;) 2public class MigThreeModel extends KittyModel { 3 4 @KITTY_COLUMN( 5 columnOrder = 0, 6 isIPK = true 7 ) 8 public Long id; 9 10 @KITTY_COLUMN( 11 columnOrder = 1, 12 columnName = \u0026#34;new_sv_name\u0026#34; 13 ) 14 @NOT_NULL 15 @DEFAULT( 16 literalValue = \u0026#34;\u0026#39;Something random\u0026#39;\u0026#34; 17 ) 18 public String someValue; 19 20 @KITTY_COLUMN(columnOrder = 2) 21 @DEFAULT(signedInteger = 22) 22 @ONE_COLUMN_INDEX(indexName = \u0026#34;m3_rnd_long\u0026#34;) 23 public Long randomLong; 24 25 public String toString() { 26 return new StringBuilder(32) 27 .append(\u0026#34;[ id = \u0026#34;) 28 .append(id) 29 .append(\u0026#34; ; someValue = \u0026#34;) 30 .append(someValue) 31 .append(\u0026#34; ; randomLong = \u0026#34;) 32 .append(randomLong) 33 .append(\u0026#34; ]\u0026#34;).toString(); 34 } 35} \n  Click to view MigFourModel.class:  1@KITTY_TABLE(tableName = \u0026#34;mig_four\u0026#34;) 2public class MigFourModel extends KittyModel { 3 4 @KITTY_COLUMN( 5 columnOrder = 0, 6 isIPK = true) 7 public Long id; 8 9 @KITTY_COLUMN(columnOrder = 1) 10 @FOREIGN_KEY( 11 reference = @FOREIGN_KEY_REFERENCE( 12 foreignTableName = \u0026#34;mig_three\u0026#34;, 13 foreignTableColumns = {\u0026#34;id\u0026#34;} 14 ) 15 ) 16 @NOT_NULL 17 public Long migThreeReference; 18 19 @KITTY_COLUMN(columnOrder = 2) 20 @FOREIGN_KEY( 21 reference = @FOREIGN_KEY_REFERENCE( 22 foreignTableName = \u0026#34;mig_two\u0026#34;, 23 foreignTableColumns = {\u0026#34;id\u0026#34;} 24 ) 25 ) 26 @NOT_NULL 27 public Long migTwoReference; 28 29 @KITTY_COLUMN(columnOrder = 3) 30 @NOT_NULL 31 @DEFAULT( 32 predefinedLiteralValue = LiteralValues.CURRENT_DATE 33 ) 34 public Date creationDate; 35 36 @Override 37 public String toString() { 38 return new StringBuilder(64) 39 .append(\u0026#34;[ id = \u0026#34;) 40 .append(id) 41 .append(\u0026#34; ; migThreeReferecnde = \u0026#34;) 42 .append(migThreeReference) 43 .append(\u0026#34; ; migTwoReference = \u0026#34;) 44 .append(migTwoReference) 45 .append(\u0026#34; ; creationDate = \u0026#34;) 46 .append(creationDate) 47 .append(\u0026#34; ]\u0026#34;).toString(); 48 } 49} \n  Fragment and utility code used in this tutorial   Click to view MigV4RandomModelFactory.class:  1public class MigV4RandomModelFactory { 2 3 final Context context; 4 final Random rnd; 5 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 7 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 8 9 public MigV4RandomModelFactory(Context ctx) { 10 this.context = ctx; 11 this.rnd = new Random(); 12 13 // Lol, getContext().getString() method is fucking slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 14 // Right now getting those string causes only 14% of execution time 15 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 16 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 17 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 18 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 19 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 20 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 21 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 22 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 23 24 25 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 26 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 27 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 28 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 29 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 30 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 31 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 32 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 33 } 34 35 public MigTwoModel newM2RndModel() { 36 MigTwoModel model = new MigTwoModel(); 37 model.someAnimal = Animals.rndAnimal(rnd); 38 model.migOneReference = rnd.nextLong(); 39 AnimalSounds animalSounds = new AnimalSounds(); 40 animalSounds.animalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(model.someAnimal)); 41 animalSounds.animalSounds = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(model.someAnimal)); 42 model.someAnimalSound = animalSounds; 43 return model; 44 } 45 46 static final String[] M3_SOME_VALUES = {\u0026#34;One\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Wolf\u0026#34;, \u0026#34;Plane\u0026#34;, \u0026#34;Name\u0026#34;, \u0026#34;Fear of being alone\u0026#34;, \u0026#34;Despair\u0026#34;, \u0026#34;Death\u0026#34;, \u0026#34;Do not look for meaning where it is not\u0026#34;}; 47 48 public MigThreeModel newM3RndModel() { 49 return newM3RndModel(rnd.nextBoolean()); 50 } 51 52 public MigThreeModel newM3RndModel(boolean setDefaultValue) { 53 MigThreeModel model = new MigThreeModel(); 54 if(setDefaultValue) 55 model.setFieldExclusion(\u0026#34;someValue\u0026#34;); 56 else 57 model.someValue = M3_SOME_VALUES[rnd.nextInt(M3_SOME_VALUES.length)]; 58 model.randomLong = rnd.nextLong(); 59 return model; 60 } 61 62 public MigFourModel newM4RndModel(List\u0026lt;MigThreeModel\u0026gt; mig3Models, List\u0026lt;MigTwoModel\u0026gt; mig2Models) { 63 if(mig2Models == null || mig3Models == null) { 64 throw new IllegalArgumentException(\u0026#34;M4RMF#newM4RndModel bad collections provided!\u0026#34;); 65 } 66 if(mig2Models.size() == 0 || mig3Models.size() == 0) { 67 throw new IllegalArgumentException(\u0026#34;M4RMF#newM4RndModel bad collections provided!\u0026#34;); 68 } 69 return newM4RndModel( 70 rnd.nextBoolean(), 71 mig2Models.get(rnd.nextInt(mig2Models.size())).id, 72 mig3Models.get(rnd.nextInt(mig3Models.size())).id 73 ); 74 } 75 76 public MigFourModel newM4RndModel(boolean setDefaultValue, Long mig2reference, Long mig3reference) { 77 if(mig2reference == null || mig3reference == null) 78 throw new IllegalArgumentException(\u0026#34;M4RMF#newM4RndModel bad references id provided!\u0026#34;); 79 MigFourModel model = new MigFourModel(); 80 model.migThreeReference = mig3reference; 81 model.migTwoReference = mig2reference; 82 if(setDefaultValue) 83 model.setFieldExclusion(\u0026#34;creationDate\u0026#34;); 84 else 85 model.creationDate = new Date(System.currentTimeMillis()); 86 return model; 87 } 88} \n  Click to view Lesson5Tab4FilescriptMigration.class:  1public class Lesson5Tab4FilescriptMigration extends Lesson5BaseFragment { 2 3 private MigrationDBv4 databaseV4; 4 private SharedPreferencesMigDB sf; 5 6 private Button insertRandomButton; 7 private Button clearTableButton; 8 private Button deleteDatabaseButton; 9 10 private ListView eventsListView; 11 12 private TextView statusTV; 13 14 private MigDatabaseState mdbState; 15 16 final static int DB_IMPLEMENTATION_VERSION = 4; 17 final static int TABLE_AMOUNT = 3; 18 19 public Lesson5Tab4FilescriptMigration() {} 20 21 @Override 22 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 23 View rootView = inflater.inflate(R.layout.lesson5_tab4_file_migrations, container, false); 24 25 insertRandomButton = rootView.findViewById(R.id.l5_t4_go_button); 26 clearTableButton = rootView.findViewById(R.id.l5_t4_clear_button); 27 deleteDatabaseButton = rootView.findViewById(R.id.l5_t4_delete_database_button); 28 29 eventsListView = rootView.findViewById(R.id.l5_t4_actions); 30 31 insertRandomButton.setOnClickListener(new View.OnClickListener() { 32 @Override 33 public void onClick(View v) { 34 insert25RND(); 35 } 36 }); 37 38 clearTableButton.setOnClickListener(new View.OnClickListener() { 39 @Override 40 public void onClick(View v) { 41 clearTable(); 42 } 43 }); 44 45 deleteDatabaseButton.setOnClickListener(new View.OnClickListener() { 46 @Override 47 public void onClick(View v) { 48 deleteDatabase(); 49 } 50 }); 51 52 statusTV = rootView.findViewById(R.id.l5_t4_status); 53 54 55 setUpExpandedList( 56 rootView, 57 R.id._l5_t4_expanded_panel_list, 58 R.id._l5_t4_expanded_panel_text, 59 R.string._l5_t4_expanded_text_pattern 60 ); 61 62 reloadTableExpandedList(); 63 reloadStatus(); 64 return rootView; 65 } 66 67 public MigDatabaseState getMdbState(Context context, int implVersion, String[] tables) { 68 if(mdbState != null) return mdbState; 69 mdbState = new MigDatabaseState(implVersion, tables, context, getSf()); 70 return mdbState; 71 } 72 73 public void reloadStatus() { 74 if(statusTV != null) { 75 statusTV.setText(getMdbState(getContext(), DB_IMPLEMENTATION_VERSION, new String[] {M1M2TN, M1M3TN, M1M4TN}).toString()); 76 } 77 } 78 79 80 @Override 81 public void onVisible() { 82 reloadTableExpandedList(); 83 reloadStatus(); 84 } 85 86 private SharedPreferencesMigDB getSf() { 87 if(sf != null) return sf; 88 sf = new SharedPreferencesMigDB(getContext()); 89 return sf; 90 } 91 92 private MigrationDBv4 getDatabase() { 93 // retrieving existing database after upgrade -\u0026gt; downgrade would cause onUpgrade() script would be run after mapper fetching 94 databaseV4 = new MigrationDBv4(getContext()); 95 return databaseV4; 96 } 97 98 private void insert25RND() { 99 new InsertRandomAsync().execute(0l); 100 //new TestCPK().execute(); 101 } 102 103 private void clearTable() { 104 new WipeAsync().execute(0l); 105 } 106 107 private void deleteDatabase() { 108 new DeleteDatabaseAsync().execute(0l); 109 } 110 111 private void reloadTableExpandedList() { 112 new ReloadTableAsync().execute(0l); 113 } 114 115 @Override 116 protected int snackbarMessageResource() { 117 return R.string._l5_t4_snackbar_message; 118 } 119 120 121 122 // Asyncs 123 124 class ReloadTableAsync extends AsyncTask\u0026lt;Long, Long, List\u0026lt;String\u0026gt;\u0026gt; { 125 126 @Override 127 protected List\u0026lt;String\u0026gt; doInBackground(Long... params) { 128 LinkedList\u0026lt;String\u0026gt; toListView = new LinkedList\u0026lt;\u0026gt;(); 129 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 130 // T4 131 KittyMapper mapper = getDatabase().getMapper(MigFourModel.class); 132 List\u0026lt;MigFourModel\u0026gt; m1Models = mapper.findAll(); 133 mapper.close(); 134 // T2 135 KittyMapper mapperT2 = getDatabase().getMapper(MigTwoModel.class); 136 List\u0026lt;MigTwoModel\u0026gt; m2Models = mapperT2.findAll(); 137 mapper.close(); 138 // T3 139 KittyMapper mapperT3 = getDatabase().getMapper(MigThreeModel.class); 140 List\u0026lt;MigThreeModel\u0026gt; m3Models = mapperT3.findAll(); 141 mapper.close(); 142 143 if(m1Models == null) { 144 toListView.addLast(format(getContext().getString(R.string._l5_t4_m4_db), 0)); 145 } else { 146 toListView.addLast(format(getContext().getString(R.string._l5_t4_m4_db), m1Models.size())); 147 Iterator\u0026lt;MigFourModel\u0026gt; mI = m1Models.iterator(); 148 while (mI.hasNext()) { 149 toListView.addLast(mI.next().toString()); 150 } 151 } 152 if(m2Models == null) { 153 toListView.addLast(format(getContext().getString(R.string._l5_t4_m2_db), 0)); 154 } else { 155 toListView.addLast(format(getContext().getString(R.string._l5_t4_m2_db), m2Models.size())); 156 Iterator\u0026lt;MigTwoModel\u0026gt; mI = m2Models.iterator(); 157 while (mI.hasNext()) { 158 toListView.addLast(mI.next().toString()); 159 } 160 } 161 if(m3Models == null) { 162 toListView.addLast(format(getContext().getString(R.string._l5_t4_m3_db), 0)); 163 } else { 164 toListView.addLast(format(getContext().getString(R.string._l5_t4_m3_db), m2Models.size())); 165 Iterator\u0026lt;MigThreeModel\u0026gt; mI = m3Models.iterator(); 166 while (mI.hasNext()) { 167 toListView.addLast(mI.next().toString()); 168 } 169 } 170 return toListView; 171 } else { 172 if(!getSf().isDatabaseCreated() || getSf().isDatabaseDeletedManually()) { 173 toListView.addLast(getString(R.string._l5_t4_m1_db_doesnt_exist)); 174 return toListView; 175 } else { 176 toListView.addLast(format(getString(R.string._l5_t4_m1_db_has_different_version), getSf().currentMigDBVersion())); 177 return toListView; 178 } 179 } 180 } 181 182 @Override 183 protected void onPostExecute(List\u0026lt;String\u0026gt; result) { 184 int tableAmount = TABLE_AMOUNT; 185 if(getSf().isDatabaseDeletedManually() || !getSf().isDatabaseCreated() || getSf().currentMigDBVersion() != DB_IMPLEMENTATION_VERSION) 186 tableAmount = 0; 187 if(result != null) { 188 events.setAdapter(new MigAdapter(getContext(), result)); 189 int recordsAmount = result.size() - tableAmount; 190 if(tableAmount == 0) 191 recordsAmount = 0; 192 expandedTitle.setText(format(expandeddTitlePattern, recordsAmount, tableAmount)); 193 } else { 194 events.setAdapter(new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 195 expandedTitle.setText(format(expandeddTitlePattern, 0, tableAmount)); 196 } 197 } 198 } 199 200 private static final String ERR_STRING_WIPE = \u0026#34;Lesson5tab4WipeDataError, see exception details!\u0026#34;; 201 202 class WipeAsync extends AsyncTask\u0026lt;Long, Long, WipeAsyncResult\u0026gt; { 203 204 ProgressDialog dialog; 205 206 @Override 207 protected void onPreExecute() { 208 dialog = ProgressDialog.show( 209 getLessonActivity(), 210 getString(R.string._l5_t4_running_requested_operation_pg_title), 211 getString(R.string._l5_t4_running_requested_operation_pg_body) 212 ); 213 dialog.setCancelable(false); 214 } 215 216 @Override 217 protected WipeAsyncResult doInBackground(Long... params) { 218 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 219 try { 220 KittyMapper mapper4 = getDatabase().getMapper(MigFourModel.class); 221 KittyMapper mapper2 = getDatabase().getMapper(MigTwoModel.class); 222 KittyMapper mapper3 = getDatabase().getMapper(MigThreeModel.class); 223 long recordsCount = mapper4.countAll() + mapper2.countAll() + mapper3.countAll(); 224 long affected = mapper4.deleteAll() + mapper2.deleteAll() + mapper3.deleteAll(); 225 mapper4.close(); mapper2.close(); mapper3.close(); 226 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, affected, recordsCount); 227 } catch (Exception e) { 228 Log.e(MigrationDBv4.LTAG, ERR_STRING_WIPE, e); 229 if (e instanceof KittyRuntimeException) { 230 if (((KittyRuntimeException) e).getNestedException() != null) { 231 Log.e(MigrationDBv4.LTAG, ERR_STRING_WIPE, ((KittyRuntimeException) e).getNestedException()); 232 } 233 } 234 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, -1l, -1l); 235 } 236 } else { 237 return new WipeAsyncResult( 238 getSf().isDatabaseCreated(), 239 getSf().isDatabaseDeletedManually(), 240 getSf().currentMigDBVersion(), 241 -1l, -1l); 242 } 243 } 244 245 @Override 246 protected void onPostExecute(WipeAsyncResult result) { 247 dialog.cancel(); 248 249 if (eventsListView != null) { 250 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 251 eventsListView.setOnTouchListener(new View.OnTouchListener() { 252 253 // Setting on Touch Listener for handling the touch inside ScrollView 254 @Override 255 public boolean onTouch(View v, MotionEvent event) { 256 // Disallow the touch request for parent scroll on touch of child view 257 v.getParent().requestDisallowInterceptTouchEvent(true); 258 return false; 259 } 260 }); 261 262 if(!result.isCreated) { 263 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_not_existing)); 264 } else if (result.isDeleted) { 265 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_deleted)); 266 } else if (result.dbVersion != DB_IMPLEMENTATION_VERSION) { 267 if(result.dbVersion \u0026lt; 1) { 268 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_lower), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 269 } else { 270 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 271 } 272 } else if (result.recordsCount \u0026gt; -1 \u0026amp;\u0026amp; result.affectedRows \u0026gt; -1) { 273 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_count_to_events), result.recordsCount)); 274 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_deleted_to_events), result.affectedRows)); 275 } else { 276 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t4_error_event)); 277 } 278 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 279 reloadTableExpandedList(); 280 reloadStatus(); 281 } 282 } 283 } 284 285 class WipeAsyncResult { 286 boolean isCreated; 287 boolean isDeleted; 288 int dbVersion; 289 Long affectedRows; 290 Long recordsCount; 291 292 public WipeAsyncResult(boolean isCreated, boolean isDeleted, int dbVersion, 293 Long affectedRows, Long recordsCount) { 294 this.isCreated = isCreated; 295 this.isDeleted = isDeleted; 296 this.dbVersion = dbVersion; 297 this.affectedRows = affectedRows; 298 this.recordsCount = recordsCount; 299 } 300 } 301 302 static final int INSERT_AMOUNT = 25; 303 static final int INSERT_FK_AMOUNT = 10; 304 305 static final String ERR_INSERT_RND = \u0026#34;Lesson5tab4InsertRNDDataError, see exception details!\u0026#34;; 306 307 // TEST COMPLEX PK 308 class TestCPK extends AsyncTask\u0026lt;Void, Void, Long\u0026gt; { 309 310 /** 311* Override this method to perform a computation on a background thread. The 312* specified parameters are the parameters passed to {@link #execute} 313* by the caller of this task. 314* \u0026lt;p\u0026gt; 315* This method can call {@link #publishProgress} to publish updates 316* on the UI thread. 317* 318* @param voids The parameters of the task. 319* @return A result, defined by the subclass of this task. 320* @see #onPreExecute() 321* @see #onPostExecute 322* @see #publishProgress 323*/ 324 @Override 325 protected Long doInBackground(Void... voids) { 326 KittyMapper mapper = getDatabase().getMapper(MigFiveModel.class); 327 MigFiveModel m1 = new MigFiveModel(); 328 MigFiveModel m2 = new MigFiveModel(); 329 MigFiveModel m3 = new MigFiveModel(); 330 331 m1.ipkUniqueString = UUID.randomUUID().toString(); 332 m2.ipkUniqueString = UUID.randomUUID().toString(); 333 m3.ipkUniqueString = UUID.randomUUID().toString(); 334 335 m1.someStr = \u0026#34;STR1\u0026#34;; 336 m2.someStr = \u0026#34;STR2\u0026#34;; 337 m3.someStr = \u0026#34;STR3\u0026#34;; 338 339 mapper.save(m1); 340 mapper.save(m2); 341 mapper.save(m3); 342 343 Log.e(\u0026#34;CPK test 0\u0026#34;, \u0026#34; count = \u0026#34;+mapper.countAll()); 344 345 SQLiteCondition sqLiteCondition = new SQLiteConditionBuilder() 346 .addField(\u0026#34;ipk_str\u0026#34;) 347 .addSQLOperator(SQLiteOperator.EQUAL) 348 .addValue(m3.ipkUniqueString) 349 .build(); 350 MigFiveModel m3FromDB = (MigFiveModel) mapper.findWhere(sqLiteCondition).get(0); 351 Log.e(\u0026#34;CPK test 1\u0026#34;, m3FromDB.toString()); 352 m3FromDB.someStr = \u0026#34;modified\u0026#34;; 353 354 mapper.save(m3FromDB); 355 356 SQLiteCondition sqLiteCondition2 = new SQLiteConditionBuilder() 357 .addField(\u0026#34;some_str\u0026#34;) 358 .addSQLOperator(SQLiteOperator.EQUAL) 359 .addValue(\u0026#34;modified\u0026#34;) 360 .build(); 361 MigFiveModel m3FromDBM = (MigFiveModel) mapper.findWhere(sqLiteCondition2).get(0); 362 Log.e(\u0026#34;CPK test 2\u0026#34;, m3FromDB.toString()); 363 364 Log.e(\u0026#34;CPK test 3\u0026#34;, \u0026#34; count = \u0026#34;+mapper.countAll()); 365 366 mapper.deleteAll(); 367 return null; 368 } 369 } 370 371 class InsertRandomAsync extends AsyncTask\u0026lt;Long, Long, InsertRandomResults\u0026gt; { 372 ProgressDialog dialog; 373 374 @Override 375 protected void onPreExecute() { 376 dialog = ProgressDialog.show( 377 getLessonActivity(), 378 getString(R.string._l5_t4_running_requested_operation_pg_title), 379 getString(R.string._l5_t4_running_requested_operation_pg_body) 380 ); 381 dialog.setCancelable(false); 382 } 383 384 @Override 385 protected InsertRandomResults doInBackground(Long... strings) { 386// File destinationFile = getContext().getFilesDir(); 387// KittyUtils.copyDirectoryFromAssetsToFS(getContext(), KittyNamingUtils.ASSETS_URI_START + \u0026#34;kittysqliteorm\u0026#34;, destinationFile); 388// if(true) return null; 389 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 390 return new InsertRandomResults( 391 null, 392 null, 393 null, 394 -1l, 395 -1l, 396 -1l, 397 false, 398 getSf().currentMigDBVersion() 399 ); 400 } else { 401 try { 402 KittyMapper mapper4 = getDatabase().getMapper(MigFourModel.class); 403 KittyMapper mapper2 = getDatabase().getMapper(MigTwoModel.class); 404 KittyMapper mapper3 = getDatabase().getMapper(MigThreeModel.class); 405 long recordsCount = mapper4.countAll() + mapper2.countAll() + mapper3.countAll(); 406 407 boolean deleteData = getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION; 408 409 long affected; 410 411 if(deleteData) 412 affected = mapper4.deleteAll() + mapper2.deleteAll() + mapper3.deleteAll(); 413 else 414 affected = 0l; 415 416 LinkedList\u0026lt;MigFourModel\u0026gt; modelsToInsert = new LinkedList\u0026lt;\u0026gt;(); 417 LinkedList\u0026lt;MigTwoModel\u0026gt; models2ToInsert = new LinkedList\u0026lt;\u0026gt;(); 418 LinkedList\u0026lt;MigThreeModel\u0026gt; models3ToInsert = new LinkedList\u0026lt;\u0026gt;(); 419 420 getSf().setDatabaseCreated(true); 421 getSf().setCurrentMigDBVersion(DB_IMPLEMENTATION_VERSION); 422 getSf().setDatabaseDeletedManually(false); 423 424 MigV4RandomModelFactory factory = new MigV4RandomModelFactory(getContext()); 425 426 for (int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 427 MigTwoModel m = factory.newM2RndModel(); 428 models2ToInsert.addLast(m); 429 } 430 mapper2.insertInTransaction(models2ToInsert); 431 List\u0026lt;MigTwoModel\u0026gt; models2 = mapper2.findAll(); 432 LinkedList\u0026lt;String\u0026gt; out2 = new LinkedList\u0026lt;\u0026gt;(); 433 Iterator\u0026lt;MigTwoModel\u0026gt; mI2 = models2.iterator(); 434 while (mI2.hasNext()) { 435 out2.addLast(mI2.next().toString()); 436 } 437 438 for (int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 439 MigThreeModel m = factory.newM3RndModel(); 440 models3ToInsert.addLast(m); 441 } 442 mapper3.insertInTransaction(models3ToInsert); 443 List\u0026lt;MigThreeModel\u0026gt; models3 = mapper3.findAll(); 444 LinkedList\u0026lt;String\u0026gt; out3 = new LinkedList\u0026lt;\u0026gt;(); 445 Iterator\u0026lt;MigThreeModel\u0026gt; mI3 = models3.iterator(); 446 while (mI3.hasNext()) { 447 out3.addLast(mI3.next().toString()); 448 } 449 450 for (int i = 0; i \u0026lt; INSERT_FK_AMOUNT; i++) { 451 MigFourModel m = factory.newM4RndModel(models3, models2); 452 modelsToInsert.addLast(m); 453 } 454 mapper4.insertInTransaction(modelsToInsert); 455 List\u0026lt;MigFourModel\u0026gt; models = mapper4.findAll(); 456 Iterator\u0026lt;MigFourModel\u0026gt; mI = models.iterator(); 457 LinkedList\u0026lt;String\u0026gt; out4 = new LinkedList\u0026lt;\u0026gt;(); 458 while (mI.hasNext()) { 459 out4.addLast(mI.next().toString()); 460 } 461 462 long recordsCountAfter = mapper4.countAll() + mapper2.countAll() + mapper3.countAll(); 463 mapper4.close(); mapper2.close(); mapper3.close(); 464 return new InsertRandomResults(out4, out2, out3, affected, recordsCount, recordsCountAfter, true, getSf().currentMigDBVersion()); 465 } catch (Exception e) { 466 Log.e(MigrationDBv4.LTAG, ERR_INSERT_RND, e); 467 if (e instanceof KittyRuntimeException) { 468 if (((KittyRuntimeException) e).getNestedException() != null) { 469 Log.e(MigrationDBv4.LTAG, ERR_INSERT_RND, ((KittyRuntimeException) e).getNestedException()); 470 } 471 } 472 return new InsertRandomResults( 473 null, 474 null, 475 null, 476 -1l, 477 -1l, 478 -1l, 479 false, 480 getSf().currentMigDBVersion() 481 ); 482 } 483 } 484 } 485 486 @Override 487 protected void onPostExecute(InsertRandomResults result) { 488 dialog.cancel(); 489 if (eventsListView != null) { 490 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 491 eventsListView.setOnTouchListener(new View.OnTouchListener() { 492 493 // Setting on Touch Listener for handling the touch inside ScrollView 494 @Override 495 public boolean onTouch(View v, MotionEvent event) { 496 // Disallow the touch request for parent scroll on touch of child view 497 v.getParent().requestDisallowInterceptTouchEvent(true); 498 return false; 499 } 500 }); 501 if (result.operationSuccess) { 502 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_count_to_events), result.modelsCountBefore)); 503 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_deleted_to_events), result.deletedModelsAffectedRows)); 504 for (String modelString : result.modelInsertionsM4) { 505 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_inserted_to_events), M1M4TN, modelString)); 506 } 507 for (String modelString2 : result.modelInsertionsM2) { 508 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_inserted_to_events), M1M2TN, modelString2)); 509 } 510 for (String modelString3 : result.modelInsertionsM3) { 511 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_inserted_to_events), M1M3TN, modelString3)); 512 } 513 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_count_to_events), result.modelsCountAfter)); 514 } else { 515 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 516 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 517 } else { 518 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t4_error_event)); 519 } 520 } 521 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 522 reloadTableExpandedList(); 523 reloadStatus(); 524 } 525 } 526 527 528 } 529 530 class InsertRandomResults { 531 List\u0026lt;String\u0026gt; modelInsertionsM4; 532 List\u0026lt;String\u0026gt; modelInsertionsM2; 533 List\u0026lt;String\u0026gt; modelInsertionsM3; 534 long deletedModelsAffectedRows; 535 long modelsCountBefore; 536 long modelsCountAfter; 537 boolean operationSuccess; 538 int dbVersion; 539 540 public InsertRandomResults(List\u0026lt;String\u0026gt; modelInsertionsM4, List\u0026lt;String\u0026gt; modelInsertionsM2, 541 List\u0026lt;String\u0026gt; modelInsertionsM3, long deletedModelsAffectedRows, 542 long modelsCountBefore, long modelsCountAfter, boolean opSuccess, 543 int dbVersion) { 544 this.modelInsertionsM4 = modelInsertionsM4; 545 this.modelInsertionsM2 = modelInsertionsM2; 546 this.modelInsertionsM3 = modelInsertionsM3; 547 this.deletedModelsAffectedRows = deletedModelsAffectedRows; 548 this.modelsCountBefore = modelsCountBefore; 549 this.modelsCountAfter = modelsCountAfter; 550 this.operationSuccess = opSuccess; 551 this.dbVersion = dbVersion; 552 } 553 } 554 555 static final String ERR_DELETION = \u0026#34;Lesson5tab4DBDeleteError, see exception details!\u0026#34;; 556 557 class DeleteDatabaseAsync extends AsyncTask\u0026lt;Long, Long, Integer\u0026gt; { 558 ProgressDialog dialog; 559 560 final int DELETED = 1; 561 final int NOT_DELETED = 2; 562 final int ERROR = 3; 563 564 @Override 565 protected void onPreExecute() { 566 dialog = ProgressDialog.show( 567 getLessonActivity(), 568 getString(R.string._l5_t4_running_requested_operation_pg_title), 569 getString(R.string._l5_t4_running_requested_operation_pg_body) 570 ); 571 dialog.setCancelable(false); 572 } 573 574 @Override 575 protected Integer doInBackground(Long... strings) { 576 try { 577 boolean deleted = getDatabase().deleteDatabase(); 578 getSf().setDatabaseDeletedManually(true); 579 getSf().setDatabaseCreated(false); 580 getSf().setCurrentMigDBVersion(-1); 581 if(deleted) 582 return DELETED; 583 else 584 return NOT_DELETED; 585 } catch (Exception e) { 586 Log.e(MigrationDBv4.LTAG, ERR_DELETION, e); 587 if (e instanceof KittyRuntimeException) { 588 if (((KittyRuntimeException) e).getNestedException() != null) { 589 Log.e(MigrationDBv4.LTAG, ERR_DELETION, ((KittyRuntimeException) e).getNestedException()); 590 } 591 } 592 return ERROR; 593 } 594 } 595 596 @Override 597 protected void onPostExecute(Integer result) { 598 dialog.cancel(); 599 if (eventsListView != null) { 600 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 601 eventsListView.setOnTouchListener(new View.OnTouchListener() { 602 603 // Setting on Touch Listener for handling the touch inside ScrollView 604 @Override 605 public boolean onTouch(View v, MotionEvent event) { 606 // Disallow the touch request for parent scroll on touch of child view 607 v.getParent().requestDisallowInterceptTouchEvent(true); 608 return false; 609 } 610 }); 611 switch (result) { 612 case DELETED: 613 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_delete_db_success))); 614 break; 615 case NOT_DELETED: 616 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_delete_db_fail))); 617 break; 618 case ERROR: 619 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t4_error_event))); 620 break; 621 } 622 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 623 reloadTableExpandedList(); 624 reloadStatus(); 625 } 626 } 627 } 628 629 // Expanded list 630 MigAdapter migAdapter; 631 632 @Override 633 protected void setUpExpandedList(View rootView, int eventsId, int eventsTitleId, int eventTitleStringPattern) { 634 events = (ListView) rootView.findViewById(eventsId); 635 expandedTitle = (TextView) rootView.findViewById(eventsTitleId); 636 expandeddTitlePattern = getString(eventTitleStringPattern); 637 638 expandedTitle.setText(format(expandeddTitlePattern, 0)); 639 640 if(expandedAdapter == null) { 641 migAdapter = new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;()); 642 } 643 644 events.setAdapter(migAdapter); 645 events.setOnTouchListener(new View.OnTouchListener() { 646 647 // Setting on Touch Listener for handling the touch inside ScrollView 648 @Override 649 public boolean onTouch(View v, MotionEvent event) { 650 // Disallow the touch request for parent scroll on touch of child view 651 v.getParent().requestDisallowInterceptTouchEvent(true); 652 return false; 653 } 654 }); 655 } 656 657 // Fab menu section 658 659 @Override 660 public View.OnClickListener helpFabMenuAction() { 661 return new View.OnClickListener() { 662 663 /** 664* Called when a view has been clicked. 665* 666* @param v The view that was clicked. 667*/ 668 @Override 669 public void onClick(View v) { 670 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T4_TUTORIAL); 671 } 672 }; 673 } 674 675 @Override 676 public View.OnClickListener sourceFabMenuAction() { 677 return new View.OnClickListener() { 678 679 /** 680* Called when a view has been clicked. 681* 682* @param v The view that was clicked. 683*/ 684 @Override 685 public void onClick(View v) { 686 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T4_SOURCE); 687 } 688 }; 689 } 690 691 @Override 692 public View.OnClickListener schemaFabMenuAction() { 693 return new View.OnClickListener() { 694 695 /** 696* Called when a view has been clicked. 697* 698* @param v The view that was clicked. 699*/ 700 @Override 701 public void onClick(View v) { 702 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T4_SCHEMA); 703 } 704 }; 705 } 706} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/overview/l5t1_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM mig v.1 implementation sources   Click to view MigrationDBv1.class:  1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 databaseName = \u0026#34;mig\u0026#34;, 5 databaseVersion = 1, 6 logTag = MigrationDBv1.LTAG, 7 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.migrations.migv1\u0026#34;} 8) 9@KITTY_DATABASE_REGISTRY( 10 domainModels = {net.akaish.kittyormdemo.sqlite.migrations.migv1.MigOneModel.class} 11) 12public class MigrationDBv1 extends KittyDatabase { 13 14 public static final String LTAG = \u0026#34;MIGv1\u0026#34;; 15 16 /** 17* KittyORM main database class that represents bootstrap and holder for all related with database 18* components. 19* 20* @param ctx 21*/ 22 public MigrationDBv1(Context ctx) { 23 super(ctx); 24 } 25} \n  Click to view MigOneModel.class:  1@KITTY_TABLE( 2 tableName = \u0026#34;mig_one\u0026#34; 3) 4public class MigOneModel extends KittyModel{ 5 @KITTY_COLUMN( 6 columnOrder = 0, 7 isIPK = true) 8 public Long id; 9 10 @KITTY_COLUMN( 11 columnOrder = 1 12 ) 13 @NOT_NULL 14 public String creationDate; 15 16 @KITTY_COLUMN( 17 columnOrder = 2 18 ) 19 public Integer someInteger; 20 21 public String toString() { 22 return new StringBuilder(64) 23 .append(\u0026#34;[ id = \u0026#34;) 24 .append(id) 25 .append(\u0026#34; ; creationDate = \u0026#34;) 26 .append(creationDate) 27 .append(\u0026#34; ; someInteger = \u0026#34;) 28 .append(someInteger) 29 .append(\u0026#34; ]\u0026#34;).toString(); 30 } 31} \n  Fragment and utility code used in this tutorial   Click to view MigV1RandomModelFactory.class:  1public class MigV1RandomModelFactory { 2 final Context ctx; 3 final Random rnd; 4 5 public MigV1RandomModelFactory(Context ctx) { 6 this.ctx = ctx; 7 this.rnd = new Random(); 8 } 9 10 public MigOneModel newM1RndModel() { 11 MigOneModel model = new MigOneModel(); 12 model.creationDate = new Date(System.currentTimeMillis()).toString(); 13 model.someInteger = rnd.nextInt(); 14 return model; 15 } 16} \n  Click to view Lesson5Tab1InitialDatabase.class:  1public class Lesson5Tab1InitialDatabase extends Lesson5BaseFragment { 2 3 private MigrationDBv1 databaseV1; 4 private SharedPreferencesMigDB sf; 5 6 private Button insertRandomButton; 7 private Button clearTableButton; 8 private Button deleteDatabaseButton; 9 10 private ListView eventsListView; 11 12 private TextView statusTV; 13 14 private MigDatabaseState mdbState; 15 16 final static int DB_IMPLEMENTATION_VERSION = 1; 17 final static int TABLE_AMOUNT = 1; 18 19 public Lesson5Tab1InitialDatabase() {} 20 21 @Override 22 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 23 View rootView = inflater.inflate(R.layout.lesson5_tab1_initial, container, false); 24 25 insertRandomButton = rootView.findViewById(R.id.l5_t1_go_button); 26 clearTableButton = rootView.findViewById(R.id.l5_t1_clear_button); 27 deleteDatabaseButton = rootView.findViewById(R.id.l5_t1_delete_database_button); 28 29 eventsListView = rootView.findViewById(R.id.l5_t1_actions); 30 31 insertRandomButton.setOnClickListener(new View.OnClickListener() { 32 @Override 33 public void onClick(View v) { 34 insert25RND(); 35 } 36 }); 37 38 clearTableButton.setOnClickListener(new View.OnClickListener() { 39 @Override 40 public void onClick(View v) { 41 clearTable(); 42 } 43 }); 44 45 deleteDatabaseButton.setOnClickListener(new View.OnClickListener() { 46 @Override 47 public void onClick(View v) { 48 deleteDatabase(); 49 } 50 }); 51 52 statusTV = rootView.findViewById(R.id.l5_t1_status); 53 54 55 setUpExpandedList( 56 rootView, 57 R.id._l5_t1_expanded_panel_list, 58 R.id._l5_t1_expanded_panel_text, 59 R.string._l5_t1_expanded_text_pattern 60 ); 61 62 reloadTableExpandedList(); 63 reloadStatus(); 64 return rootView; 65 } 66 67 public MigDatabaseState getMdbState(Context context, int implVersion, String[] tables) { 68 if(mdbState != null) return mdbState; 69 mdbState = new MigDatabaseState(implVersion, tables, context, getSf()); 70 return mdbState; 71 } 72 73 public void reloadStatus() { 74 if(statusTV != null) { 75 statusTV.setText(getMdbState(getContext(), DB_IMPLEMENTATION_VERSION, new String[] {M1M1TN}).toString()); 76 } 77 } 78 79 80 @Override 81 public void onVisible() { 82 reloadTableExpandedList(); 83 reloadStatus(); 84 } 85 86 private SharedPreferencesMigDB getSf() { 87 if(sf != null) return sf; 88 sf = new SharedPreferencesMigDB(getContext()); 89 return sf; 90 } 91 92 private MigrationDBv1 getDatabase() { 93 if(databaseV1 != null) return databaseV1; 94 databaseV1 = new MigrationDBv1(getContext()); 95 return databaseV1; 96 } 97 98 private void insert25RND() { 99 new InsertRandomAsync().execute(0l); 100 } 101 102 private void clearTable() { 103 new WipeAsync().execute(0l); 104 } 105 106 private void deleteDatabase() { 107 new DeleteDatabaseAsync().execute(0l); 108 } 109 110 private void reloadTableExpandedList() { 111 new ReloadTableAsync().execute(0l); 112 } 113 114 @Override 115 protected int snackbarMessageResource() { 116 return R.string._l5_t1_snackbar_message; 117 } 118 119 120 121 // Asyncs 122 123 class ReloadTableAsync extends AsyncTask\u0026lt;Long, Long, List\u0026lt;String\u0026gt;\u0026gt; { 124 125 @Override 126 protected List\u0026lt;String\u0026gt; doInBackground(Long... params) { 127 LinkedList\u0026lt;String\u0026gt; toListView = new LinkedList\u0026lt;\u0026gt;(); 128 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 129 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 130 List\u0026lt;MigOneModel\u0026gt; m1Models = mapper.findAll(); 131 mapper.close(); 132 if(m1Models == null) { 133 toListView.addLast(format(getContext().getString(R.string._l5_t1_m1_db), 0)); 134 return toListView; 135 } else { 136 toListView.addLast(format(getContext().getString(R.string._l5_t1_m1_db), m1Models.size())); 137 Iterator\u0026lt;MigOneModel\u0026gt; mI = m1Models.iterator(); 138 while (mI.hasNext()) { 139 toListView.addLast(mI.next().toString()); 140 } 141 return toListView; 142 } 143 } else { 144 if(!getSf().isDatabaseCreated() || getSf().isDatabaseDeletedManually()) { 145 toListView.addLast(getString(R.string._l5_t1_m1_db_doesnt_exist)); 146 return toListView; 147 } else { 148 toListView.addLast(format(getString(R.string._l5_t1_m1_db_has_different_version), getSf().currentMigDBVersion())); 149 return toListView; 150 } 151 } 152 } 153 154 @Override 155 protected void onPostExecute(List\u0026lt;String\u0026gt; result) { 156 int tableAmount = TABLE_AMOUNT; 157 if(getSf().isDatabaseDeletedManually() || !getSf().isDatabaseCreated() || getSf().currentMigDBVersion() != DB_IMPLEMENTATION_VERSION) 158 tableAmount = 0; 159 if(result != null) { 160 events.setAdapter(new MigAdapter(getContext(), result)); 161 int recordsAmount = result.size() - TABLE_AMOUNT; 162 if(tableAmount == 0) 163 recordsAmount = 0; 164 expandedTitle.setText(format(expandeddTitlePattern, recordsAmount, tableAmount)); 165 } else { 166 events.setAdapter(new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 167 expandedTitle.setText(format(expandeddTitlePattern, 0, tableAmount)); 168 } 169 } 170 } 171 172 private static final String ERR_STRING_WIPE = \u0026#34;Lesson5tab1WipeDataError, see exception details!\u0026#34;; 173 174 class WipeAsync extends AsyncTask\u0026lt;Long, Long, WipeAsyncResult\u0026gt; { 175 176 ProgressDialog dialog; 177 178 @Override 179 protected void onPreExecute() { 180 dialog = ProgressDialog.show( 181 getLessonActivity(), 182 getString(R.string._l5_t1_running_requested_operation_pg_title), 183 getString(R.string._l5_t1_running_requested_operation_pg_body) 184 ); 185 dialog.setCancelable(false); 186 } 187 188 @Override 189 protected WipeAsyncResult doInBackground(Long... params) { 190 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 191 try { 192 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 193 long recordsCount = mapper.countAll(); 194 long affected = mapper.deleteAll(); 195 mapper.close(); 196 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, affected, recordsCount); 197 } catch (Exception e) { 198 Log.e(MigrationDBv1.LTAG, ERR_STRING_WIPE, e); 199 if (e instanceof KittyRuntimeException) { 200 if (((KittyRuntimeException) e).getNestedException() != null) { 201 Log.e(MigrationDBv1.LTAG, ERR_STRING_WIPE, ((KittyRuntimeException) e).getNestedException()); 202 } 203 } 204 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, -1l, -1l); 205 } 206 } else { 207 return new WipeAsyncResult( 208 getSf().isDatabaseCreated(), 209 getSf().isDatabaseDeletedManually(), 210 getSf().currentMigDBVersion(), 211 -1l, -1l); 212 } 213 } 214 215 @Override 216 protected void onPostExecute(WipeAsyncResult result) { 217 dialog.cancel(); 218 219 if (eventsListView != null) { 220 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 221 eventsListView.setOnTouchListener(new View.OnTouchListener() { 222 223 // Setting on Touch Listener for handling the touch inside ScrollView 224 @Override 225 public boolean onTouch(View v, MotionEvent event) { 226 // Disallow the touch request for parent scroll on touch of child view 227 v.getParent().requestDisallowInterceptTouchEvent(true); 228 return false; 229 } 230 }); 231 232 if(!result.isCreated) { 233 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_not_existing)); 234 } else if (result.isDeleted) { 235 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_deleted)); 236 } else if (result.dbVersion != DB_IMPLEMENTATION_VERSION) { 237 if(result.dbVersion \u0026lt; DB_IMPLEMENTATION_VERSION) { 238 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_lower), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 239 } else { 240 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 241 } 242 } else if (result.recordsCount \u0026gt; -1 \u0026amp;\u0026amp; result.affectedRows \u0026gt; -1) { 243 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_count_to_events), result.recordsCount)); 244 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_deleted_to_events), result.affectedRows)); 245 } else { 246 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t1_error_event)); 247 } 248 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 249 reloadTableExpandedList(); 250 reloadStatus(); 251 } 252 } 253 } 254 255 class WipeAsyncResult { 256 boolean isCreated; 257 boolean isDeleted; 258 int dbVersion; 259 Long affectedRows; 260 Long recordsCount; 261 262 public WipeAsyncResult(boolean isCreated, boolean isDeleted, int dbVersion, 263 Long affectedRows, Long recordsCount) { 264 this.isCreated = isCreated; 265 this.isDeleted = isDeleted; 266 this.dbVersion = dbVersion; 267 this.affectedRows = affectedRows; 268 this.recordsCount = recordsCount; 269 } 270 } 271 272 static final int INSERT_AMOUNT = 25; 273 274 static final String ERR_INSERT_RND = \u0026#34;Lesson5tab1InsertRNDDataError, see exception details!\u0026#34;; 275 276 class InsertRandomAsync extends AsyncTask\u0026lt;Long, Long, InsertRandomResults\u0026gt; { 277 ProgressDialog dialog; 278 279 @Override 280 protected void onPreExecute() { 281 dialog = ProgressDialog.show( 282 getLessonActivity(), 283 getString(R.string._l5_t1_running_requested_operation_pg_title), 284 getString(R.string._l5_t1_running_requested_operation_pg_body) 285 ); 286 dialog.setCancelable(false); 287 } 288 289 @Override 290 protected InsertRandomResults doInBackground(Long... strings) { 291 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 292 return new InsertRandomResults( 293 null, 294 -1l, 295 -1l, 296 -1l, 297 false, 298 getSf().currentMigDBVersion() 299 ); 300 } else { 301 try { 302 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 303 long recordsCount = mapper.countAll(); 304 long affected = mapper.deleteAll(); 305 LinkedList\u0026lt;MigOneModel\u0026gt; modelsToInsert = new LinkedList\u0026lt;\u0026gt;(); 306 getSf().setDatabaseCreated(true); 307 getSf().setCurrentMigDBVersion(DB_IMPLEMENTATION_VERSION); 308 getSf().setDatabaseDeletedManually(false); 309 MigV1RandomModelFactory factory = new MigV1RandomModelFactory(getContext()); 310 for (int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 311 MigOneModel m = factory.newM1RndModel(); 312 modelsToInsert.addLast(m); 313 } 314 mapper.insertInTransaction(modelsToInsert); 315 List\u0026lt;MigOneModel\u0026gt; models = mapper.findAll(); 316 long recordsCountAfter = mapper.countAll(); 317 mapper.close(); 318 Iterator\u0026lt;MigOneModel\u0026gt; mI = models.iterator(); 319 LinkedList\u0026lt;String\u0026gt; out = new LinkedList\u0026lt;\u0026gt;(); 320 while (mI.hasNext()) { 321 out.addLast(mI.next().toString()); 322 } 323 return new InsertRandomResults(out, affected, recordsCount, recordsCountAfter, true, getSf().currentMigDBVersion()); 324 } catch (Exception e) { 325 Log.e(MigrationDBv1.LTAG, ERR_INSERT_RND, e); 326 if (e instanceof KittyRuntimeException) { 327 if (((KittyRuntimeException) e).getNestedException() != null) { 328 Log.e(MigrationDBv1.LTAG, ERR_INSERT_RND, ((KittyRuntimeException) e).getNestedException()); 329 } 330 } 331 return new InsertRandomResults( 332 null, 333 -1l, 334 -1l, 335 -1l, 336 false, 337 getSf().currentMigDBVersion() 338 ); 339 } 340 } 341 } 342 343 @Override 344 protected void onPostExecute(InsertRandomResults result) { 345 dialog.cancel(); 346 if (eventsListView != null) { 347 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 348 eventsListView.setOnTouchListener(new View.OnTouchListener() { 349 350 // Setting on Touch Listener for handling the touch inside ScrollView 351 @Override 352 public boolean onTouch(View v, MotionEvent event) { 353 // Disallow the touch request for parent scroll on touch of child view 354 v.getParent().requestDisallowInterceptTouchEvent(true); 355 return false; 356 } 357 }); 358 if (result.operationSuccess) { 359 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_count_to_events), result.modelsCountBefore)); 360 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_deleted_to_events), result.deletedModelsAffectedRows)); 361 for (String modelString : result.modelInsertions) { 362 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_inserted_to_events), M1M1TN, modelString)); 363 } 364 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_count_to_events), result.modelsCountAfter)); 365 } else { 366 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 367 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 368 } else { 369 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t1_error_event)); 370 } 371 } 372 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 373 reloadTableExpandedList(); 374 reloadStatus(); 375 } 376 } 377 378 379 } 380 381 class InsertRandomResults { 382 List\u0026lt;String\u0026gt; modelInsertions; 383 long deletedModelsAffectedRows; 384 long modelsCountBefore; 385 long modelsCountAfter; 386 boolean operationSuccess; 387 int dbVersion; 388 389 public InsertRandomResults(List\u0026lt;String\u0026gt; modelInsertions, long deletedModelsAffectedRows, 390 long modelsCountBefore, long modelsCountAfter, boolean opSuccess, 391 int dbVersion) { 392 this.modelInsertions = modelInsertions; 393 this.deletedModelsAffectedRows = deletedModelsAffectedRows; 394 this.modelsCountBefore = modelsCountBefore; 395 this.modelsCountAfter = modelsCountAfter; 396 this.operationSuccess = opSuccess; 397 this.dbVersion = dbVersion; 398 } 399 } 400 401 static final String ERR_DELETION = \u0026#34;Lesson5tab1DBDeleteError, see exception details!\u0026#34;; 402 403 class DeleteDatabaseAsync extends AsyncTask\u0026lt;Long, Long, Integer\u0026gt; { 404 ProgressDialog dialog; 405 406 final int DELETED = 1; 407 final int NOT_DELETED = 2; 408 final int ERROR = 3; 409 410 @Override 411 protected void onPreExecute() { 412 dialog = ProgressDialog.show( 413 getLessonActivity(), 414 getString(R.string._l5_t1_running_requested_operation_pg_title), 415 getString(R.string._l5_t1_running_requested_operation_pg_body) 416 ); 417 dialog.setCancelable(false); 418 } 419 420 @Override 421 protected Integer doInBackground(Long... strings) { 422 try { 423 boolean deleted = getDatabase().deleteDatabase(); 424 getSf().setDatabaseDeletedManually(true); 425 getSf().setDatabaseCreated(false); 426 getSf().setCurrentMigDBVersion(-1); 427 if(deleted) 428 return DELETED; 429 else 430 return NOT_DELETED; 431 } catch (Exception e) { 432 Log.e(MigrationDBv1.LTAG, ERR_DELETION, e); 433 if (e instanceof KittyRuntimeException) { 434 if (((KittyRuntimeException) e).getNestedException() != null) { 435 Log.e(MigrationDBv1.LTAG, ERR_DELETION, ((KittyRuntimeException) e).getNestedException()); 436 } 437 } 438 return ERROR; 439 } 440 } 441 442 @Override 443 protected void onPostExecute(Integer result) { 444 dialog.cancel(); 445 if (eventsListView != null) { 446 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 447 eventsListView.setOnTouchListener(new View.OnTouchListener() { 448 449 // Setting on Touch Listener for handling the touch inside ScrollView 450 @Override 451 public boolean onTouch(View v, MotionEvent event) { 452 // Disallow the touch request for parent scroll on touch of child view 453 v.getParent().requestDisallowInterceptTouchEvent(true); 454 return false; 455 } 456 }); 457 switch (result) { 458 case DELETED: 459 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_delete_db_success))); 460 break; 461 case NOT_DELETED: 462 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_delete_db_fail))); 463 break; 464 case ERROR: 465 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_error_event))); 466 break; 467 } 468 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 469 reloadTableExpandedList(); 470 reloadStatus(); 471 } 472 } 473 } 474 475 // Expanded list 476 MigAdapter migAdapter; 477 478 @Override 479 protected void setUpExpandedList(View rootView, int eventsId, int eventsTitleId, int eventTitleStringPattern) { 480 events = (ListView) rootView.findViewById(eventsId); 481 expandedTitle = (TextView) rootView.findViewById(eventsTitleId); 482 expandeddTitlePattern = getString(eventTitleStringPattern); 483 484 expandedTitle.setText(format(expandeddTitlePattern, 0)); 485 486 if(expandedAdapter == null) { 487 migAdapter = new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;()); 488 } 489 490 events.setAdapter(migAdapter); 491 events.setOnTouchListener(new View.OnTouchListener() { 492 493 // Setting on Touch Listener for handling the touch inside ScrollView 494 @Override 495 public boolean onTouch(View v, MotionEvent event) { 496 // Disallow the touch request for parent scroll on touch of child view 497 v.getParent().requestDisallowInterceptTouchEvent(true); 498 return false; 499 } 500 }); 501 } 502 503 // Fab menu section 504 505 @Override 506 public View.OnClickListener helpFabMenuAction() { 507 return new View.OnClickListener() { 508 509 /** 510* Called when a view has been clicked. 511* 512* @param v The view that was clicked. 513*/ 514 @Override 515 public void onClick(View v) { 516 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T1_TUTORIAL); 517 } 518 }; 519 } 520 521 @Override 522 public View.OnClickListener sourceFabMenuAction() { 523 return new View.OnClickListener() { 524 525 /** 526* Called when a view has been clicked. 527* 528* @param v The view that was clicked. 529*/ 530 @Override 531 public void onClick(View v) { 532 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T1_SOURCE); 533 } 534 }; 535 } 536 537 @Override 538 public View.OnClickListener schemaFabMenuAction() { 539 return new View.OnClickListener() { 540 541 /** 542* Called when a view has been clicked. 543* 544* @param v The view that was clicked. 545*/ 546 @Override 547 public void onClick(View v) { 548 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T1_SCHEMA); 549 } 550 }; 551 } 552} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/simplemigrations/l5t3_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " KittyORM mig v.3 implementation sources   Click to view MigrationDBv3.class:  1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 isKittyDexUtilLoggingEnabled = false, 5 logTag = MigrationDBv3.LTAG, 6 databaseName = \u0026#34;mig\u0026#34;, 7 databaseVersion = 3, 8 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.migrations.migv3\u0026#34;} 9) 10@KITTY_DATABASE_REGISTRY( 11 domainModels = { 12 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigOneModel.class, 13 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigTwoModel.class, 14 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigThreeModel.class 15 } 16) 17@KITTY_DATABASE_HELPER( 18 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.USE_SIMPLE_MIGRATIONS 19) 20public class MigrationDBv3 extends KittyDatabase { 21 22 public static final String LTAG = \u0026#34;MIGv3\u0026#34;; 23 /** 24* KittyORM main database class that represents bootstrap and holder for all related with database 25* components. 26* 27* @param ctx 28*/ 29 public MigrationDBv3(Context ctx) { 30 super(ctx); 31 } 32} \n  Click to view MigOneModel.class:  1@KITTY_TABLE( 2 tableName = \u0026#34;mig_one\u0026#34; 3) 4public class MigOneModel extends KittyModel { 5 @KITTY_COLUMN( 6 columnOrder = 0, 7 isIPK = true) 8 public Long id; 9 10 @KITTY_COLUMN( 11 columnOrder = 1 12 ) 13 @NOT_NULL 14 @DEFAULT(predefinedLiteralValue = LiteralValues.CURRENT_DATE) 15 public String creationDate; 16 17 @KITTY_COLUMN( 18 columnOrder = 2 19 ) 20 @DEFAULT(signedInteger = 228) 21 @ONE_COLUMN_INDEX(indexName = \u0026#34;m1_di_index\u0026#34;) 22 public Integer defaultInteger; 23 24 public String toString() { 25 return new StringBuilder(64) 26 .append(\u0026#34;[ id = \u0026#34;) 27 .append(id) 28 .append(\u0026#34; ; creationDate = \u0026#34;) 29 .append(creationDate) 30 .append(\u0026#34; ; someInteger = \u0026#34;) 31 .append(defaultInteger) 32 .append(\u0026#34; ]\u0026#34;).toString(); 33 } 34} \n  Click to view MigTwoModel.class:  1@KITTY_TABLE( 2 tableName = \u0026#34;mig_two\u0026#34; 3) 4public class MigTwoModel extends KittyModel { 5 6 @KITTY_COLUMN( 7 columnOrder = 0, 8 isIPK = true 9 ) 10 public Long id; 11 12 @KITTY_COLUMN( 13 columnOrder = 1 14 ) 15 @FOREIGN_KEY( 16 reference = @FOREIGN_KEY_REFERENCE( 17 foreignTableName = \u0026#34;mig_one\u0026#34;, 18 foreignTableColumns = {\u0026#34;id\u0026#34;}, 19 onUpdate = OnUpdateDeleteActions.CASCADE, 20 onDelete = OnUpdateDeleteActions.CASCADE 21 ) 22 ) 23 public Long migOneReference; 24 25 @KITTY_COLUMN(columnOrder = 2) 26 public Animals someAnimal; 27 28 @KITTY_COLUMN( 29 columnOrder = 3, 30 columnAffinity = TypeAffinities.TEXT 31 ) 32 @KITTY_COLUMN_SERIALIZATION 33 public AnimalSounds someAnimalSound; 34 35 String someAnimalSoundSerialize() { 36 if(someAnimalSound == null) return null; 37 return new GsonBuilder().create().toJson(someAnimalSound); 38 } 39 40 AnimalSounds someAnimalSoundDeserialize(String cvData) { 41 if(cvData == null) return null; 42 if(cvData.length() == 0) return null; 43 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 44 } 45 46 @Override 47 public String toString() { 48 return new StringBuilder(64) 49 .append(\u0026#34;[ id = \u0026#34;) 50 .append(id) 51 .append(\u0026#34; ; migOneReference = \u0026#34;) 52 .append(migOneReference) 53 .append(\u0026#34; ; someAnimal = \u0026#34;) 54 .append(someAnimal) 55 .append(\u0026#34; ; someAnimalSound = \u0026#34;) 56 .append(someAnimalSoundSerialize()) 57 .append(\u0026#34; ] \u0026#34;).toString(); 58 } 59} \n  Click to view MigThreeModel.class:  1@KITTY_TABLE(tableName = \u0026#34;mig_three\u0026#34;) 2public class MigThreeModel extends KittyModel { 3 4 @KITTY_COLUMN( 5 columnOrder = 0, 6 isIPK = true 7 ) 8 public Long id; 9 10 @KITTY_COLUMN( 11 columnOrder = 1 12 ) 13 @NOT_NULL 14 @DEFAULT( 15 literalValue = \u0026#34;\\\u0026#39;Something random\\\u0026#39;\u0026#34; 16 ) 17 public String someValue; 18 19 public String toString() { 20 return new StringBuilder(32) 21 .append(\u0026#34;[ id = \u0026#34;) 22 .append(id) 23 .append(\u0026#34; ; someValue = \u0026#34;) 24 .append(someValue) 25 .append(\u0026#34; ]\u0026#34;).toString(); 26 } 27} \n  Fragment and utility code used in this tutorial   Click to view MigV3RandomModelFactory.class:  1public class MigV3RandomModelFactory { 2 final Context context; 3 final Random rnd; 4 5 private final SparseArray\u0026lt;String\u0026gt; randomAnimalSays = new SparseArray\u0026lt;\u0026gt;(); 6 private final SparseArray\u0026lt;String\u0026gt; randomAnimalLocalizedName = new SparseArray\u0026lt;\u0026gt;(); 7 8 public MigV3RandomModelFactory(Context ctx) { 9 this.context = ctx; 10 this.rnd = new Random(); 11 12 // Lol, getContext().getString() method is fucking slow, calling for each new random model this method twice causes 55% of all execution time of generating new random model (!) 13 // Right now getting those string causes only 14% of execution time 14 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.BEAR))); 15 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.CAT))); 16 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.DOG))); 17 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.GOAT))); 18 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.LION), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.LION))); 19 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.SHEEP))); 20 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.TIGER))); 21 randomAnimalSays.append(Animals.getLocalizedAnimalSaysResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalSaysResource(Animals.WOLF))); 22 23 24 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.BEAR), context.getString(Animals.getLocalizedAnimalNameResource(Animals.BEAR))); 25 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.CAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.CAT))); 26 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.DOG), context.getString(Animals.getLocalizedAnimalNameResource(Animals.DOG))); 27 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.GOAT), context.getString(Animals.getLocalizedAnimalNameResource(Animals.GOAT))); 28 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.LION), context.getString(Animals.getLocalizedAnimalNameResource(Animals.LION))); 29 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.SHEEP), context.getString(Animals.getLocalizedAnimalNameResource(Animals.SHEEP))); 30 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.TIGER), context.getString(Animals.getLocalizedAnimalNameResource(Animals.TIGER))); 31 randomAnimalLocalizedName.append(Animals.getLocalizedAnimalNameResource(Animals.WOLF), context.getString(Animals.getLocalizedAnimalNameResource(Animals.WOLF))); 32 } 33 34 public MigOneModel newM1RndModel() { 35 return newM1RndModel(rnd.nextBoolean(), rnd.nextBoolean()); 36 } 37 38 public MigOneModel newM1RndModel(boolean setCDDefault, boolean setDefaultInteger) { 39 MigOneModel model = new MigOneModel(); 40 if(setCDDefault) 41 model.setFieldExclusion(\u0026#34;creationDate\u0026#34;); 42 else 43 model.creationDate = new Date(System.currentTimeMillis()).toString(); 44 if(setCDDefault) 45 model.setFieldExclusion(\u0026#34;defaultInteger\u0026#34;); 46 else 47 model.defaultInteger = rnd.nextInt(); 48 return model; 49 } 50 51 public MigTwoModel newM2RndModel(ArrayList\u0026lt;MigOneModel\u0026gt; models) { 52 if(models == null) 53 throw new IllegalArgumentException(\u0026#34;M3RMF#newM2RndModel bad model collection provided!\u0026#34;); 54 if(models.size() == 0) 55 throw new IllegalArgumentException(\u0026#34;M3RMF#newM2RndModel bad model collection provided!\u0026#34;); 56 int mlSize = models.size(); 57 return newM2RndModel(models.get(rnd.nextInt(mlSize)).id); 58 } 59 60 public MigTwoModel newM2RndModel(Long migOneReference) { 61 if(migOneReference == null) 62 throw new IllegalArgumentException(\u0026#34;M3RMF#newM2RndModel bad reference id provided!\u0026#34;); 63 MigTwoModel model = new MigTwoModel(); 64 model.someAnimal = Animals.rndAnimal(rnd); 65 model.migOneReference = migOneReference; 66 AnimalSounds animalSounds = new AnimalSounds(); 67 animalSounds.animalName = randomAnimalLocalizedName.get(Animals.getLocalizedAnimalNameResource(model.someAnimal)); 68 animalSounds.animalSounds = randomAnimalSays.get(Animals.getLocalizedAnimalSaysResource(model.someAnimal)); 69 model.someAnimalSound = animalSounds; 70 return model; 71 } 72 73 static final String[] M3_SOME_VALUES = {\u0026#34;One\u0026#34;, \u0026#34;Apple\u0026#34;, \u0026#34;Wolf\u0026#34;, \u0026#34;Plane\u0026#34;, \u0026#34;Name\u0026#34;, \u0026#34;Fear of being alone\u0026#34;, \u0026#34;Despair\u0026#34;, \u0026#34;Death\u0026#34;, \u0026#34;Do not look for meaning where it is not\u0026#34;}; 74 75 public MigThreeModel newM3RndModel() { 76 return newM3RndModel(rnd.nextBoolean()); 77 } 78 79 public MigThreeModel newM3RndModel(boolean setDefaultValue) { 80 MigThreeModel model = new MigThreeModel(); 81 if(setDefaultValue) 82 model.setFieldExclusion(\u0026#34;someValue\u0026#34;); 83 else 84 model.someValue = M3_SOME_VALUES[rnd.nextInt(M3_SOME_VALUES.length)]; 85 return model; 86 } 87} \n  Click to view Lesson5Tab3AutogenMigration.class:  1public class Lesson5Tab3AutogenMigration extends Lesson5BaseFragment { 2 3 private MigrationDBv3 databaseV3; 4 private SharedPreferencesMigDB sf; 5 6 private Button insertRandomButton; 7 private Button clearTableButton; 8 private Button deleteDatabaseButton; 9 10 private ListView eventsListView; 11 12 private TextView statusTV; 13 14 private MigDatabaseState mdbState; 15 16 final static int DB_IMPLEMENTATION_VERSION = 3; 17 final static int TABLE_AMOUNT = 3; 18 19 public Lesson5Tab3AutogenMigration() {} 20 21 @Override 22 public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { 23 View rootView = inflater.inflate(R.layout.lesson5_tab3_auto_migration, container, false); 24 25 insertRandomButton = rootView.findViewById(R.id.l5_t3_go_button); 26 clearTableButton = rootView.findViewById(R.id.l5_t3_clear_button); 27 deleteDatabaseButton = rootView.findViewById(R.id.l5_t3_delete_database_button); 28 29 eventsListView = rootView.findViewById(R.id.l5_t3_actions); 30 31 insertRandomButton.setOnClickListener(new View.OnClickListener() { 32 @Override 33 public void onClick(View v) { 34 insert25RND(); 35 } 36 }); 37 38 clearTableButton.setOnClickListener(new View.OnClickListener() { 39 @Override 40 public void onClick(View v) { 41 clearTable(); 42 } 43 }); 44 45 deleteDatabaseButton.setOnClickListener(new View.OnClickListener() { 46 @Override 47 public void onClick(View v) { 48 deleteDatabase(); 49 } 50 }); 51 52 statusTV = rootView.findViewById(R.id.l5_t3_status); 53 54 55 setUpExpandedList( 56 rootView, 57 R.id._l5_t3_expanded_panel_list, 58 R.id._l5_t3_expanded_panel_text, 59 R.string._l5_t3_expanded_text_pattern 60 ); 61 62 reloadTableExpandedList(); 63 reloadStatus(); 64 return rootView; 65 } 66 67 public MigDatabaseState getMdbState(Context context, int implVersion, String[] tables) { 68 if(mdbState != null) return mdbState; 69 mdbState = new MigDatabaseState(implVersion, tables, context, getSf()); 70 return mdbState; 71 } 72 73 public void reloadStatus() { 74 if(statusTV != null) { 75 statusTV.setText(getMdbState(getContext(), DB_IMPLEMENTATION_VERSION, new String[] {M1M1TN, M1M2TN, M1M3TN}).toString()); 76 } 77 } 78 79 80 @Override 81 public void onVisible() { 82 reloadTableExpandedList(); 83 reloadStatus(); 84 } 85 86 private SharedPreferencesMigDB getSf() { 87 if(sf != null) return sf; 88 sf = new SharedPreferencesMigDB(getContext()); 89 return sf; 90 } 91 92 private MigrationDBv3 getDatabase() { 93 // retrieving existing database after upgrade -\u0026gt; downgrade would cause onUpgrade() script would be run after mapper fetching 94 databaseV3 = new MigrationDBv3(getContext()); 95 return databaseV3; 96 } 97 98 private void insert25RND() { 99 new InsertRandomAsync().execute(0l); 100 } 101 102 private void clearTable() { 103 new WipeAsync().execute(0l); 104 } 105 106 private void deleteDatabase() { 107 new DeleteDatabaseAsync().execute(0l); 108 } 109 110 private void reloadTableExpandedList() { 111 new ReloadTableAsync().execute(0l); 112 } 113 114 @Override 115 protected int snackbarMessageResource() { 116 return R.string._l5_t3_snackbar_message; 117 } 118 119 120 121 // Asyncs 122 123 class ReloadTableAsync extends AsyncTask\u0026lt;Long, Long, List\u0026lt;String\u0026gt;\u0026gt; { 124 125 @Override 126 protected List\u0026lt;String\u0026gt; doInBackground(Long... params) { 127 LinkedList\u0026lt;String\u0026gt; toListView = new LinkedList\u0026lt;\u0026gt;(); 128 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 129 // T1 130 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 131 List\u0026lt;MigOneModel\u0026gt; m1Models = mapper.findAll(); 132 mapper.close(); 133 // T2 134 KittyMapper mapperT2 = getDatabase().getMapper(MigTwoModel.class); 135 List\u0026lt;MigTwoModel\u0026gt; m2Models = mapperT2.findAll(); 136 mapper.close(); 137 // T3 138 KittyMapper mapperT3 = getDatabase().getMapper(MigThreeModel.class); 139 List\u0026lt;MigThreeModel\u0026gt; m3Models = mapperT3.findAll(); 140 mapper.close(); 141 142 if(m1Models == null) { 143 toListView.addLast(format(getContext().getString(R.string._l5_t3_m1_db), 0)); 144 } else { 145 toListView.addLast(format(getContext().getString(R.string._l5_t3_m1_db), m1Models.size())); 146 Iterator\u0026lt;MigOneModel\u0026gt; mI = m1Models.iterator(); 147 while (mI.hasNext()) { 148 toListView.addLast(mI.next().toString()); 149 } 150 } 151 if(m2Models == null) { 152 toListView.addLast(format(getContext().getString(R.string._l5_t3_m2_db), 0)); 153 } else { 154 toListView.addLast(format(getContext().getString(R.string._l5_t3_m2_db), m2Models.size())); 155 Iterator\u0026lt;MigTwoModel\u0026gt; mI = m2Models.iterator(); 156 while (mI.hasNext()) { 157 toListView.addLast(mI.next().toString()); 158 } 159 } 160 if(m3Models == null) { 161 toListView.addLast(format(getContext().getString(R.string._l5_t3_m3_db), 0)); 162 } else { 163 toListView.addLast(format(getContext().getString(R.string._l5_t3_m3_db), m2Models.size())); 164 Iterator\u0026lt;MigThreeModel\u0026gt; mI = m3Models.iterator(); 165 while (mI.hasNext()) { 166 toListView.addLast(mI.next().toString()); 167 } 168 } 169 return toListView; 170 } else { 171 if(!getSf().isDatabaseCreated() || getSf().isDatabaseDeletedManually()) { 172 toListView.addLast(getString(R.string._l5_t3_m1_db_doesnt_exist)); 173 return toListView; 174 } else { 175 toListView.addLast(format(getString(R.string._l5_t3_m1_db_has_different_version), getSf().currentMigDBVersion())); 176 return toListView; 177 } 178 } 179 } 180 181 @Override 182 protected void onPostExecute(List\u0026lt;String\u0026gt; result) { 183 int tableAmount = TABLE_AMOUNT; 184 if(getSf().isDatabaseDeletedManually() || !getSf().isDatabaseCreated() || getSf().currentMigDBVersion() != DB_IMPLEMENTATION_VERSION) 185 tableAmount = 0; 186 if(result != null) { 187 events.setAdapter(new MigAdapter(getContext(), result)); 188 int recordsAmount = result.size() - tableAmount; 189 if(tableAmount == 0) 190 recordsAmount = 0; 191 expandedTitle.setText(format(expandeddTitlePattern, recordsAmount, tableAmount)); 192 } else { 193 events.setAdapter(new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 194 expandedTitle.setText(format(expandeddTitlePattern, 0, tableAmount)); 195 } 196 } 197 } 198 199 private static final String ERR_STRING_WIPE = \u0026#34;Lesson5tab3WipeDataError, see exception details!\u0026#34;; 200 201 class WipeAsync extends AsyncTask\u0026lt;Long, Long, WipeAsyncResult\u0026gt; { 202 203 ProgressDialog dialog; 204 205 @Override 206 protected void onPreExecute() { 207 dialog = ProgressDialog.show( 208 getLessonActivity(), 209 getString(R.string._l5_t3_running_requested_operation_pg_title), 210 getString(R.string._l5_t3_running_requested_operation_pg_body) 211 ); 212 dialog.setCancelable(false); 213 } 214 215 @Override 216 protected WipeAsyncResult doInBackground(Long... params) { 217 if(getSf().isDatabaseCreated() \u0026amp;\u0026amp; !getSf().isDatabaseDeletedManually() \u0026amp;\u0026amp; getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION) { 218 try { 219 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 220 KittyMapper mapper2 = getDatabase().getMapper(MigTwoModel.class); 221 KittyMapper mapper3 = getDatabase().getMapper(MigThreeModel.class); 222 long recordsCount = mapper.countAll() + mapper2.countAll() + mapper3.countAll(); 223 long affected = mapper.deleteAll() + mapper2.deleteAll() + mapper3.deleteAll(); 224 mapper.close(); mapper2.close(); mapper3.close(); 225 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, affected, recordsCount); 226 } catch (Exception e) { 227 Log.e(MigrationDBv3.LTAG, ERR_STRING_WIPE, e); 228 if (e instanceof KittyRuntimeException) { 229 if (((KittyRuntimeException) e).getNestedException() != null) { 230 Log.e(MigrationDBv3.LTAG, ERR_STRING_WIPE, ((KittyRuntimeException) e).getNestedException()); 231 } 232 } 233 return new WipeAsyncResult(true, false, DB_IMPLEMENTATION_VERSION, -1l, -1l); 234 } 235 } else { 236 return new WipeAsyncResult( 237 getSf().isDatabaseCreated(), 238 getSf().isDatabaseDeletedManually(), 239 getSf().currentMigDBVersion(), 240 -1l, -1l); 241 } 242 } 243 244 @Override 245 protected void onPostExecute(WipeAsyncResult result) { 246 dialog.cancel(); 247 248 if (eventsListView != null) { 249 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 250 eventsListView.setOnTouchListener(new View.OnTouchListener() { 251 252 // Setting on Touch Listener for handling the touch inside ScrollView 253 @Override 254 public boolean onTouch(View v, MotionEvent event) { 255 // Disallow the touch request for parent scroll on touch of child view 256 v.getParent().requestDisallowInterceptTouchEvent(true); 257 return false; 258 } 259 }); 260 261 if(!result.isCreated) { 262 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_not_existing)); 263 } else if (result.isDeleted) { 264 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_op_deleted)); 265 } else if (result.dbVersion != DB_IMPLEMENTATION_VERSION) { 266 if(result.dbVersion \u0026lt; 1) { 267 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_lower), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 268 } else { 269 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 270 } 271 } else if (result.recordsCount \u0026gt; -1 \u0026amp;\u0026amp; result.affectedRows \u0026gt; -1) { 272 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_count_to_events), result.recordsCount)); 273 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_deleted_to_events), result.affectedRows)); 274 } else { 275 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t3_error_event)); 276 } 277 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 278 reloadTableExpandedList(); 279 reloadStatus(); 280 } 281 } 282 } 283 284 class WipeAsyncResult { 285 boolean isCreated; 286 boolean isDeleted; 287 int dbVersion; 288 Long affectedRows; 289 Long recordsCount; 290 291 public WipeAsyncResult(boolean isCreated, boolean isDeleted, int dbVersion, 292 Long affectedRows, Long recordsCount) { 293 this.isCreated = isCreated; 294 this.isDeleted = isDeleted; 295 this.dbVersion = dbVersion; 296 this.affectedRows = affectedRows; 297 this.recordsCount = recordsCount; 298 } 299 } 300 301 static final int INSERT_AMOUNT = 25; 302 static final int INSERT_FK_AMOUNT = 10; 303 304 static final String ERR_INSERT_RND = \u0026#34;Lesson5tab3InsertRNDDataError, see exception details!\u0026#34;; 305 306 class InsertRandomAsync extends AsyncTask\u0026lt;Long, Long, InsertRandomResults\u0026gt; { 307 ProgressDialog dialog; 308 309 @Override 310 protected void onPreExecute() { 311 dialog = ProgressDialog.show( 312 getLessonActivity(), 313 getString(R.string._l5_t3_running_requested_operation_pg_title), 314 getString(R.string._l5_t3_running_requested_operation_pg_body) 315 ); 316 dialog.setCancelable(false); 317 } 318 319 @Override 320 protected InsertRandomResults doInBackground(Long... strings) { 321 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 322 return new InsertRandomResults( 323 null, 324 null, 325 null, 326 -1l, 327 -1l, 328 -1l, 329 false, 330 getSf().currentMigDBVersion() 331 ); 332 } else { 333 try { 334 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 335 KittyMapper mapper2 = getDatabase().getMapper(MigTwoModel.class); 336 KittyMapper mapper3 = getDatabase().getMapper(MigThreeModel.class); 337 long recordsCount = mapper.countAll() + mapper2.countAll() + mapper3.countAll(); 338 339 boolean deleteData = getSf().currentMigDBVersion() == DB_IMPLEMENTATION_VERSION; 340 341 long affected; 342 343 if(deleteData) 344 affected = mapper.deleteAll() + mapper2.deleteAll() + mapper3.deleteAll(); 345 else 346 affected = 0l; 347 348 LinkedList\u0026lt;MigOneModel\u0026gt; modelsToInsert = new LinkedList\u0026lt;\u0026gt;(); 349 LinkedList\u0026lt;MigTwoModel\u0026gt; models2ToInsert = new LinkedList\u0026lt;\u0026gt;(); 350 LinkedList\u0026lt;MigThreeModel\u0026gt; models3ToInsert = new LinkedList\u0026lt;\u0026gt;(); 351 352 getSf().setDatabaseCreated(true); 353 getSf().setCurrentMigDBVersion(DB_IMPLEMENTATION_VERSION); 354 getSf().setDatabaseDeletedManually(false); 355 356 MigV3RandomModelFactory factory = new MigV3RandomModelFactory(getContext()); 357 358 for (int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 359 MigOneModel m = factory.newM1RndModel(); 360 modelsToInsert.addLast(m); 361 } 362 mapper.insertInTransaction(modelsToInsert); 363 List\u0026lt;MigOneModel\u0026gt; models = mapper.findAll(); 364 Iterator\u0026lt;MigOneModel\u0026gt; mI = models.iterator(); 365 LinkedList\u0026lt;String\u0026gt; out = new LinkedList\u0026lt;\u0026gt;(); 366 while (mI.hasNext()) { 367 out.addLast(mI.next().toString()); 368 } 369 370 for (int i = 0; i \u0026lt; INSERT_FK_AMOUNT; i++) { 371 MigTwoModel m = factory.newM2RndModel((ArrayList\u0026lt;MigOneModel\u0026gt;) models); 372 models2ToInsert.addLast(m); 373 } 374 mapper2.insertInTransaction(models2ToInsert); 375 List\u0026lt;MigTwoModel\u0026gt; models2 = mapper2.findAll(); 376 LinkedList\u0026lt;String\u0026gt; out2 = new LinkedList\u0026lt;\u0026gt;(); 377 Iterator\u0026lt;MigTwoModel\u0026gt; mI2 = models2.iterator(); 378 while (mI2.hasNext()) { 379 out2.addLast(mI2.next().toString()); 380 } 381 382 for (int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 383 MigThreeModel m = factory.newM3RndModel(); 384 models3ToInsert.addLast(m); 385 } 386 mapper3.insertInTransaction(models3ToInsert); 387 List\u0026lt;MigThreeModel\u0026gt; models3 = mapper3.findAll(); 388 LinkedList\u0026lt;String\u0026gt; out3 = new LinkedList\u0026lt;\u0026gt;(); 389 Iterator\u0026lt;MigThreeModel\u0026gt; mI3 = models3.iterator(); 390 while (mI3.hasNext()) { 391 out3.addLast(mI3.next().toString()); 392 } 393 394 long recordsCountAfter = mapper.countAll() + mapper2.countAll() + mapper3.countAll(); 395 mapper.close(); mapper2.close(); mapper3.close(); 396 return new InsertRandomResults(out, out2, out3, affected, recordsCount, recordsCountAfter, true, getSf().currentMigDBVersion()); 397 } catch (Exception e) { 398 Log.e(MigrationDBv3.LTAG, ERR_INSERT_RND, e); 399 if (e instanceof KittyRuntimeException) { 400 if (((KittyRuntimeException) e).getNestedException() != null) { 401 Log.e(MigrationDBv3.LTAG, ERR_INSERT_RND, ((KittyRuntimeException) e).getNestedException()); 402 } 403 } 404 return new InsertRandomResults( 405 null, 406 null, 407 null, 408 -1l, 409 -1l, 410 -1l, 411 false, 412 getSf().currentMigDBVersion() 413 ); 414 } 415 } 416 } 417 418 @Override 419 protected void onPostExecute(InsertRandomResults result) { 420 dialog.cancel(); 421 if (eventsListView != null) { 422 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 423 eventsListView.setOnTouchListener(new View.OnTouchListener() { 424 425 // Setting on Touch Listener for handling the touch inside ScrollView 426 @Override 427 public boolean onTouch(View v, MotionEvent event) { 428 // Disallow the touch request for parent scroll on touch of child view 429 v.getParent().requestDisallowInterceptTouchEvent(true); 430 return false; 431 } 432 }); 433 if (result.operationSuccess) { 434 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_count_to_events), result.modelsCountBefore)); 435 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_deleted_to_events), result.deletedModelsAffectedRows)); 436 for (String modelString : result.modelInsertionsM1) { 437 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_inserted_to_events), M1M1TN, modelString)); 438 } 439 for (String modelString2 : result.modelInsertionsM2) { 440 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_inserted_to_events), M1M2TN, modelString2)); 441 } 442 for (String modelString3 : result.modelInsertionsM3) { 443 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_inserted_to_events), M1M3TN, modelString3)); 444 } 445 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_count_to_events), result.modelsCountAfter)); 446 } else { 447 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 448 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 449 } else { 450 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t3_error_event)); 451 } 452 } 453 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 454 reloadTableExpandedList(); 455 reloadStatus(); 456 } 457 } 458 459 460 } 461 462 class InsertRandomResults { 463 List\u0026lt;String\u0026gt; modelInsertionsM1; 464 List\u0026lt;String\u0026gt; modelInsertionsM2; 465 List\u0026lt;String\u0026gt; modelInsertionsM3; 466 long deletedModelsAffectedRows; 467 long modelsCountBefore; 468 long modelsCountAfter; 469 boolean operationSuccess; 470 int dbVersion; 471 472 public InsertRandomResults(List\u0026lt;String\u0026gt; modelInsertionsM1, List\u0026lt;String\u0026gt; modelInsertionsM2, 473 List\u0026lt;String\u0026gt; modelInsertionsM3, long deletedModelsAffectedRows, 474 long modelsCountBefore, long modelsCountAfter, boolean opSuccess, 475 int dbVersion) { 476 this.modelInsertionsM1 = modelInsertionsM1; 477 this.modelInsertionsM2 = modelInsertionsM2; 478 this.modelInsertionsM3 = modelInsertionsM3; 479 this.deletedModelsAffectedRows = deletedModelsAffectedRows; 480 this.modelsCountBefore = modelsCountBefore; 481 this.modelsCountAfter = modelsCountAfter; 482 this.operationSuccess = opSuccess; 483 this.dbVersion = dbVersion; 484 } 485 } 486 487 static final String ERR_DELETION = \u0026#34;Lesson5tab3DBDeleteError, see exception details!\u0026#34;; 488 489 class DeleteDatabaseAsync extends AsyncTask\u0026lt;Long, Long, Integer\u0026gt; { 490 ProgressDialog dialog; 491 492 final int DELETED = 1; 493 final int NOT_DELETED = 2; 494 final int ERROR = 3; 495 496 @Override 497 protected void onPreExecute() { 498 dialog = ProgressDialog.show( 499 getLessonActivity(), 500 getString(R.string._l5_t3_running_requested_operation_pg_title), 501 getString(R.string._l5_t3_running_requested_operation_pg_body) 502 ); 503 dialog.setCancelable(false); 504 } 505 506 @Override 507 protected Integer doInBackground(Long... strings) { 508 try { 509 boolean deleted = getDatabase().deleteDatabase(); 510 getSf().setDatabaseDeletedManually(true); 511 getSf().setDatabaseCreated(false); 512 getSf().setCurrentMigDBVersion(-1); 513 if(deleted) 514 return DELETED; 515 else 516 return NOT_DELETED; 517 } catch (Exception e) { 518 Log.e(MigrationDBv3.LTAG, ERR_DELETION, e); 519 if (e instanceof KittyRuntimeException) { 520 if (((KittyRuntimeException) e).getNestedException() != null) { 521 Log.e(MigrationDBv3.LTAG, ERR_DELETION, ((KittyRuntimeException) e).getNestedException()); 522 } 523 } 524 return ERROR; 525 } 526 } 527 528 @Override 529 protected void onPostExecute(Integer result) { 530 dialog.cancel(); 531 if (eventsListView != null) { 532 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 533 eventsListView.setOnTouchListener(new View.OnTouchListener() { 534 535 // Setting on Touch Listener for handling the touch inside ScrollView 536 @Override 537 public boolean onTouch(View v, MotionEvent event) { 538 // Disallow the touch request for parent scroll on touch of child view 539 v.getParent().requestDisallowInterceptTouchEvent(true); 540 return false; 541 } 542 }); 543 switch (result) { 544 case DELETED: 545 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_delete_db_success))); 546 break; 547 case NOT_DELETED: 548 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_delete_db_fail))); 549 break; 550 case ERROR: 551 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t3_error_event))); 552 break; 553 } 554 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 555 reloadTableExpandedList(); 556 reloadStatus(); 557 } 558 } 559 } 560 561 // Expanded list 562 MigAdapter migAdapter; 563 564 @Override 565 protected void setUpExpandedList(View rootView, int eventsId, int eventsTitleId, int eventTitleStringPattern) { 566 events = (ListView) rootView.findViewById(eventsId); 567 expandedTitle = (TextView) rootView.findViewById(eventsTitleId); 568 expandeddTitlePattern = getString(eventTitleStringPattern); 569 570 expandedTitle.setText(format(expandeddTitlePattern, 0)); 571 572 if(expandedAdapter == null) { 573 migAdapter = new MigAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;()); 574 } 575 576 events.setAdapter(migAdapter); 577 events.setOnTouchListener(new View.OnTouchListener() { 578 579 // Setting on Touch Listener for handling the touch inside ScrollView 580 @Override 581 public boolean onTouch(View v, MotionEvent event) { 582 // Disallow the touch request for parent scroll on touch of child view 583 v.getParent().requestDisallowInterceptTouchEvent(true); 584 return false; 585 } 586 }); 587 } 588 589 // Fab menu section 590 591 @Override 592 public View.OnClickListener helpFabMenuAction() { 593 return new View.OnClickListener() { 594 595 /** 596* Called when a view has been clicked. 597* 598* @param v The view that was clicked. 599*/ 600 @Override 601 public void onClick(View v) { 602 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T3_TUTORIAL); 603 } 604 }; 605 } 606 607 @Override 608 public View.OnClickListener sourceFabMenuAction() { 609 return new View.OnClickListener() { 610 611 /** 612* Called when a view has been clicked. 613* 614* @param v The view that was clicked. 615*/ 616 @Override 617 public void onClick(View v) { 618 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T3_SOURCE); 619 } 620 }; 621 } 622 623 @Override 624 public View.OnClickListener schemaFabMenuAction() { 625 return new View.OnClickListener() { 626 627 /** 628* Called when a view has been clicked. 629* 630* @param v The view that was clicked. 631*/ 632 @Override 633 public void onClick(View v) { 634 ((KittyTutorialActivity) getParentFragment().getActivity()).showWebViewDialog(L5_T3_SCHEMA); 635 } 636 }; 637 } 638} \n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/speedup/l4t1_code/",
	"title": "Source code",
	"tags": [],
	"description": "",
	"content": " Tip №1: Avoid using generating data model from packages    Click to view static registry initialization via annotations example:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 // You can just define set of domain models and extended crud controllers (mappers) would 11 // be added only if those models are annotated with KITTY_EXTENDED_CRUD annotation. 12 // For example, for ComplexRandom.class it would be 13 // @KITTY_EXTENDED_CRUD(extendedCrudController = ComplexRandomMapper.class) 14 domainModels = { 15 ComplexRandomModel.class, 16 IndexesAndConstraintsModel.class, 17 RandomModel.class 18 }, 19 // Or you can provide explicit assignment of model-\u0026gt;mapper pairs by defining domainPais 20 domainPairs = { 21 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 22 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 23 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) 24 } 25) 26public class BasicDatabase extends KittyDatabase { 27 ... 28} 29     Click to view static registry initialization via overloading getStaticRegistry() method example:  1@KITTY_DATABASE( 2 databaseName = \u0026#34;basic_database\u0026#34;, 3 logTag = LOG_TAG, 4 isLoggingOn = true, 5 isProductionOn = true, 6 isPragmaOn = true 7) 8public class BasicDatabase extends KittyDatabase { 9 10 public static final Map\u0026lt;Class\u0026lt;? extends KittyModel\u0026gt;, Class\u0026lt;? extends KittyMapper\u0026gt;\u0026gt; staticRegistry = new HashMap\u0026lt;\u0026gt;(); 11 12 static { 13 staticRegistry.put(ComplexRandomModel.class, ComplexRandomMapper.class); 14 staticRegistry.put(IndexesAndConstraintsModel.class, KittyMapper.class); 15 staticRegistry.put(RandomModel.class, RandomMapper.class); 16 } 17 18 public static final String LOG_TAG = \u0026#34;BASIC DB DEMO\u0026#34;; 19 20 /** 21* KittyORM main database class that represents bootstrap and holder for all related with database 22* components. 23* \u0026lt;br\u0026gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info. 24* 25* @param ctx 26*/ 27 public BasicDatabase(Context ctx) { 28 super(ctx); 29 } 30 31 @Override 32 protected Map\u0026lt;Class, Class\u0026lt;KittyMapper\u0026gt;\u0026gt; getStaticRegistry() { 33 return (Map) staticRegistry; 34 } 35} 36    Tip №2: Avoid multiply initialization of KittyDatabase    Click to view KittyDatabase implementation static initialization at Application implementation example:  1public class AwesomeApplication extends Application { 2 3\tprivate static AwesomeKittyDatabaseImplementation database; 4 5\tpublic void onCreate() { 6\tsuper.onCreate(); 7\tAwesomeApplication.database = new AwesomeKittyDatabaseImplementation(getApplicationContext()); 8\t} 9 10\tpublic static AwesomeKittyDatabaseImplementation getAwesomeDB() { 11\treturn database; 12\t} 13} 14    Tip №3: Optimize your data model and statements    Click to view INDEX declaration with KittyORM example:  1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) // Index declaration example №1 3public class IndexesAndConstraintsModel extends KittyModel { 4 5 6 ... 7 8 @KITTY_COLUMN(columnOrder = 5) 9 @DEFAULT( 10 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 11 ) 12 // Index declaration example №2 13 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 14 @NOT_NULL 15 public Timestamp creationTmstmp; 16 17 ... 18} 19     Click to view bulk insert operation in transaction mode with KittyORM example:  1void insertIntoDB() { 2 // Getting mapper instance and filling model collection with random models 3 RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(Lesson2Tab5Random.this.getContext()); 4 RandomMapper mapper = (RandomMapper) getDatabase().getMapper(RandomModel.class); 5 List\u0026lt;RandomModel\u0026gt; toInsert = new ArrayList\u0026lt;\u0026gt;(); 6 for(int i = 0; i \u0026lt; 50000; i++) 7 toInsert.add(rndFactory.newRandomModel()); 8 9 // Saving list of 50k models in transaction mode 10 mapper.insertInTransaction(toInsert); 11 12 // Closing mapper 13 mapper.close(); 14} 15    Tip №6: Turn off logging at production    Click to view logging settings example:  1@KITTY_DATABASE( 2 isLoggingOn = false, // By default false, bootstrap and error logging 3 isProductionOn = true, // By default true, when false - query logging 4 isKittyDexUtilLoggingEnabled = false, // By default false, when true - a lot of logging about classes in app namespace at initialization 5 databaseName = \u0026#34;mig\u0026#34;, 6 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.migrations.migv4\u0026#34;}, 7 databaseVersion = 4, 8 logTag = MigrationDBv4.LTAG 9) 10public class MigrationDBv4 extends KittyDatabase { 11 ... 12} 13    Tip №7: Run expensive operations not in UI thread    Click to view example of KittyORM in AsyncTask:  1 static final int INSERT_AMOUNT = 25; 2 3 static final String ERR_INSERT_RND = \u0026#34;Lesson5tab1InsertRNDDataError, see exception details!\u0026#34;; 4 5 class InsertRandomAsync extends AsyncTask\u0026lt;Long, Long, InsertRandomResults\u0026gt; { 6 ProgressDialog dialog; 7 8 @Override 9 protected void onPreExecute() { 10 dialog = ProgressDialog.show( 11 getLessonActivity(), 12 getString(R.string._l5_t1_running_requested_operation_pg_title), 13 getString(R.string._l5_t1_running_requested_operation_pg_body) 14 ); 15 dialog.setCancelable(false); 16 } 17 18 @Override 19 protected InsertRandomResults doInBackground(Long... strings) { 20 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 21 return new InsertRandomResults( 22 null, 23 -1l, 24 -1l, 25 -1l, 26 false, 27 getSf().currentMigDBVersion() 28 ); 29 } else { 30 try { 31 KittyMapper mapper = getDatabase().getMapper(MigOneModel.class); 32 long recordsCount = mapper.countAll(); 33 long affected = mapper.deleteAll(); 34 LinkedList\u0026lt;MigOneModel\u0026gt; modelsToInsert = new LinkedList\u0026lt;\u0026gt;(); 35 getSf().setDatabaseCreated(true); 36 getSf().setCurrentMigDBVersion(DB_IMPLEMENTATION_VERSION); 37 getSf().setDatabaseDeletedManually(false); 38 MigV1RandomModelFactory factory = new MigV1RandomModelFactory(getContext()); 39 for (int i = 0; i \u0026lt; INSERT_AMOUNT; i++) { 40 MigOneModel m = factory.newM1RndModel(); 41 modelsToInsert.addLast(m); 42 } 43 mapper.insertInTransaction(modelsToInsert); 44 List\u0026lt;MigOneModel\u0026gt; models = mapper.findAll(); 45 long recordsCountAfter = mapper.countAll(); 46 mapper.close(); 47 Iterator\u0026lt;MigOneModel\u0026gt; mI = models.iterator(); 48 LinkedList\u0026lt;String\u0026gt; out = new LinkedList\u0026lt;\u0026gt;(); 49 while (mI.hasNext()) { 50 out.addLast(mI.next().toString()); 51 } 52 return new InsertRandomResults(out, affected, recordsCount, recordsCountAfter, true, getSf().currentMigDBVersion()); 53 } catch (Exception e) { 54 Log.e(MigrationDBv1.LTAG, ERR_INSERT_RND, e); 55 if (e instanceof KittyRuntimeException) { 56 if (((KittyRuntimeException) e).getNestedException() != null) { 57 Log.e(MigrationDBv1.LTAG, ERR_INSERT_RND, ((KittyRuntimeException) e).getNestedException()); 58 } 59 } 60 return new InsertRandomResults( 61 null, 62 -1l, 63 -1l, 64 -1l, 65 false, 66 getSf().currentMigDBVersion() 67 ); 68 } 69 } 70 } 71 72 @Override 73 protected void onPostExecute(InsertRandomResults result) { 74 dialog.cancel(); 75 if (eventsListView != null) { 76 eventsListView.setAdapter(new BasicArrayAdapter(getContext(), new LinkedList\u0026lt;String\u0026gt;())); 77 eventsListView.setOnTouchListener(new View.OnTouchListener() { 78 79 // Setting on Touch Listener for handling the touch inside ScrollView 80 @Override 81 public boolean onTouch(View v, MotionEvent event) { 82 // Disallow the touch request for parent scroll on touch of child view 83 v.getParent().requestDisallowInterceptTouchEvent(true); 84 return false; 85 } 86 }); 87 if (result.operationSuccess) { 88 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_count_to_events), result.modelsCountBefore)); 89 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_deleted_to_events), result.deletedModelsAffectedRows)); 90 for (String modelString : result.modelInsertions) { 91 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_inserted_to_events), M1M1TN, modelString)); 92 } 93 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_t1_count_to_events), result.modelsCountAfter)); 94 } else { 95 if(getSf().currentMigDBVersion() \u0026gt; DB_IMPLEMENTATION_VERSION) { 96 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(format(getString(R.string._l5_op_mig_version_is_higher), result.dbVersion, DB_IMPLEMENTATION_VERSION)); 97 } else { 98 ((BasicArrayAdapter) eventsListView.getAdapter()).addItemLast(getString(R.string._l5_t1_error_event)); 99 } 100 } 101 ((BasicArrayAdapter) eventsListView.getAdapter()).notifyDataSetChanged(); 102 reloadTableExpandedList(); 103 reloadStatus(); 104 } 105 } 106 107 108 } 109 110 class InsertRandomResults { 111 List\u0026lt;String\u0026gt; modelInsertions; 112 long deletedModelsAffectedRows; 113 long modelsCountBefore; 114 long modelsCountAfter; 115 boolean operationSuccess; 116 int dbVersion; 117 118 public InsertRandomResults(List\u0026lt;String\u0026gt; modelInsertions, long deletedModelsAffectedRows, 119 long modelsCountBefore, long modelsCountAfter, boolean opSuccess, 120 int dbVersion) { 121 this.modelInsertions = modelInsertions; 122 this.deletedModelsAffectedRows = deletedModelsAffectedRows; 123 this.modelsCountBefore = modelsCountBefore; 124 this.modelsCountAfter = modelsCountAfter; 125 this.operationSuccess = opSuccess; 126 this.dbVersion = dbVersion; 127 } 128 } 129    "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/makekittygreater/l6t1/",
	"title": "Use KittyORM",
	"tags": [],
	"description": "",
	"content": " Use KittyORM in your projects and leave your feedback! It is very simple to make KittyORM even greater. Just use it in your projects and leave your feedback. Easy as a pie:\n Visit KittyORM page located at https://akaish.github.io/KittyORMPages/ or KittyORM GitHub repository located at https://github.com/akaish/KittyORM to acquire instructions on configuring your project in order to use KittyORM.\n Implement your business logic without messing with SQL and a lot of boiler plate code for database operations.\n Leave your feedback, feature requests, questions or bug reports at Issues section of KittyORM project GitHub repository or send it to kittyorm@gmail.com with subject contains !feedback, !featurerequest, !question or !bugreport (optional but it would be very nice).\n  Are there any legal restrictions to use KittyORM in my project? Yep, there are few restrictions right now. KittyORM licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. It is young ORM and written only by one author, I spent quite a lot of time to write it and not ready to share all rights to community. Right now you can freely use it in noncommercial purposes with giving appropriate credit and providing link to the license in your project. But you may not use KittyORM for commercial purposes or distribute derivatives of KittyORM.\nWhy KittyORM has NoDerivatives restriction?\nThis is done to prevent distribution of any ORM built with using KittyORM code as core code as standalone ORM. However, you are free to modify it to use it in any project that main functionality is not ORM and redistribute it in object form as part of your application. Good example - modifying KittyORM source code to apply database encryption with third-party library is OK.\nWhy KittyORM has NonCommercial restriction?\nAs mentioned earlier I\u0026rsquo;ve spent something about half a year of working on KittyORM and some time on KittyORM Demo and related documentstion, so it would be nice if it would bring some revenue. However, there are great chances to receive permit on commercial use of KittyORM even for free and you always can receive KittyORM under another license by request on paid base. Just contact me by email (kittyorm@gmail.com).\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/dropcreate/",
	"title": "DropCreate Migrator",
	"tags": [],
	"description": "",
	"content": "\n Demo application screenshots for this article  As mentioned earlier, DropCreate Migrator is just simple utility that would generate drop and create statements of your new schema version and would try to apply it at KittyDatabaseHelper.onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) method call. In this case DropCreate Migrator only process new schema table names, so if in new schema there is no table that is present in older one then this table would stay at database. Also, notice that DropCreate Migrator can fail if any constraint violation happens. This can be, for example, in a case when generated drop script tries to delete two tables, where one table refers to another one with usage of FOREIGN KEY constraint. If in such case there would be an attempt to delete referred table first, then constraint violation would occur.\nTo prevent constraint violation in case when you are using FOREIGN KEY references - just use predefined CREATE and DROP schema scripts defined, for example, at overloaded getPreGeneratedCreateStatements(KittyDatabaseConfiguration dbConf) and getPreGeneratedDropStatements(KittyDatabaseConfiguration dbConf) methods of your KittyDatabase (more info at tip №5 of lesson 4 tab 1 \u0026ldquo;Speed Up KittyORM\u0026rdquo; in this demo).\nThis migration option is default, so you do not need anything to do. However, if for some reason you wish to clearly define this onUpgrade behavior for your database, than just set @KITTY_DATABASE_HELPER.onUpgradeBehavior to KITTY_DATABASE_HELPER.UpgradeBehavior.DROP_AND_CREATE: 1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 databaseName = \u0026#34;mig\u0026#34;, 5 databaseVersion = 2, 6 logTag = MigrationDBv2.LTAG, 7 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.migrations.migv2\u0026#34;} 8) 9@KITTY_DATABASE_REGISTRY( 10 domainModels = { 11 net.akaish.kittyormdemo.sqlite.migrations.migv2.MigOneModel.class, 12 net.akaish.kittyormdemo.sqlite.migrations.migv2.MigTwoModel.class 13 } 14) 15@KITTY_DATABASE_HELPER( 16 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.DROP_AND_CREATE 17) 18public class MigrationDBv2 extends KittyDatabase { 19 ... 20}\nThat\u0026rsquo;s all, simple as a pie.\nMig v.2\nMigOneModel (mig_one)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   String creationDate creation_date NOT_NULL DEFAULT(CURRENT_DATE)   Integer defaultInteger default_integer DEFAULT(228)   Timestamp currentTimestamp current_timestamp -    Index on default_integer.\nMigTwoModel (mig_two)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   Long migOneReference mig_one_reference FOREIGN KEY reference on mig_one.id   Animals someAnimal some_animal -    Index on some_animal.\nv.1 -\u0026gt; v.2 diffs\n + column mig_one.current_timestamp + column mig_one.default_integer DEFAULT(28) - column mig_one.some_integer + constraint on mig_one.cretaion_date: DEFAULT(CURRENT_DATE) + table mig_two + index on mig_one (default_integer) + index on mig_two (some_animal)  Create schema script generated by KittyORM for database mig version 2 CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228, current_timestamp INTEGER); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT); CREATE INDEX IF NOT EXISTS m2_sa_index ON mig_two (some_animal); Drop schema script generated by KittyORM for database mig version 2 DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; Migration script generated by KittyORM for database mig from version 1 to version 2 (DC migrator) DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228, current_timestamp INTEGER); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT); CREATE INDEX IF NOT EXISTS m2_sa_index ON mig_two (some_animal);\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/makekittygreater/l6t2/",
	"title": "Share KittyORM",
	"tags": [],
	"description": "",
	"content": " Like KittyORM? Share it! You use KittyORM and you like it? Share it with those who can use for their projects. That\u0026rsquo;s simple. It is really easy way to help to improve KittyORM, more people use it means more feedback, bug reports or feature request would be received. Bigger community means greater opportunities for KittyORM project and all other projects that use it or would use it for database related operations.\n Share your feedback with link to KittyORM page located at https://akaish.github.io/KittyORMPages/ or KittyORM GitHub repository located at https://github.com/akaish/KittyORM or even link to KittyORM demo application located at Play Market at TODO add link when ready. Tweet it, write note on your blog, tell your opinion. Send somebody, for whom KittyORM may be useful, link to the project. Maybe you would help somebody to find ORM for Android that can be excellent for some project.  Too much work to do and do not have any free time even for tweet or PM? Never mind, just share it via \u0026ldquo;Share KittyORM\u0026rdquo; button with most comfortable way. Any assistance is appreciated and by sharing KittyORM you help to make it greater. Thank you.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/update/",
	"title": "Updating existing entity",
	"tags": [],
	"description": "",
	"content": "For updating an entity with KittyORM you may use KittyMapper.save(M model) or KittyMapper.update(M model) method. As mentioned in the earlier lesson using save method force KittyORM to define what operation should be done with the provided model: update or insert. KittyORM makes this decision based on a state of entity fields that can be used for the unambiguous definition of associated record in the database.\nWhen you use KittyMapper.update(M model) method KittyORM would generate a query that sets values of a target table row with values from the model using generated UPDATE statement with WHERE clause. In the common case, rowid would be used for such statement. If the model has no rowid set than UPDATE statement would be generated with WHERE clause using model\u0026rsquo;s PK values.\n\n Demo application screenshots for this article  So, updating models with KittyORM is same as inserting them. Take a look at following code snippet: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel toUpdate = mapper.findByIPK(0l); 7// Setting model fields 8toUpdate.randomInt = 12; 9... 10// Saving model with save method 11mapper.save(toUpdate); 12// Saving model with direct insert call 13mapper.update(toInsert);\nHowever, what if you want to update more than one model? It is quite simple, instead of updating models in a bulk mode you can update some rows in a table with a usage of custom update condition within values to be updated set as fields of POJO. For example, you want to update all rows in random table where id is between (inclusively) 10 and 20 and set a random_int column to value 50. For this perform following steps:\n Create new condition with the usage of SQLiteConditionBuilder.class: 1SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 2builder.addField(\u0026#34;id\u0026#34;) 3 .addSQLOperator(SQLiteOperator.GREATER_OR_EQUAL) 4 .addValue(10) 5 .addSQLOperator(SQLiteOperator.AND) 6 .addField(\u0026#34;id\u0026#34;) 7 .addSQLOperator(SQLiteOperator.LESS_OR_EQUAL) 8 .addValue(20); Create new RandomModel.class instance and set randomInt to 50: 1RandomModel toUpdate = new RandomModel(); 2toUpdate.randomInt = 50; Run KittyMapper.update(M model, SQLiteCondition condition, String[] names, int IEFlag) providing previosly created model, condition, String array of field names (randomInt) to set and inclusion\\exclusion flag: 1mapper.update(toUpdate, builder.build(), new String[]{\u0026#34;randomInt\u0026#34;}, CVUtils.INCLUDE_ONLY_SELECTED_FIELDS);   Click to view update example in a block: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Creating condition builder instance 6SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 7builder.addField(\u0026#34;id\u0026#34;) 8 .addSQLOperator(SQLiteOperator.GREATER_OR_EQUAL) 9 .addValue(10) 10 .addSQLOperator(SQLiteOperator.AND) 11 .addField(\u0026#34;id\u0026#34;) 12 .addSQLOperator(SQLiteOperator.LESS_OR_EQUAL) 13 .addValue(20); 14// Creating blank model and setting it fields 15RandomModel toUpdate = new RandomModel(); 16toUpdate.randomInt = 50; 17// Updating table with custom clause and values from model 18mapper.update(toUpdate, builder.build(), new String[]{\u0026#34;randomInt\u0026#34;}, CVUtils.INCLUDE_ONLY_SELECTED_FIELDS); \nYou can path to KittyMapper.update(M model, SQLiteCondition condition, String[] names, int IEFlag) as names parameter column fields or POJO field names. With IEFlag you can specify how to treat values you passed as names parameter. Following flags are supported: INCLUDE_ONLY_SELECTED_FIELDS, INCLUDE_ALL_EXCEPT_SELECTED_FIELDS, INCLUDE_ONLY_SELECTED_COLUMN_NAMES, INCLUDE_ALL_EXCEPT_SELECTED_COLUMN_NAMES and IGNORE_INCLUSIONS_AND_EXCLUSIONS.\n Tip #1  You can get more documentation on building clauses with SQLiteConditionBuilder.class at KittyORM project page.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/makekittygreater/l6t3/",
	"title": "Contribute to KittyORM",
	"tags": [],
	"description": "",
	"content": " Like KittyORM? Develop it! Like KittyORM and have some ideas how to improve it? Have some free time you want to spend to develop KittyORM? Would like to help to translate KittyORM documentation to more languages? You\u0026rsquo;re welcome! Contact us via email kittyorm@gmail.com with subject contains !contribute and become a contributor! What things you can do right now?\n KittyORM code right now not covered with unit tests. It would be awesome to fix this situation. Also, any things on bug fixing and testing are appreciated. Translate documentation to other languages and help to make it more accessible for people from other countries. Have ideas about how to improve KittyORM? Share it with us. Unfortunately, due to some possible law restrictions, right now contributions to KittyORM orm library are not accepted. However, if your feature request would contain possible solutions or advises how to achieve it in a better way, it would be really great.  Any contribution is appreciated. Thank you.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/delete/",
	"title": "Deleting entities",
	"tags": [],
	"description": "",
	"content": " \n Demo application screenshots for this article  You have two ways to delete entities in KittyORM:\n Delete associated with model row by calling KittyMapper.delete(M model) or KittyMapper.delete(List\u0026lt;M\u0026gt; models) methods: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel toDelete = mapper.findByIPK(0l); 7// Deleting model 8long rowsAffected = mapper.delete(toDelete);\n Delete all rows in a table that suit provided WHERE clause generated with SQLiteConditionBuilder.class: 1// Deleting by random_int range 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Creating clause for deletion 6SQLiteCondition condition = new SQLiteConditionBuilder() 7 .addField(\u0026#34;random_int\u0026#34;) 8 .addSQLOperator(GREATER_OR_EQUAL) 9 .addValue(0) 10 .addSQLOperator(AND) 11 .addField(\u0026#34;random_int\u0026#34;) 12 .addSQLOperator(LESS_OR_EQUAL) 13 .addValue(10000) 14 .build(); 15// Deleting with generated clause 16mapper.deleteByWhere(condition);\n  Closer look on SQLiteConditionBuilder.class SQLiteConditionBuilder.class is a builder for generating WHERE clauses within KittyORM. It is really simple to use and it is designed to generate WHERE clauses in most natural for SQLite way: just add column names, SQLite operators and values for your clause in an order they should appear in SQLite clause. For example, clause WHERE a_column = 'a' AND (b_column \u0026gt; 0 OR BETWEEN 10 AND 20) would be generated by following code: 1SQLiteCondition condition = new SQLiteConditionBuilder() 2 .addField(\u0026#34;a_column\u0026#34;) 3 .addSQLOperator(EQUAL) 4 .addValue(\u0026#34;a\u0026#34;) 5 .addSQLOperator(AND) 6 .addSQLOperator(OPEN_SUBC) 7 .addField(\u0026#34;b_column\u0026#34;) 8 .addSQLOperator(GREATER_THAN) 9 .addValue(0) 10 .addSQLOperator(OR) 11 .addSQLOperator(BETWEEN) 12 .addValue(10) 13 .addSQLOperator(AND) 14 .addValue(20) 15 .addSQLOperator(CLOSE_SUBC) 16 .build(); All supported by KittyORM SQLite operators presented at net.akaish.kitty.orm.query.conditions.SQLiteOperator enumeration.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/simplemigrations/",
	"title": "Simple Migration Script Generator Migrator",
	"tags": [],
	"description": "",
	"content": "\n Demo application screenshots for this article  SimpleMigrationScriptGenerator Migrator is a simple migration utility that tries to generate migration script based on differences between current and new schema and save as many data as possible. It is implemented by KittySimpleMigrator.class that uses net.akaish.kitty.orm.util.KittySimpleMigrationScriptGenerator for generating migration script. KittySimpleMigrationScriptGenerator is capable only to delete and create new indexes and table as well as adding or deleting columns in existing tables, so use it only when you\u0026rsquo;re sure that there are no constraints defined that can be violated with script created by this utility class. KittySimpleMigrationScriptGenerator gets list of existing tables, table columns and indexes of current database and compares it to new schema tables, table columns and indexes list, then generates statements to drop redundant tables, indexes and table columns, statements to alter existing tables and statements to create new tables and indexes. Due to SQLite ALTER restrictions, a lot of operations, for example, operation of deleting redundant column in existing table would be not ALTER statement but list of statements: renaming old table, creating new version of table from new schema, inserting values from old table to new one.\nTo use SimpleMigrationScriptGenerator Migrator you should set onUpgradeBehavior property value of @KITTY_DATABASE_HELPER to KITTY_DATABASE_HELPER.UpgradeBehavior.USE_SIMPLE_MIGRATIONS: 1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 isKittyDexUtilLoggingEnabled = false, 5 logTag = MigrationDBv3.LTAG, 6 databaseName = \u0026#34;mig\u0026#34;, 7 databaseVersion = 3, 8 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.migrations.migv3\u0026#34;} 9) 10@KITTY_DATABASE_REGISTRY( 11 domainModels = { 12 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigOneModel.class, 13 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigTwoModel.class, 14 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigThreeModel.class 15 } 16) 17@KITTY_DATABASE_HELPER( 18 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.USE_SIMPLE_MIGRATIONS 19) 20public class MigrationDBv3 extends KittyDatabase { 21 ... 22}\nMig v.3\nMigOneModel (mig_one)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   String creationDate creation_date NOT_NULL DEFAULT(CURRENT_DATE)   Integer defaultInteger default_integer DEFAULT(228)    Index on default_integer.\nMigTwoModel (mig_two)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   Long migOneReference mig_one_reference FOREIGN KEY reference on mig_one.id   Animals someAnimal some_animal -   AnimalSounds someAnimalSound some_animal_sound -    MigThreeModel (mig_three)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   String someValue some_value DEFAULT(\u0026ldquo;Something random\u0026rdquo;)    v.2 -\u0026gt; v.3 diffs\n - column mig_one.current_timestamp + column mig_two.someAnimalSound + table mig_three - index on mig_two (some_animal)  Create schema script generated by KittyORM for database mig version 3 CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;); CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT, some_animal_sound TEXT); Drop schema script generated by KittyORM for database mig version 3 DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; DROP TABLE IF EXISTS mig_three; Migration script generated by KittyORM for database mig from version 2 to version 3 (SimpleMigrationScriptGenerator migrator) ALTER TABLE mig_one RENAME TO mig_one_t_old; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); INSERT INTO mig_one (id, creation_date, default_integer) SELECT id, creation_date, default_integer FROM mig_one_t_old; DROP TABLE IF EXISTS mig_one_t_old; CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); ALTER TABLE mig_two ADD COLUMN some_animal_sound; CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;); DROP INDEX IF EXISTS mig.m2_sa_index; Migration script generated by KittyORM for database mig from version 1 to version 3 (SimpleMigrationScriptGenerator migrator) ALTER TABLE mig_one RENAME TO mig_one_t_old; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); INSERT INTO mig_one (id, creation_date) SELECT id, creation_date FROM mig_one_t_old; DROP TABLE IF EXISTS mig_one_t_old; CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT, some_animal_sound TEXT); CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;);\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/fsmigrations/",
	"title": "Filescript Migrator",
	"tags": [],
	"description": "",
	"content": " \n Demo application screenshots for this article  With KittyORM you can use stored at file system or at assets SQLite scripts for database creation, schema update or for filling your newly created\\updated database with some initial data sets. Also, you may use those scripts to upgrade your schema when necessary with Filescript Migrator It is a bit complicated thing, so this lesson divided into two parts, use table of contents for navigation.\nTable of contents  Using file scripts with KittyORM Using Filescript Migrator for updating your schema  Using file scripts with KittyORM KittyORM supports running SQLite scripts from files stored in assets or at device file system. This feature can be used for storing create and drop scripts. Also, you can define after create and after update scripts to run. All those scripts should comply two following rules:\n Each statement should be written on its own line at text file. One statement is one line that ends with ; character. KittyORM supports one line comments.   Click here to view an example of proper SQLite script file content supported by KittyORM:  1-- Some comment here 2CREATE TABLE IF NOT EXISTS mig_four (id INTEGER NOT NULL PRIMARY KEY ASC, mig_three_reference INTEGER NOT NULL REFERENCES mig_three (id) ON UPDATE NO ACTION ON DELETE NO ACTION, mig_two_reference INTEGER NOT NULL REFERENCES mig_two (id) ON UPDATE NO ACTION ON DELETE NO ACTION, creation_date INTEGER NOT NULL DEFAULT CURRENT_DATE ); 3CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, new_sv_name TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;, random_long INTEGER DEFAULT 22); 4 5-- Also blank lines as well as lines that contain only whitespaces are OK (they would be skipped) 6 7CREATE INDEX IF NOT EXISTS m3_rnd_long ON mig_three (random_long); 8CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER, some_animal TEXT, some_animal_sound TEXT); \nBy default, you can specify following scripts that can be run at your database lifetime:\n Create script - you can define your script that would be used for schema generation at schema creation. You can specify path to create schema script at createScriptPath property of @KITTY_DATABASE_HELPER annotation. Drop script - you can define your script that should be used for dropping schema. You can specify path to drop schema script at dropScriptPath property of @KITTY_DATABASE_HELPER annotation. After create script - you can run some SQLite script right after creation of your schema. It is useful in cases when you would like to fill your database with some initial data. You can specify path to after create schema script at afterCreateScriptPath property of @KITTY_DATABASE_HELPER annotation. After migrate script - same as after create script but this script will be run after schema upgrade at onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) method call of KittyDatabaseHelper or its implementation. Use it for same purposes as after create script: in situations when you need to fill your database with some initial data set.  Also, notice that you have no need to explicitly specify location of those scripts, you may just locate them at default location and name them with use if default naming pattern. Default location for those scripts is path kittysqliteorm/{sql_database_name}, and default naming pattern for files is {0}-v-{1}-{2}.sql where {0} is schema name, {1} is schema version and {2} is script type (create, drop, after_create or after_migrate). So, for example, for database used in this lesson for schema version 4 default naming of after create script would be file:///android_asset/kittysqliteorm/mig/mig-v-4-after_create.sql.\nHowever, if you want to explicitly define locations of those scripts try to avoid absolute paths and use instead following uries: KittyNamingUtils.ASSETS_URI_START, KittyNamingUtils.INTERNAL_MEM_URI_START and KittyNamingUtils.EXTERNAL_MEM_URI_START. This would force KittyORM to use asset locations or to acquire base path with ctx.getFilesDir() or ctx.getExternalFilesDir() methods. See example of explicit definition of those scripts locations: 1@KITTY_DATABASE( 2 ... 3) 4@KITTY_DATABASE_REGISTRY( 5 ... 6) 7@KITTY_DATABASE_HELPER( 8 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.USE_FILE_MIGRATIONS, 9 migrationScriptsPath = KittyNamingUtils.INTERNAL_MEM_URI_START + \u0026#34;kittysqliteorm/mig/version_migrations\u0026#34;, 10 // Defining create script location at external memory 11 createScriptPath = KittyNamingUtils.EXTERNAL_MEM_URI_START + \u0026#34;one/script/at/sd/card_for_create.sql\u0026#34;, 12 // Defining drop script location at internal memory 13 dropScriptPath = KittyNamingUtils.INTERNAL_MEM_URI_START + \u0026#34;and_one/at_internal/memory/to_drop.sql\u0026#34;, 14 // Defining after migrate script location at assets 15 afterMigrateScriptPath = KittyNamingUtils.ASSETS_URI_START + \u0026#34;and/after_migrate/script_at_assets.sql\u0026#34;, 16 // Defining after create script location at internal memory 17 afterCreateScriptPath = KittyNamingUtils.INTERNAL_MEM_URI_START + \u0026#34;should/be_reference/to_lord_of_the_rings/or_rhyme/but_no.sql\u0026#34; 18) 19public class MigrationDBv4 extends KittyDatabase { 20 ... 21} Back to table of contents ^\nUsing Filescript Migrator for updating your schema As mentioned in lesson 5.1: Migrations overview KittyORM provides you some utilities for migration between different schema versions. One of these utilities is Filescript Migrator that uses stored at asset directory or at file system scripts that would be applied to your database at onUpgrade(SQLiteDatabase database, int oldVersion, int newVersion) method call of KittyDatabaseHelper or its implementation when there would be a need to update your schema. Filescript Migrator checks set of files named on one pattern and run SQLite scripts stored in at defined path if such migration sequence is applicable for new schema version. Implemented by KittyORMVersionFileDumpMigrator.class. To set this behavior you have to set onUpgradeBehavior property value of @KITTY_DATABASE_HELPER to KITTY_DATABASE_HELPER.UpgradeBehavior.USE_FILE_MIGRATIONS. By default, as migration root would be used scripts located at path kittysqliteorm/{sql_database_name}/version_migrations, however you can define custom path by setting migrationScriptsPath property of @KITTY_DATABASE_HELPER.\nFilescript Migrator takes file list from migration directory and tries to create from this list migration sequence. It requires those files to be named with usage of special pattern: {0}-{1}-{2}-{3}.sql, where {0} is min lower, {1} is min upper, {2} is max lower and {3} is max upper schema version numbers. Filescript Migrator would try to create inseparable sequence of scripts based on those numbers to be applied to upgrade your schema from current version to new. In simple situation, for example, to be able upgrade your database awesome_db with Filescript Migrator from version 4 to 6 you should have at migration directory following files: 4-4-5-5.sql and 5-5-6-6.sql. 1@KITTY_DATABASE( 2 ... 3) 4@KITTY_DATABASE_REGISTRY( 5 ... 6) 7@KITTY_DATABASE_HELPER( 8 // Defining onUpgrade behavior 9 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.USE_FILE_MIGRATIONS, 10 // Setting migrations root path 11 migrationScriptsPath = KittyNamingUtils.EXTERNAL_MEM_URI_START + \u0026#34;kittysqliteorm/mig/version_migrations\u0026#34;, 12) 13public class MigrationDBv4 extends KittyDatabase { 14 ... 15}\nTo demonstrate Filescript Migrator, in this lesson we would migrate database mig from version 3 to 4. For those purposes we create at assets following path kittysqliteorm/mig/version_migrations that contains only one script: 3-3-4-4.sql. When you hit \u0026ldquo;CREATE MIG\u0026hellip;\u0026rdquo; button following can happen (see KittyORM Demo):\n If database not created yet, then it would be created using script located at KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/mig-v-4-create.sql and after this would be applied script located at KittyNamingUtils.EXTERNAL_MEM_URI_START + \u0026quot;kittysqliteorm/mig/mig-v-4-after_create.sql. If database already exists and has version code 4 then all data would be wiped and then tables in database would be filled with some randomly generated records. If database already exists and has version code 3 then KittyORM will try to migrate from version 3 to version 4 using script located at KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/version_migrations/3-3-4-4.sql. After this script applied, KittyORM will run after create script located at KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/mig-v-4-after_migrate.sql. If database already exists, but have version code lower than 3, then migration will fail, because file located at migration root can be used only for creating inseparable migration script sequence from version code 3 to version code 4. If for some reason version code is higher than 4 then nothing would happen because fragment is not designed to work with database mig version 5 or higher.  Mig v.4\nMigTwoModel (mig_two)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   Long migOneReference mig_one_reference -   Animals someAnimal some_animal -   AnimalSounds someAnimalSound some_animal_sound -    MigThreeModel (mig_three)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   String someValue new_sv_name DEFAULT(\u0026ldquo;Something random\u0026rdquo;)   Long randomLong random_long DEFAULT(22)    Index on random_long.\nMigFourModel (mig_four)\n   Java type Name SQLite name Constraints     Long id id PRIMARY KEY   Long migThreeReference mig_three_reference NOT NULL FOREIGN KEY   Long migTwoReference mig_two_reference NOT NULL FOREIGN KEY   Date creationDate creation_date NOT NULL DEFAULT(CURRENT_DATE)    v.3 -\u0026gt; v.4 diffs\n - constraint FOREIGN KEY (mig_one_reference) reference on mig_one.id - table mig_one + table mig_four = mig_three.some_value rename to mig_three.new_sv_name + mig_three.random_long + index on mig_three (random_long)  Create schema script for database mig version 4 (KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/mig-v-4-create.sql) 1CREATE TABLE IF NOT EXISTS mig_four (id INTEGER NOT NULL PRIMARY KEY ASC, mig_three_reference INTEGER NOT NULL REFERENCES mig_three (id) ON UPDATE NO ACTION ON DELETE NO ACTION, mig_two_reference INTEGER NOT NULL REFERENCES mig_two (id) ON UPDATE NO ACTION ON DELETE NO ACTION, creation_date INTEGER NOT NULL DEFAULT CURRENT_DATE ); 2CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, new_sv_name TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;, random_long INTEGER DEFAULT 22); 3CREATE INDEX IF NOT EXISTS m3_rnd_long ON mig_three (random_long); 4CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER, some_animal TEXT, some_animal_sound TEXT); Drop schema script for database mig version 4 (KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/mig-v-4-drop.sql) 1DROP TABLE IF EXISTS mig_four; 2DROP TABLE IF EXISTS mig_three; 3DROP TABLE IF EXISTS mig_two; After create schema script for database mig version 4 (KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/mig-v-4-after_create.sql) 1INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 1); 2INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 2); 3INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 3); 4INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 4); 5INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 5); 6INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 6); 7INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 7); 8INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 8); 9INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 9); 10INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 10); 11INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 11); 12INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 12); 13INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER CREATE SCRIPT\u0026#39;, 13); After migrate schema script for database mig version 4 (KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/mig-v-4-after_migrate.sql) 1INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1); 2INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11); 3INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111); 4INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111); 5INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11111); 6INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111111); 7INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111111); 8INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11111111); 9INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111111); 10INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111111); 11INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11111); 12INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1111); 13INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 111); 14INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 11); 15INSERT INTO mig_three (new_sv_name, random_long) VALUES (\u0026#39;AFTER MIGRATE SCRIPT\u0026#39;, 1); Migration script for database mig from version 3 to version 4 (KittyNamingUtils.ASSETS_URI_START + \u0026quot;kittysqliteorm/mig/version_migrations/3-3-4-4.sql) 1-- minus FK M2.migOneReference 2ALTER TABLE mig_two RENAME TO mig_two_old_t; 3CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER, some_animal TEXT, some_animal_sound TEXT); 4INSERT INTO mig_two (id, mig_one_reference, some_animal, some_animal_sound) SELECT id, mig_one_reference, some_animal, some_animal_sound FROM mig_two_old_t; 5DROP TABLE IF EXISTS mig_two_old_t; 6-- minus M1 table 7DROP TABLE IF EXISTS mig_one; 8-- plus M4 table 9CREATE TABLE IF NOT EXISTS mig_four (id INTEGER NOT NULL PRIMARY KEY ASC, mig_three_reference INTEGER NOT NULL REFERENCES mig_three (id) ON UPDATE NO ACTION ON DELETE NO ACTION, mig_two_reference INTEGER NOT NULL REFERENCES mig_two (id) ON UPDATE NO ACTION ON DELETE NO ACTION, creation_date INTEGER NOT NULL DEFAULT CURRENT_DATE ); 10-- rename M3.some_value to M3.new_sv_name and add M3.random_long 11ALTER TABLE mig_three RENAME TO mig_three_old_t; 12CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, new_sv_name TEXT NOT NULL DEFAULT \u0026#39;Something random\u0026#39;, random_long INTEGER DEFAULT 22); 13INSERT INTO mig_three (id, new_sv_name) SELECT id, some_value FROM mig_three_old_t; 14DROP TABLE IF EXISTS mig_three_old_t; 15-- add index on M3.random_long 16CREATE INDEX IF NOT EXISTS m3_rnd_long ON mig_three (random_long);\nBack to table of contents ^\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/find/",
	"title": "Finding entities",
	"tags": [],
	"description": "",
	"content": " \n Demo application screenshots for this article  To find entities with KittyORM just use one of methods already implemented at KittyMapper.class: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel byIPK = mapper.findByIPK(0l); 7// Getting existing model with rowid (assuming that 10l model exists) 8RandomModel byRowid = mapper.findByRowID(10l); 9// Getting all models 10List\u0026lt;RandomModel\u0026gt; all = mapper.findAll(); 11// Getting model with condition (fetching 100 existing tigers) 12QueryParameters parameters = new QueryParameters(); 13parameters.setOffset(0l).setLimit(100l); 14SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 15builder.addField(AbstractRandomModel.RND_ANIMAL_CNAME) 16 .addSQLOperator(SQLiteOperator.EQUAL) 17 .addValue(Animals.TIGER.name()); 18List\u0026lt;RandomModel\u0026gt; hundredOfTigers = mapper.findWhere(builder.build(), parameters);\nAlready implemented find methods in KittyORM:\n   Method name Method description     findWhere(SQLiteCondition where, QueryParameters qParams) Returns list of models associated with records in backed database table that suits provided clause and query parameters.   findWhere(SQLiteCondition where) Returns list of models associated with records in backed database table that suits provided clause.   findAll(QueryParameters qParams) Returns list of all models associated with records in backed database table with usage of passed qParams.   findAll() Returns list of all models associated with records in backed database table.   findByRowID(Long rowid) Returns model filled with data from database or null if no record with provided rowid found.   findByPK(KittyPrimaryKey primaryKey) Returns model filled with data from database or null if no record with provided PK found.   findByIPK(Long ipk) Returns model filled with data from database or null if no record with provided IPK found.   findFirst(SQLiteCondition where) Returns first record in KittyModel wrapper in database table that suits provided condition.   findFirst() Returns first record in KittyModel wrapper in database table.   findLast(SQLiteCondition where) Returns last record in KittyModel wrapper in database table that suits provided condition.   findLast() Returns last record in KittyModel wrapper in database table.    Do not count collection received from findAll() method if you want to count all records in table, use already implemented sum and count methods!\n Tip #1  See following count and sum code example snippet: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Count all records in database 6long count = mapper.countAll(); 7// Count all dogs 8SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 9builder.addField(AbstractRandomModel.RND_ANIMAL_CNAME) 10 .addSQLOperator(SQLiteOperator.EQUAL) 11 .addValue(Animals.DOG.name()); 12long dogsCount = mapper.countWhere(builder.build()); 13// Sum all dog\u0026#39;s random_int 14long dogsRndIntSum = mapper.sum(\u0026#34;random_int\u0026#34;, builder.build());\nImplementing extended CRUD controller OK, this is simple, already implemented by KittyMapper methods allows you to do most of the database related operations, however you may want to extend KittyMapper CRUD controller and implement some methods that would be used commonly in your application. Here some steps to take:\n Define in KittyORM registry CRUD controller to be used with particular model by defining it in your KittyDatabase implementation class with usage @KITTY_DATABASE_REGISTRY at domainPairs or by defining it at your model implementation class with usage of @KITTY_EXTENDED_CRUD annotation: 1// Defining at registry example 2@KITTY_DATABASE( 3 databaseName = \u0026#34;basic_database\u0026#34;, 4 domainPackageNames = {\u0026#34;net.akaish.kittyormdemo.sqlite.basicdb\u0026#34;}, 5 ... 6) 7@KITTY_DATABASE_REGISTRY( 8 domainPairs = { 9 @KITTY_REGISTRY_PAIR(model = ComplexRandomModel.class, mapper = ComplexRandomMapper.class), 10 @KITTY_REGISTRY_PAIR(model = IndexesAndConstraintsModel.class), 11 @KITTY_REGISTRY_PAIR(model = RandomModel.class, mapper = RandomMapper.class) // registry CRUD controller definition 12 } 13) 14public class BasicDatabase extends KittyDatabase { 15 ... 16} 17// Defining at model example 18@KITTY_TABLE 19@KITTY_EXTENDED_CRUD(extendedCrudController = RandomMapper.class) // model CRUD controller definition 20@INDEX( 21 indexName = \u0026#34;random_animal_index\u0026#34;, 22 indexColumns = {AbstractRandomModel.RND_ANIMAL_CNAME} 23) 24public class RandomModel extends AbstractRandomModel { 25 ... 26}\n Create new class that extends KittyMapper.class, implement default constructor and locate it at domain package, fill it with your logic.  Click to view extended crud controller implementation example:  1public class RandomMapper extends KittyMapper { 2 3 public \u0026lt;M extends KittyModel\u0026gt; RandomMapper(KittyTableConfiguration tableConfiguration, 4 M blankModelInstance, 5 String databasePassword) { 6 super(tableConfiguration, blankModelInstance, databasePassword); 7 } 8 9 protected SQLiteCondition getAnimalCondition(Animals animal) { 10 return new SQLiteConditionBuilder() 11 .addField(RND_ANIMAL_CNAME) 12 .addSQLOperator(SQLiteOperator.EQUAL) 13 .addObjectValue(animal) 14 .build(); 15 } 16 17 public long deleteByRandomIntegerRange(int start, int end) { 18 SQLiteCondition condition = new SQLiteConditionBuilder() 19 .addField(\u0026#34;random_int\u0026#34;) 20 .addSQLOperator(GREATER_OR_EQUAL) 21 .addValue(start) 22 .addSQLOperator(AND) 23 .addField(\u0026#34;random_int\u0026#34;) 24 .addSQLOperator(LESS_OR_EQUAL) 25 .addValue(end) 26 .build(); 27 return deleteByWhere(condition); 28 } 29 30 public long deleteByAnimal(Animals animal) { 31 return deleteByWhere(getAnimalCondition(animal)); 32 } 33 34 public List\u0026lt;RandomModel\u0026gt; findByAnimal(Animals animal, long offset, long limit, boolean groupingOn) { 35 SQLiteCondition condition = getAnimalCondition(animal); 36 QueryParameters qparam = new QueryParameters(); 37 qparam.setLimit(limit).setOffset(offset); 38 if(groupingOn) 39 qparam.setGroupByColumns(RND_ANIMAL_CNAME); 40 else 41 qparam.setGroupByColumns(KittyConstants.ROWID); 42 return findWhere(condition, qparam); 43 } 44 45 public List\u0026lt;RandomModel\u0026gt; findByIdRange(long fromId, long toId, boolean inclusive, Long offset, Long limit) { 46 SQLiteCondition condition = new SQLiteConditionBuilder() 47 .addField(\u0026#34;id\u0026#34;) 48 .addSQLOperator(inclusive ? GREATER_OR_EQUAL : GREATER_THAN) 49 .addValue(fromId) 50 .addSQLOperator(AND) 51 .addField(\u0026#34;id\u0026#34;) 52 .addSQLOperator(inclusive ? LESS_OR_EQUAL : LESS_THAN) 53 .addValue(toId) 54 .build(); 55 QueryParameters qparam = new QueryParameters(); 56 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 57 return findWhere(condition, qparam); 58 } 59 60 public List\u0026lt;RandomModel\u0026gt; findAllRandomModels(Long offset, Long limit) { 61 QueryParameters qparam = new QueryParameters(); 62 qparam.setLimit(limit).setOffset(offset).setGroupByColumns(KittyConstants.ROWID); 63 return findAll(qparam); 64 } 65 66}\n  \nThat\u0026rsquo;s all, after this when you call getMapper(Class modelClass) of your KittyDatabase implementation you would receive ready to go your extended CRUD controller.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/makekittygreater/l6t4/",
	"title": "Sponsor KittyORM development",
	"tags": [],
	"description": "",
	"content": " Like KittyORM? Sponsor it! A lot of time spent to develop KittyORM and right now KittyORM is capable to fulfill most of your needs related with implementing database operations to support your business processes. It was hard work to bring KittyORM to you. You can help KittyORM to become more efficient, fast, stable etc. Just use it, share it or contribute to it. However, it would be great if you consider to help KittyORM with voluntary donation. Those donations would stimulate to work on KittyORM harder and would encourage KittyORM authors for implementing new features and help to purchase devices for testing.\n   Click here to view donation options: \n Donate with Bitcoin (BTC)\nReceive address: 1PXp31bcCAQpNGUWCS1b1wfPTP9kUArHmQ  Donate with Etherium (ETH)\nReceive address: 0x70eE63C296d8FE44D270E1cD367eF636C755ce48  Donate with Lightcoin (LTC)\nReceive address: LUK84ZJa2cfAH2igkv7amZ1nCVmEXHfqt9  Donate with RSK Mainnet (RBTC)\nReceive address: 0xd3a097C93a0a25E1232E2dF09Bd6D2168433673D  Donate with Bitcoin Cash (BCH)\nReceive address: 14R1JCxVFfHskWagNvaGYKmo9BFB7trDr9   No suitable donate option? Write to me directly at @akaish_0_o.\n\nEven more, you can buy author rights on KittyORM and receive good ORM, that you can use right now and distribute it under any license, as commercial software or share it with community under Open Source license. Contact us via email kittyorm@gmail.com or via telegram @akaish_0_o for any questions related with KittyORM project purchasing or with sponsoring KittyORM distribution conversion to other licenses.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/bulk/",
	"title": "KittyORM and bulk operations",
	"tags": [],
	"description": "",
	"content": " \n Demo application screenshots for this article  KittyORM by design provides several methods for updating, inserting and deleting collections of entities. If you want to save a collection of entities just call save(List\u0026lt;M\u0026gt; models) method of KittyMapper.class or its implementation and all models in provided collections would be updated or inserted (KittyORM would make a decision on this by processing POJO fields that can be used for unambiguous record definition in source table). Also, you can run update or insert methods directly, if you are sure that collection contains only new or existing entities. This approach also applicable for delete(List\u0026lt;M\u0026gt; models) method of KittyMapper.class and its implementations. Take a look at this example of bulk operations using KittyMapper.class CRUD controller: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Generating list of entities to insert 6List\u0026lt;RandomModel\u0026gt; toSave = new ArrayList\u0026lt;\u0026gt;(); 7// Filling this list with randomly generated POJOs 8RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(getContext()); 9for(int i = 0; i \u0026lt; 100; i++) { 10 toSave.add(rndFactory.newRandomModel()); 11} 12// Running bulk save 13mapper.save(toSave);\nBe aware of deleting entities with delete(List\u0026lt;M\u0026gt; models) that you are received from findWhere(SQLiteCondition where, QueryParameters qParams) (or other find method) with any clause. It\u0026rsquo;s not necessary, just use deleteWhere(SQLiteCondition condition) with this clause, it is much faster.\n Tip #1  KittyORM and bulk operations in transaction mode Using a lot of separate insertions is not really fast, because for each such operation SQLite would start its own query and this operation costs time. However, what to do when there are a lot of insertions (or record updates)? Just force KittyMapper to apply all your operations in transaction mode. This would force SQLite to run all your statements as a one query and this can speed up execution time of insertions up to 20x. It\u0026rsquo;s really useful feature when you need to save at your database big amounts of data. So, you can run your database write operations in transaction in two different ways:\n Apply bulk operation in transaction mode: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Generating list of entities to insert 6List\u0026lt;RandomModel\u0026gt; toSave = new ArrayList\u0026lt;\u0026gt;(); 7// Filling this list with randomly generated POJOs 8RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(getContext()); 9for(int i = 0; i \u0026lt; 100; i++) { 10 toSave.add(rndFactory.newRandomModel()); 11} 12// Running bulk save in transaction 13mapper.saveInTransaction(toSave);\n Start transaction manually, do all your write operations and finish transaction: 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Generating list of entities to insert 6List\u0026lt;RandomModel\u0026gt; toInsert = new ArrayList\u0026lt;\u0026gt;(); 7// Filling this list with randomly generated POJOs 8RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(getContext()); 9for(int i = 0; i \u0026lt; 100; i++) { 10 toInsert.add(rndFactory.newRandomModel()); 11} 12// Starting transaction for your database write operations 13startTransaction(TRANSACTION_MODES.NON_EXCLUSIVE_MODE); 14// Running some write database operations 15mapper.insert(toSave); 16SQLiteConditionBuilder builder = new SQLiteConditionBuilder(); 17builder.addField(AbstractRandomModel.RND_ANIMAL_CNAME) 18 .addSQLOperator(SQLiteOperator.EQUAL) 19 .addValue(Animals.DOG.name()); 20mapper.deleteWhere(); 21// Finishing transaction 22finishTransaction();\n  You may start your transaction in three modes: TRANSACTION_MODES.EXCLUSIVE_MODE, TRANSACTION_MODES.NON_EXCLUSIVE_MODE (API level 11 and higher) and TRANSACTION_MODES.LOCKING_FALSE_MODE (deprecated in API level 16). By default, KittyMapper.startTransaction() would start transaction in EXCLUSIVE_MODE. Refer to official Android documentation about transaction modes for more info.\n Tip #2  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/crud_operations/",
	"title": "CRUD operations",
	"tags": [],
	"description": "",
	"content": "   Lesson Lesson summary     Saving new entity Creating new entity and saving it into database with KittyORM. Tutorial database setup.   Updating existing entity Updating existing record (or records) in database with KittyORM.   Deleting entities Deleting existing record (or records) in database with KittyORM. Usage of SQLiteCinditionBuilder.class.   Finding entities Finding existing record (or records) in database with KittyORM. Implementing extended CRUD controller.   KittyORM and bulk operations How to perform bulk operations. Using transactions.    "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/datatype_mapping/",
	"title": "KittyORM datatypes mapping",
	"tags": [],
	"description": "",
	"content": " \u0026nbsp;\u0026nbsp;\n Demo application screenshots for this article  By design instead of mapping java types to SQLite supported SQL datatypes KittyORM maps them directly into SQLite affinities, KittyORM supports predefined mapping for primitive java types, primitive wrappers, byte array, enumerations and following types: java.lang.String, java.util.Date, java.util.Currency, java.util.Calendar, java.sql.Timestamp, java.math.BigInteger, java.math.BigDecimal, java.io.File, android.net.Uri.\nTEXT datatype affinity mapping\n   SQLite affinity Java type Notes     TEXT Enumurations To SQLite: Enum someValue.name(); from SQLite: fieldType.getMethod(\u0026quot;valueOf\u0026quot;, String.class).invoke(fieldType, cursor.getString(someIndex))   TEXT java.lang.String -   TEXT java.math.BigDecimal To SQLite: BigDecimal someValue.toString(); from SQLite: new BigDecimal(cursor.getString(someIndex))   TEXT android.net.Uri To SQLite: Uri someValue.toString(); from SQLite: Uri.parse(cursor.getString(someIndex))   TEXT java.io.File To SQLite: File someValue.getAbsolutePath(); from SQLite: new File(cursor.getString(someIndex))   TEXT java.math.BigInteger To SQLite: BigInteger someValue.toString(); from SQLite: new BigInteger(cursor.getString(someIndex))   TEXT java.util.Currency To SQLite: Currency someValue.getCurrencyCode(); from SQLite: Currency.getInstance(cursor.getString(someIndex))    INTEGER datatype affinity mapping\n   SQLite affinity Java type Notes     INTEGER java.util.Calendar To SQLite: Calendar someValue.getTimeInMillis(); from SQLite: Calendar.getInstance().setTimeInMillis( cursor.getLong(someIndex) )   INTEGER java.sql.Timestamp To SQLite: Timestamp someValue.getTime(); from SQLite: new Timestamp(cursor.getLong(someIndex))   INTEGER java.util.Date To SQLite: Date someValue.getTime(); from SQLite: new Date(cursor.getLong(someIndex))   INTEGER byte -   INTEGER int -   INTEGER long -   INTEGER short -   INTEGER boolean To SQLite: boolean someValue ? 1 : 0; from SQLite: cursor.getInt(someIndex) == 1   INTEGER java.lang.Byte -   INTEGER java.lang.Integer -   INTEGER java.lang.Long -   INTEGER java.lang.Short -   INTEGER java.lang.Boolean To SQLite: Boolean someValue ? 1 : 0; from SQLite: cursor.getInt(someIndex) == 1    REAL datatype affinity mapping\n   SQLite affinity Java type Notes     REAL float -   REAL double -   REAL java.lang.Float -   REAL java.lang.Double -    NONE datatype affinity mapping\n   SQLite affinity Java type Notes     NONE byte[] -   NONE java.lang.Byte[] -    Custom mapping rules By default, KittyORM provides mapping of most java types that you may want to use. However, KittyORM also offers some functionality for user defined mapping rules e.g. you can tell KittyORM how to store and retrieve any java objects you want. For those purposes KittyORM has KITTY_COLUMN_SERIALIZATION annotation with what you can achieve storing your objects or objects data as TEXT or NONE SQLite datatype affinities at your database. To use it, take following steps:\n Define at KittyModel.class implementation model table field with SQLite datatype affinity specified explicitly (TypeAffinities.TEXT, TypeAffinities.BLOB or TypeAffinities.NONE only). 1// Saving to text 2@KITTY_COLUMN( 3 columnOrder = 18, 4 columnAffinity = TypeAffinities.TEXT 5) 6@KITTY_COLUMN_SERIALIZATION 7public AnimalSounds stringSDF; 8 9// Saving to blob 10@KITTY_COLUMN( 11 columnOrder = 20, 12 columnAffinity = TypeAffinities.BLOB 13) 14@KITTY_COLUMN_SERIALIZATION 15public Bitmap byteArraySDF;\n Write your methods how to transform your object to string\\blob and back. If serializationMethodName or deserializationMethodName of KITTY_COLUMN_SERIALIZATION were not specified explicitly than KittyORM would try to call method String\\byte[] \u0026quot;fieldname\u0026quot; + Serialize for serialization (no parameters) and YourType \u0026quot;fieldName\u0026quot; + Deserialize for deserialization (String\\byte[] fromCursor as parameter). For example, for model field AnimalSounds stringSDF default serialization method would be String stringSDFSerialize() and default deserialization method would be AnimalSounds stringSDFDeserialize(String cvData). 1String stringSDFSerialize() { 2 if(stringSDF == null) return null; 3 return new GsonBuilder().create().toJson(stringSDF); 4} 5 6AnimalSounds stringSDFDeserialize(String cvData) { 7 if(cvData == null) return null; 8 if(cvData.length() == 0) return null; 9 return new GsonBuilder().create().fromJson(cvData, AnimalSounds.class); 10} 11 12public byte[] byteArraySDFSerialize() {//byteArraySDFSerialize 13 if(byteArraySDF == null) return null; 14 ByteArrayOutputStream bmpStream = new ByteArrayOutputStream(); 15 byteArraySDF.compress(Bitmap.CompressFormat.PNG, 100, bmpStream); 16 return bmpStream.toByteArray(); 17} 18 19public Bitmap byteArraySDFDeserialize(byte[] cursorData) { 20 if(cursorData == null) return null; 21 if(cursorData.length == 0) return null; 22 return BitmapFactory.decodeByteArray(cursorData, 0, cursorData.length); 23}\n  Now you are ready for using custom mapping rules with KittyORM. Congratulations.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/constraints/",
	"title": "Constraints and indexes declarations",
	"tags": [],
	"description": "",
	"content": " \n Demo application screenshots for this article  KittyORM supports indexes and constraints declaration by using annotations. Right now KittyORM offers you functionality to define seven supported by SQLite constraints without any need to define them in raw SQL code. Also in such way you can define table indexes. KittyORM is capable to define database schema with nearly all features that are supported by SQLite (SQL As Understood By SQLite) with usage only of annotations. In demo you can play with form for creating and inserting entity that declares all constraints and index.\nTable of contents  NOT NULL constraint declaration DEFAULT constraint declaration UNIQUE constraint declaration CHECK constraint declaration COLLATE constraint declaration PRIMARY KEY constraint declaration FOREIGN KEY constraint declaration Indexes declaration  NOT NULL constraint declaration To declare NOT NULL constraint just annotate corresponding model field with @NOT_NULL annotation. Example: 1@KITTY_COLUMN(columnOrder = 0) 2@PRIMARY_KEY 3@NOT_NULL // NOT NULL constraint declaration 4public Long id; Back to table of contents ^\nDEFAULT constraint declaration To declare DEFAULT constraint just annotate corresponding model field with @DEFAULT annotation. Example: 1@KITTY_COLUMN(columnOrder = 3) 2@DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 3@NOT_NULL 4public Integer defaultNumber; Without setting any fields of @DEFAULT annotation then default value for annotated field would be 0 (int, zero). KittyORM provide you some options on declaring default constraints, for example, you can set as a default value for field predefined LiteralValues enum element, signed integer, literal value or expression. Example of declaring DEFAULT constraint from predefined literals: 1@KITTY_COLUMN(columnOrder = 4) 2@DEFAULT( 3 predefinedLiteralValue = LiteralValues.CURRENT_DATE 4) 5@NOT_NULL 6public String creationDate; By design, KittyORM tries to insert NULL value from entity field to database at insert, so to avoid inserting NULL to database column that should acquire value from DEFAULT constraint before inserting model you have to invoke on this model KittyModel.setFieldExclusion(\u0026quot;modelFieldName\u0026quot;) method. Example: 1IndexesAndConstraintsModel model = new IndexesAndConstraintsModel(); 2model.animal = someAnimal; 3... 4model.setFieldExclusion(\u0026#34;creationDate\u0026#34;); // Forces KittyORM to exclude this field at insertion so DEFAULT constraint would be triggered 5... 6KittyMapper mapper = getDatabase().getMapper(IndexesAndConstraintsModel.class); 7mapper.save(model); 8mapper.close(); Back to table of contents ^\nUNIQUE constraint declaration You can declare UNIQUE constraint in two ways:\n To declare UNIQUE constraint only on one column than just annotate model corresponding field with @UNIQUE annotation. Example: 1@KITTY_COLUMN(columnOrder = 1) 2@NOT_NULL 3@UNIQUE 4public Long rndId; In order to set conflict clause just set @UNIQUE.onConflict field with any suitable value from ConflictClauses enum.\n To declare UNIQUE constraint on more than one column annotate model with @UNIQUE_T annotation. Example: 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13@UNIQUE_T(columns = {\u0026#34;rnd_id, animal\u0026#34;}) // Declaring unique constraint on more than two columns 14public class IndexesAndConstraintsModel extends KittyModel { 15 ... 16} In order to set conflict clause just set @UNIQUE_T.onConflict field with any suitable value from ConflictClauses enum.\nIn order to set UNIQUE constraint name set @UNIQUE_T.name otherwise it would be generated automatically.\nIf you need more than one UNIQUE constraint declaration defined with usage of @UNIQUE_T annotation, annotate model with UNIQUE_T_ARRAY.\n  Back to table of contents ^\nCHECK constraint declaration To declare CHECK constraint just annotate corresponding model field with @CHECK annotation and specify check expression. Example: 1@KITTY_COLUMN(columnOrder = 2) 2@CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) // only cats allowed to this party 3public Animals animal;\nBack to table of contents ^\nCOLLATE constraint declaration To declare COLLATE constraint just annotate corresponding model field with @COLLATE annotation and specify built-in collation. Example: 1@KITTY_COLUMN(columnOrder = 2) 2@COLLATE(collation = BuiltInCollations.NOCASE) // Collation example 3@CHECK(checkExpression = \u0026#34;animal IN (\\\u0026#34;CAT\\\u0026#34;, \\\u0026#34;TIGER\\\u0026#34;, \\\u0026#34;LION\\\u0026#34;)\u0026#34;) 4public Animals animal;\nBack to table of contents ^\nPRIMARY KEY constraint declaration You can declare PRIMARY KEY constraint in three ways:\n To define INTEGER PRIMARY KEY just set @KITTY_COLUMN.isIPK field value to true of corresponding model field. Example: 1@KITTY_COLUMN( 2 columnOrder = 0, 3 isIPK = true 4) 5public Long id;\n Second way to define PRIMARY KEY is to annotate corresponding model field with @PRIMARY_KEY annotation. Example: 1@KITTY_COLUMN(columnOrder = 0) 2@PRIMARY_KEY 3@NOT_NULL 4public Long id; In order to set order just set PRIMARY_KEY.orderAscDesc field with any suitable value from AscDesc enum.\nIn order to set AUTOIMCREMENT flag set @PRIMARY_KEY.autoincrement field to true (default false).\nIn order to set conflict clause just set @PRIMARY_KEY.onConflict field with any suitable value from ConflictClauses enum.\n Third way to define PRIMARY KEY is to annotate model implementation with @PRIMARY_KEY_T annotation and specify @PRIMARY_KEY_T.columns array. Example: 1@KITTY_TABLE(tableName = \u0026#34;cpk_test\u0026#34;) 2@PRIMARY_KEY_T( 3 columns = {\u0026#34;user_name\u0026#34;, \u0026#34;email\u0026#34;} 4) 5public class CPKModel extends KittyModel { 6 7 @KITTY_COLUMN(columnOrder = 0) 8 public String userName; 9 10 @KITTY_COLUMN(columnOrder = 1) 11 @UNIQUE 12 public String email; 13 14 ... 15} In order to set PRIMARY KEY constraint name set @PRIMARY_KEY_T.name otherwise it would be generated automatically.\nIn order to set conflict clause just set @PRIMARY_KEY_T.onConflict field with any suitable value from ConflictClauses enum.\n  Back to table of contents ^\nFOREIGN KEY constraint declaration You can declare FOREIGN KEY constraint in two ways:\n If you have only one column at table that refer to another table column you can just annotate corresponding model field with @FOREIGN_KEY annotation and specify @FOREIGN_KEY.reference with @FOREIGN_KEY_REFERENCE. Example: 1@KITTY_COLUMN(columnOrder = 1) 2@NOT_NULL 3@UNIQUE 4@FOREIGN_KEY( 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12public Long rndId;\n If you have more than one reference column at FOREIGN KEY declaration, annotate model with @FOREIGN_KEY_T annotation and specify @FOREIGN_KEY_T.reference with @FOREIGN_KEY_REFERENCE and @FOREIGN_KEY_T.columns with string array of reference columns. Example: 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) 13public class IndexesAndConstraintsModel extends KittyModel { 14 ... 15 16 @KITTY_COLUMN(columnOrder = 1) 17 @NOT_NULL 18 @UNIQUE 19 public Long rndId; 20 21 ... 22} In order to set FOREIGN KEY constraint name set @FOREIGN_KEY_T.name otherwise it would be generated automatically.\n  If you need more than one FK that can be declared only with @FOREIGN_KEY_T you can annotate model implementation @FOREIGN_KEY_T_ARRAY and specify at @FOREIGN_KEY_T_ARRAY.foreignKeys all foreign keys you need.\nAt @FOREIGN_KEY_REFERENCE annotation you have to specify reference table and columns by setting @FOREIGN_KEY_REFERENCE.foreignTableName and @FOREIGN_KEY_REFERENCE.foreignTableColumns. Optionally you can specify ON UPDATE and ON DELETE actions by setting @FOREIGN_KEY_REFERENCE.onUpdate and @FOREIGN_KEY_REFERENCE.onDelete with enum element from OnUpdateDeleteActions. Also, you can specify defferable option by setting @FOREIGN_KEY_REFERENCE.deferrableOption with some value DeferrableOptions enumeration.\nDo not forget to turn on foreign keys supports by setting @KITTY_DATABASE.isPragmaOn to true at your KittyORM database implementation if you want to use them!\n Tip #1  Back to table of contents ^\nIndexes declaration In KittyORM indexes declarations stored at same POJO classes that are used for schema generation. To declare an index just annotate model implementation with columns that would be indexed with @INDEX annotation and set @INDEX.indexColumns with array of those indexed columns or in case when there is only one indexed column for one index declaration just annotate corresponding nodel implementation field with @ONE_COLUMN_INDEX. Example:\n Index declaration with @INDEX annotation: 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2@FOREIGN_KEY_T( 3 name = \u0026#34;CAI_FK\u0026#34;, 4 columns = {IndexesAndConstraintsModel.RANDOM_ID_CNAME}, 5 reference = @FOREIGN_KEY_REFERENCE( 6 foreignTableName = \u0026#34;random\u0026#34;, 7 foreignTableColumns = {\u0026#34;id\u0026#34;}, 8 onUpdate = OnUpdateDeleteActions.CASCADE, 9 onDelete = OnUpdateDeleteActions.CASCADE 10 ) 11) 12@INDEX(indexColumns = {\u0026#34;creation_date\u0026#34;}) // index declaration 13public class IndexesAndConstraintsModel extends KittyModel { 14 ... 15 16 @KITTY_COLUMN(columnOrder = 4) 17 @DEFAULT( 18 predefinedLiteralValue = LiteralValues.CURRENT_DATE 19 ) 20 @NOT_NULL 21 public String creationDate; // indexed column 22 23 ... 24}\n Index declaration with @ONE_COLUMN_INDEX annotation: 1@KITTY_TABLE(tableName = \u0026#34;cai\u0026#34;) 2... 3public class IndexesAndConstraintsModel extends KittyModel { 4 ... 5 6 @KITTY_COLUMN(columnOrder = 5) 7 @DEFAULT( 8 predefinedLiteralValue = LiteralValues.CURRENT_TIMESTAMP 9 ) 10 // One column indexe declaration example 11 @ONE_COLUMN_INDEX(unique = true, indexName = \u0026#34;IAC_unique_index_creation_timestamp\u0026#34;) 12 @NOT_NULL 13 public Timestamp creationTmstmp; 14 15 ... 16}\n  For both @INDEX and @ONE_COLUMN_INDEX index declaration you can specify index uniqueness (@INDEX.unique and @ONE_COLUMN_INDEX.unique fields), IF NOT EXISTS flag (@INDEX.ifNotExists and @ONE_COLUMN_INDEX.ifNotExists fields), where expression (@INDEX.whereExpression and @ONE_COLUMN_INDEX.whereExpression fields) and index name (@INDEX.indexName and @ONE_COLUMN_INDEX.indexName fields).\nIf you need more than one index declaration with more than one indexed columns than annotate model implementation with @INDEX_ARRAY annotation and define your indexes there.\nBack to table of contents ^\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/migrations/",
	"title": "Migrations between different DB versions",
	"tags": [],
	"description": "",
	"content": "   Lesson Lesson summary     Migrations overview Some initial setup and info about database version migration mechanisms implemented by KittyORM.   DropCreate Migrator Simple migration mechanism that don\u0026rsquo;t care about your data.   Simple Migration Script Generator Migrator Migration mechanism that creates update script to save as much your data as possible.   Filescript Migrator Migrations mechanism that use predefined scripts for migration stored at assets or file system.    "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/speedup/",
	"title": "Speed up your KittyORM",
	"tags": [],
	"description": "",
	"content": " KittyORM build with Java7 for Android and main idea is to implement developer-friendly tool that would save your time and money on implementing business logic that needs SQLite database for storing data. KittyORM provides a lot of features that can save your time on developing and supporting your data model, but it uses reflection to avoid messing around with raw SQL code and some tools as generating data model from domain package. And it is not performance free. This tutorial page is kind of FAQ or cookbook of how to tune up your KittyORM implementation to achieve maximum performance. Main idea of this tutorial - use only those features you really need. And now goes list of tips.\nTip №1: Avoid using generating data model from packages KittyORM supports generating data model from classes that implements KittyModel.class and KittyMapper.class. It\u0026rsquo;s really handy feature, but slow. While generating list of classes in application namespace KittyDexUtils.class has to scan all classes that exist, check naming rules, get their instances with Class.forName(className, false, context.getClassLoader()); and check if classes are assignable from base model or mapper class, check if their package is domain package, check if those classes suits KittyDexClassFilter.class instance. It is very performance expensive operation, because typically there are hundreds or even thousands of classes that are available in application namespace.\nUse this feature only for development or testing purposes and on production it is better to define your data model with usage of KITTY_DATABASE_REGISTRY and KITTY_REGISTRY_PAIR annotations or by initializing static KittyORM registry collection and returning it in KittyDatabase implementation via overloaded KittyDatabase.getStaticRegistryRegistry() method.\nTip №2: Avoid multiply initialization of KittyDatabase Each new instance of KittyDatabase would execute a lot of operations on generating data model, registry, create and drop schema SQLite code etc. So, better approach would be place one initialized on demand instance of your KittyORM database into Application class and work only with this one instance.\nTip №3: Optimize your data model and statements That\u0026rsquo;s simple. You have a lot of SELECT queries on table with condition on some field? Index it. Build more efficient conditions for your statements. For example, you can follow this article for instructions related with optimizing your queries.\nYou want to insert a lot of entities? Use insert in transaction feature for DELETE, UPDATE and INSERT statements. For example, for insertions use KittyMapper.insertInTransaction(List\u0026lt;M\u0026gt; models). This would cause execution your queries at one time instead of forcing SQLite run each of your statement separately, so in some cases using this tip would cause up to 20x faster execution of insertions.\nTip №4: Do not use WITHOUT ROWID flag for your tables KittyORM uses rowid field for indication if this model is new or existing. If model corresponds to table that was created with WITHOUT ROWID flag than KittyORM would have to run much more operations related with fetching synthetic or natural primary key value(s) in order to differ models.\nTip №5: Use predefined drop, create and migration scripts at production While developing your data model step by step KittyORM would provide you good tool for generating scripts for creating schema, dropping schema and upgrading schema from version to version with usage of KittySimpleMigrationScriptGenerator Migrator. However, you can slightly decrease initialization times of your KittyDatabase implementation at production by using static scripts initialized in your KittyDatabase implementation instance or by using those scripts stored at assets or file system. Just develop your data model, save generated by KittyORM schema scripts and use them instead of generating those scripts each time when you initialize new instance of your KittyDatabase implementation.\nTip №6: Turn off logging at production OK, you\u0026rsquo;re ready for production. Do not forget to turn off logging by setting isLoggingOn(), isProductionOn() and isKittyDexUtilLoggingEnabled() flags of KITTY_DATABASE annotation to false, true and false respectively. You may leave isLoggingOn() flag on, however it is good idea to turn on isProductionOn() flag because all of your queries would be logged to log stream that slows execution of statements and is a potential security vulnerability.\nTip №7: Run expensive operations not in UI thread And last tip: run your database related operations in another thread, especially if there is chance that they can be expensive. Good practice is to run all database related operations in AsyncTask or use any other option to avoid execution of database code in UI thread. Why? Because SQLite is not as fast as light and KittyORM is another layer of code that needs resources for execution too. So using AsyncTask would be good idea to avoid UI lags and even ANR for long operations.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/debug/",
	"title": "Debugging KittyORM",
	"tags": [],
	"description": "",
	"content": "By design KittyORM able to log to logstream quite a lot of information in order to make it easier to implement KittyORM database in your application. Right now KittyORM has three types of logs: base log that logs main information such as errors and bootstrap messages, query log that logs queries sent to be executed by SQLite and dex utility log that logs what happens when KittyORM registry created from package.\nLogging can be enabled via KITTY_DATABASE annotation. To do this, set up return values of isLoggingOn, isProductionOn, isKittyDexUtilLoggingEnabled and logTag of KITTY_DATABASE annotation that annotates your KittyORM implementation database class. 1@KITTY_DATABASE( 2 isLoggingOn = true, // Base logging flag 3 isProductionOn = false, // Production logging flag 4 isKittyDexUtilLoggingEnabled = false, // dex logging flag 5 logTag = MigrationDBv3.LTAG, // log tag 6 databaseName = \u0026#34;mig\u0026#34;, // database name 7 databaseVersion = 3, // database version 8 ... 9) 10 11public class MigrationDBv3 extends KittyDatabase { 12 13 public static final String LTAG = \u0026#34;MIGv3\u0026#34;; 14 15 ... 16} Let\u0026rsquo;s take a closer look on base logging setting:\n isLoggingOn - main logging flag, by default - false. Setting this value to true would cause KittyORM log all errors, warnings and bootstrap info except log output of dex util and queries. When this value is false than no logging would be performed at all, even if isProductionOn flag is false and isKittyDexUtilLoggingEnabled flag is true. Most log messages would contain specified log tag, database name and database version to make debugging easier. isProductionOn- query logging, by default - true. When this value is false and isLoggingOn is true - logs queries sent to be executed by SQLite to log stream. Be sure that you turn production mode on when you\u0026rsquo;re ready to publish your application because logging queries to log stream is a potential security vulnerability and may slow down KittyORM when, for example, you need to save a big amount of entities to database. isKittyDexUtilLoggingEnabled - dex util logging flag, by default - false. When this value is true and isLoggingOn is true - logs messages related with usage of KittyDexUtils.class. Actually, it is bag idea to generate KittyORM registry from package at production builds, because it causes slow initialization of KittyORM implementation, refer to Speed up your KittyORM article for more details. logTag - log tag for all log messages related to this KittyORM database implementation. By default - \u0026quot;KittySQLiteORM\u0026quot;.  Also, you may make your query log more informative by overloading String toLogString() method of KittyModel.class implementation to log update and insert queries. Example: 1@KITTY_TABLE 2public class SimpleExampleModel extends KittyModel { 3 public SimpleExampleModel() { 4 super(); 5 } 6 7 @KITTY_COLUMN( 8 isIPK = true, 9 columnOrder = 0 10 ) 11 public Long id; 12 13 @KITTY_COLUMN(columnOrder = 1) 14 public int randomInteger; 15 16 @KITTY_COLUMN(columnOrder = 2) 17 public String firstName; 18 19 @Override 20 public String toString() { 21 StringBuilder sb = new StringBuilder(64); 22 return sb.append(\u0026#34;[ rowid = \u0026#34;) 23 .append(getRowID()) 24 .append(\u0026#34; ; id = \u0026#34;) 25 .append(id) 26 .append(\u0026#34; ; randomInteger = \u0026#34;) 27 .append(randomInteger) 28 .append(\u0026#34; ; firstName = \u0026#34;) 29 .append(firstName) 30 .append(\u0026#34; ]\u0026#34;) 31 .toString(); 32 } 33 34 public String toLogString() { 35 return toString(); 36 } 37}\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/encrypt/",
	"title": "Database encryption",
	"tags": [],
	"description": "",
	"content": "Right now KittyORM has no built-in functionality to provided partial or full database encryption. In future there are plans to implement AES128\\256 partial encryption but what if you want to encrypt your database right now? You can use third-party solutions for this. For example, you can use such great solution as SQLCipher. So, you want to encrypt your KittyORM database with SQLCipher. Here some steps to take:\n Integrate SQLCipher into your project. For example, use this tutorial to do that: SQLCipher for Android Application Integration. Get KittyORM library sources from KittyORM GitHub repository and add it to your project apart with your java sources or as AndroidStudio library module. Change all imports at KittyORM that import Android database classes to corresponding classes of SQLCipher. You can do it manually or run this script at KittyORM sources directory: #!/bin/bash find . -name \u0026#39;*.java\u0026#39; -exec sed -i -e \u0026#39;s/android.database.sqlite/net.sqlcipher.database/g\u0026#39; {} \\; find . -name \u0026#39;*.java\u0026#39; -exec sed -i -e \u0026#39;s/android.database/net.sqlcipher/g\u0026#39; {} \\;  Modify some methods of KittyDatabaseHelper.class for adding support of database encryption.  Click to view modified methods of KittyDatabaseHelper.class with encryption support:  1public SQLiteDatabase getWritableDatabase(String pwd) { 2 return super.getWritableDatabase(pwd); 3} 4 5public SQLiteDatabase getReadableDatabase(String pwd) { 6 return super.getReadableDatabase(pwd); 7} 8   Modify constructor of KittyDatabase.class for adding support of database encryption.  Click to view modified constructor of KittyDatabaseHelper.class with encryption support:  1public KittyDatabase(Context ctx, String databasePassword) { 2 net.sqlcipher.database.SQLiteDatabase.loadLibs(ctx); 3 4 ... // Old constructor code 5} 6   And, in theory, you are ready to use KittyORM with SQLCipher. Just initialize your KittyORM database implementation using public KittyDatabase(Context ctx, String databasePassword) constructor. However, nobody yet tested this integration :)  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/makekittygreater/",
	"title": "Make KittyORM greater",
	"tags": [],
	"description": "",
	"content": "You like KittyORM? With your help it can become even greater!\n   Page Page summary     Use KittyORM Use KittyORM in your projects and leave your feedback!   Share KittyORM You use KittyORM and you like it? Share it with those who can use for their projects.   Contribute to KittyORM Like KittyORM and have some ideas how to improve it? Here some steps how to become KittyORM project contributor.   Sponsor KittyORM Want to help KittyORM? Donate or even sponsor! Also, consider that KittyORM project purchasing is available.    "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/contacts/",
	"title": "Contacts",
	"tags": [],
	"description": "",
	"content": " Contact us via email:\nRight now you can write us email to kittyorm@gmail.com. Feel free to share your feedback or ideas how to enhance KittyORM.\n Stay in touch, follow us at twitter:\nJust follow us at our twitter account to be kept informed of developments in the elaboration of KittyORM.\n Stay in touch, follow us at telegram:\nJust subscribe to our telegram channel to be kept informed of developments in the elaboration of KittyORM.\n Have any questions? Ask them at stackoverflow:\nSo, you got some questions about using KittyORM in your project? Feel free to ask any related with KittyORM questions at stackoverflow: create your question, add \u0026ldquo;kittyorm\u0026rdquo; tag to it and there are big chances that I would try to help you from KittyORM stackoverflow account.\n And you\u0026rsquo;re always welcome at our GitHub:\nLeave your feedback, submit a bug report or leave a feature request at KittyORM GitHub project repository.\n Contact me directly at vk.com or telegram:\nAlso, you can contact me (Denis Bogomolov) directly at my personal vk.com account or my personal telegram account @akaish_0_o for any questions related with KittyORM.\n  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/license/",
	"title": "Legal information",
	"tags": [],
	"description": "",
	"content": " KittyORM project legal information KittyORM project consists of three main components, two of them are hosted at GitHub repository at https://github.com/akaish/KittyORM and licensed under Creative Commons license:\n KittyORM library - ORM library for SQLite\\Android that implements data mapper pattern. Author: Denis Bogomolov (Bogomolov Denis Romanovich).\nCopyright © 2018 Denis Bogomolov. Some rights reserved.\nKittyORM is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, US.\n KittyORM Demo application - demo application that shows KittyORM capabilities and contains tutorial for implementing KittyORM in android applications. Author: Denis Bogomolov (Bogomolov Denis Romanovich) Copyright © 2018 Denis Bogomolov. Some rights reserved.\nKittyORM Demo is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, US.\n  Third component is documentation pages and website located at https://akaish.github.io/KittyORMPages/.\n KittyORM documentation - KittyORM documentation, available at KittyORM Demo application and at KittyORM pages website. Author: Denis Bogomolov (Bogomolov Denis Romanovich)\nCopyright © 2018 Denis Bogomolov. Some rights reserved.\nKittyORM documentation is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-sa/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, US.  You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.\nNo warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.\n Notice  If you have any questions, feel free to contact us via e-mail (kittyorm@gmail.com) or write directly to Denis Bogomolov (akaish@mail.ru).\nKittyORM Demo legal information Disclaimer:\n Android is a trademark of the Google Inc. All other logos and trademarks are the property of their respective trademark owners. KittyORM Demo uses Gson library licensed under Apache v2.0 license. KittyORM Demo uses Android Sliding Up Panel licensed under Apache v2.0 license. KittyORM Demo uses Hugo for rendering documentation.   Notice  KittyORM Demo is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, US.\n Click to view Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License text:  Attribution-NonCommercial-NoDerivatives 4.0 International\n======================================================================= Creative Commons Corporation (\u0026quot;Creative Commons\u0026quot;) is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \u0026quot;as-is\u0026quot; basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible. Using Creative Commons Public Licenses Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses. Considerations for licensors: Our public licenses are intended for use by those authorized to give the public permission to use material in ways otherwise restricted by copyright and certain other rights. Our licenses are irrevocable. Licensors should read and understand the terms and conditions of the license they choose before applying it. Licensors should also secure all rights necessary before applying our licenses so that the public can reuse the material as expected. Licensors should clearly mark any material not subject to the license. This includes other CC- licensed material, or material used under an exception or limitation to copyright. More considerations for licensors: wiki.creativecommons.org/Considerations_for_licensors Considerations for the public: By using one of our public licenses, a licensor grants the public permission to use the licensed material under specified terms and conditions. If the licensor's permission is not necessary for any reason--for example, because of any applicable exception or limitation to copyright--then that use is not regulated by the license. Our licenses grant only permissions under copyright and certain other rights that a licensor has authority to grant. Use of the licensed material may still be restricted for other reasons, including because others have copyright or other rights in the material. A licensor may make special requests, such as asking that all changes be marked or described. Although not required by our licenses, you are encouraged to respect those requests where reasonable. More considerations for the public: wiki.creativecommons.org/Considerations_for_licensees ======================================================================= Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (\u0026quot;Public License\u0026quot;). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions. Section 1 -- Definitions. a. Adapted Material means material subject to Copyright and Similar Rights that is derived from or based upon the Licensed Material and in which the Licensed Material is translated, altered, arranged, transformed, or otherwise modified in a manner requiring permission under the Copyright and Similar Rights held by the Licensor. For purposes of this Public License, where the Licensed Material is a musical work, performance, or sound recording, Adapted Material is always produced where the Licensed Material is synched in timed relation with a moving image. b. Copyright and Similar Rights means copyright and/or similar rights closely related to copyright including, without limitation, performance, broadcast, sound recording, and Sui Generis Database Rights, without regard to how the rights are labeled or categorized. For purposes of this Public License, the rights specified in Section 2(b)(1)-(2) are not Copyright and Similar Rights. c. Effective Technological Measures means those measures that, in the absence of proper authority, may not be circumvented under laws fulfilling obligations under Article 11 of the WIPO Copyright Treaty adopted on December 20, 1996, and/or similar international agreements. d. Exceptions and Limitations means fair use, fair dealing, and/or any other exception or limitation to Copyright and Similar Rights that applies to Your use of the Licensed Material. e. Licensed Material means the artistic or literary work, database, or other material to which the Licensor applied this Public License. f. Licensed Rights means the rights granted to You subject to the terms and conditions of this Public License, which are limited to all Copyright and Similar Rights that apply to Your use of the Licensed Material and that the Licensor has authority to license. g. Licensor means the individual(s) or entity(ies) granting rights under this Public License. h. NonCommercial means not primarily intended for or directed towards commercial advantage or monetary compensation. For purposes of this Public License, the exchange of the Licensed Material for other material subject to Copyright and Similar Rights by digital file-sharing or similar means is NonCommercial provided there is no payment of monetary compensation in connection with the exchange. i. Share means to provide material to the public by any means or process that requires permission under the Licensed Rights, such as reproduction, public display, public performance, distribution, dissemination, communication, or importation, and to make material available to the public including in ways that members of the public may access the material from a place and at a time individually chosen by them. j. Sui Generis Database Rights means rights other than copyright resulting from Directive 96/9/EC of the European Parliament and of the Council of 11 March 1996 on the legal protection of databases, as amended and/or succeeded, as well as other essentially equivalent rights anywhere in the world. k. You means the individual or entity exercising the Licensed Rights under this Public License. Your has a corresponding meaning. Section 2 -- Scope. a. License grant. 1. Subject to the terms and conditions of this Public License, the Licensor hereby grants You a worldwide, royalty-free, non-sublicensable, non-exclusive, irrevocable license to exercise the Licensed Rights in the Licensed Material to: a. reproduce and Share the Licensed Material, in whole or in part, for NonCommercial purposes only; and b. produce and reproduce, but not Share, Adapted Material for NonCommercial purposes only. 2. Exceptions and Limitations. For the avoidance of doubt, where Exceptions and Limitations apply to Your use, this Public License does not apply, and You do not need to comply with its terms and conditions. 3. Term. The term of this Public License is specified in Section 6(a). 4. Media and formats; technical modifications allowed. The Licensor authorizes You to exercise the Licensed Rights in all media and formats whether now known or hereafter created, and to make technical modifications necessary to do so. The Licensor waives and/or agrees not to assert any right or authority to forbid You from making technical modifications necessary to exercise the Licensed Rights, including technical modifications necessary to circumvent Effective Technological Measures. For purposes of this Public License, simply making modifications authorized by this Section 2(a) (4) never produces Adapted Material. 5. Downstream recipients. a. Offer from the Licensor -- Licensed Material. Every recipient of the Licensed Material automatically receives an offer from the Licensor to exercise the Licensed Rights under the terms and conditions of this Public License. b. No downstream restrictions. You may not offer or impose any additional or different terms or conditions on, or apply any Effective Technological Measures to, the Licensed Material if doing so restricts exercise of the Licensed Rights by any recipient of the Licensed Material. 6. No endorsement. Nothing in this Public License constitutes or may be construed as permission to assert or imply that You are, or that Your use of the Licensed Material is, connected with, or sponsored, endorsed, or granted official status by, the Licensor or others designated to receive attribution as provided in Section 3(a)(1)(A)(i). b. Other rights. 1. Moral rights, such as the right of integrity, are not licensed under this Public License, nor are publicity, privacy, and/or other similar personality rights; however, to the extent possible, the Licensor waives and/or agrees not to assert any such rights held by the Licensor to the limited extent necessary to allow You to exercise the Licensed Rights, but not otherwise. 2. Patent and trademark rights are not licensed under this Public License. 3. To the extent possible, the Licensor waives any right to collect royalties from You for the exercise of the Licensed Rights, whether directly or through a collecting society under any voluntary or waivable statutory or compulsory licensing scheme. In all other cases the Licensor expressly reserves any right to collect such royalties, including when the Licensed Material is used other than for NonCommercial purposes. Section 3 -- License Conditions. Your exercise of the Licensed Rights is expressly made subject to the following conditions. a. Attribution. 1. If You Share the Licensed Material, You must: a. retain the following if it is supplied by the Licensor with the Licensed Material: i. identification of the creator(s) of the Licensed Material and any others designated to receive attribution, in any reasonable manner requested by the Licensor (including by pseudonym if designated); ii. a copyright notice; iii. a notice that refers to this Public License; iv. a notice that refers to the disclaimer of warranties; v. a URI or hyperlink to the Licensed Material to the extent reasonably practicable; b. indicate if You modified the Licensed Material and retain an indication of any previous modifications; and c. indicate the Licensed Material is licensed under this Public License, and include the text of, or the URI or hyperlink to, this Public License. For the avoidance of doubt, You do not have permission under this Public License to Share Adapted Material. 2. You may satisfy the conditions in Section 3(a)(1) in any reasonable manner based on the medium, means, and context in which You Share the Licensed Material. For example, it may be reasonable to satisfy the conditions by providing a URI or hyperlink to a resource that includes the required information. 3. If requested by the Licensor, You must remove any of the information required by Section 3(a)(1)(A) to the extent reasonably practicable. Section 4 -- Sui Generis Database Rights. Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material: a. for the avoidance of doubt, Section 2(a)(1) grants You the right to extract, reuse, reproduce, and Share all or a substantial portion of the contents of the database for NonCommercial purposes only and provided You do not Share Adapted Material; b. if You include all or a substantial portion of the database contents in a database in which You have Sui Generis Database Rights, then the database in which You have Sui Generis Database Rights (but not its individual contents) is Adapted Material; and c. You must comply with the conditions in Section 3(a) if You Share all or a substantial portion of the contents of the database. For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights. Section 5 -- Disclaimer of Warranties and Limitation of Liability. a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS, IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU. b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION, NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT, INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES, COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR IN PART, THIS LIMITATION MAY NOT APPLY TO YOU. c. The disclaimer of warranties and limitation of liability provided above shall be interpreted in a manner that, to the extent possible, most closely approximates an absolute disclaimer and waiver of all liability. Section 6 -- Term and Termination. a. This Public License applies for the term of the Copyright and Similar Rights licensed here. However, if You fail to comply with this Public License, then Your rights under this Public License terminate automatically. b. Where Your right to use the Licensed Material has terminated under Section 6(a), it reinstates: 1. automatically as of the date the violation is cured, provided it is cured within 30 days of Your discovery of the violation; or 2. upon express reinstatement by the Licensor. For the avoidance of doubt, this Section 6(b) does not affect any right the Licensor may have to seek remedies for Your violations of this Public License. c. For the avoidance of doubt, the Licensor may also offer the Licensed Material under separate terms or conditions or stop distributing the Licensed Material at any time; however, doing so will not terminate this Public License. d. Sections 1, 5, 6, 7, and 8 survive termination of this Public License. Section 7 -- Other Terms and Conditions. a. The Licensor shall not be bound by any additional or different terms or conditions communicated by You unless expressly agreed. b. Any arrangements, understandings, or agreements regarding the Licensed Material not stated herein are separate from and independent of the terms and conditions of this Public License. Section 8 -- Interpretation. a. For the avoidance of doubt, this Public License does not, and shall not be interpreted to, reduce, limit, restrict, or impose conditions on any use of the Licensed Material that could lawfully be made without permission under this Public License. b. To the extent possible, if any provision of this Public License is deemed unenforceable, it shall be automatically reformed to the minimum extent necessary to make it enforceable. If the provision cannot be reformed, it shall be severed from this Public License without affecting the enforceability of the remaining terms and conditions. c. No term or condition of this Public License will be waived and no failure to comply consented to unless expressly agreed to by the Licensor. d. Nothing in this Public License constitutes or may be interpreted as a limitation upon, or waiver of, any privileges and immunities that apply to the Licensor or You, including from the legal processes of any jurisdiction or authority. ======================================================================= Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the “Licensor.” The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \u0026quot;Creative Commons\u0026quot; or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. Creative Commons may be contacted at creativecommons.org.  \nAuthors: Denis Bogomolov (Bogomolov Denis Romanovich)\nCopyright © 2018 Denis Bogomolov. Some rights reserved.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/hidden/",
	"title": "Hidden",
	"tags": [],
	"description": "",
	"content": "TODO write it\n   Lesson Lesson summary     Saving new entity Creating new entity and saving it into database with KittyORM. Tutorial database setup.   Updating existing entity Updating existing record (or records) in database with KittyORM.   Deleting entities Deleting existing record (or records) in database with KittyORM. Usage of SQLiteCinditionBuilder.class.   Finding entities Finding existing record (or records) in database with KittyORM. Implementing extended CRUD controller.    "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/",
	"title": "Index page",
	"tags": [],
	"description": "",
	"content": " What is KittyORM? KittyORM is an Object-Relational Mapping library designed for use with Android and SQLite. It implements Data Mapper pattern design and its main purpose is to simplify interaction with SQLite database in Android applications. Written in Java 7 it supports devices from API level 9 Android.\nMain features we want to achieve with KittyORM are:  simple and clear API that handles database creation, version management and interaction with database tables; high flexibility of working with model POJO files via database mappers that grants you an ability to focus on your business processes not on working with raw SQL queries; full support of all features to create your SQLite schema via built-in annotations. That means that you can use all SQLite features described at SQLite documentation to create your schema only with usage of KittyORM annotations (indexes, constraints etc); flexible way to manage all things you may want to change or implement. Typical KittyORM database consists of database bootstrap class implementation that handles all actions to get all stuff working, database helper implementation and list of models and data mappers stored in map, all of those are friendly for customization; quite good performance speed of executing business logic that achieved with on start generation of database configuration that helps to avoid a lot of reflection calls.  Main idea of creating KittyORM is to offer a tool that would suit both people who want to use all power of SQLite and people who want just to work with simple database of few tables to store data without messing with raw SQL.\nSo, what KittyORM has right now?  Full support of SQLite syntax to create a database schema implemented via KittyORM annotations. Supporting of mapping SQLite affinities to Java’s primitives, primitive wrappers and common objects such Date, BigInteger etc. Also, enumerations supported as well as user defined mapping (for example, NONE → Bitmap and back). Basic CRUD controller that can handle all typical CRUD operations. Support of extending default CRUD controller. QueryBuilder that offers simple creation of some extended queries to be used standalone or as part of extended CRUD controller. POJO models inheritance supported, that means that you can use abstract POJO class that would be inherited in child implementations. Also, KittyORM supports temporary tables and non-schema POJO models (those models can be used for querying database but wouldn’t be used at schema generation). Multidomain support (e.g. you can use as many databases in your application as you want). Not bad performance. You can tune your KittyORM database to avoid a big amount of reflection calls by setting your KittyORM database class by your own and placing it into Android Application class instance. Support of database version management. KittyORM provides you three migration options: DropCreate Migrator, FileScript Migrator and SimpleMigrationScriptGenerator Migrator. Ready for database encryption implementation. Simple but really flexible API. Practically, most components of KittyORM can be customized to suit your needs. Good documentation contains tutorial with code snippets, javadoc and demo application available at TODO [add link when application would be published]  \n KittyORM Demo application screenshots  Things to do in future releases:  One-To-One and One-To-Many relation handling via implementing SQLite queries using JOIN operator. KittyORM standalone static code generator application to provide generation of mappers and models based on KittyORM implementation that would not use reflection calls. Partial standalone database encryption with AES.  And some other features as well.\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/hidden/android/",
	"title": "KittyORM Demo at Play Market",
	"tags": [],
	"description": "",
	"content": "Hi, check out KittyORM Demo at Google Play. KittyORM Demo application is not only some demo that would help you understand capabilities of KittyORM but also it is an interactive tutorial with build-in documentation, code snippets etc that would help to implement any KittyORM feature in your projects.\n\n KittyORM Demo application screenshots  "
},
{
	"uri": "https://akaish.github.io/KittyORMPages/_footer/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "KittyORM project. Copyright © 2018 Denis Bogomolov. Some rights reserved.\nKittyORM documentation site powered by Hugo with DocDock theme.\n\n \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;  \u0026nbsp;\u0026nbsp;\n\n"
},
{
	"uri": "https://akaish.github.io/KittyORMPages/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://akaish.github.io/KittyORMPages/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]