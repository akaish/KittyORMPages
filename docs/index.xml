<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index page on KittyORM: Fast and reliable ORM for SQLite\Android</title>
    <link>https://akaish.github.io/KittyORMPages/</link>
    <description>Recent content in Index page on KittyORM: Fast and reliable ORM for SQLite\Android</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Dec 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://akaish.github.io/KittyORMPages/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/constraints/l3_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/constraints/l3_schema/</guid>
      <description>Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (&amp;#34;CAT&amp;#34;, &amp;#34;TIGER&amp;#34;, &amp;#34;LION&amp;#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/bulk/l2_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/bulk/l2_schema/</guid>
      <description>Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (&amp;#34;CAT&amp;#34;, &amp;#34;TIGER&amp;#34;, &amp;#34;LION&amp;#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/delete/l2_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/delete/l2_schema/</guid>
      <description>Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (&amp;#34;CAT&amp;#34;, &amp;#34;TIGER&amp;#34;, &amp;#34;LION&amp;#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/find/l2_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/find/l2_schema/</guid>
      <description>Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (&amp;#34;CAT&amp;#34;, &amp;#34;TIGER&amp;#34;, &amp;#34;LION&amp;#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/save/l2_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/save/l2_schema/</guid>
      <description>Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (&amp;#34;CAT&amp;#34;, &amp;#34;TIGER&amp;#34;, &amp;#34;LION&amp;#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/update/l2_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/update/l2_schema/</guid>
      <description>Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (&amp;#34;CAT&amp;#34;, &amp;#34;TIGER&amp;#34;, &amp;#34;LION&amp;#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/datatype_mapping/l3_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/datatype_mapping/l3_schema/</guid>
      <description>Create schema script generated by KittyORM for schema basic_database v. 1 CREATE TABLE IF NOT EXISTS cai (id INTEGER NOT NULL PRIMARY KEY, rnd_id INTEGER NOT NULL UNIQUE, animal TEXT CHECK (animal IN (&amp;#34;CAT&amp;#34;, &amp;#34;TIGER&amp;#34;, &amp;#34;LION&amp;#34;)), default_number INTEGER NOT NULL DEFAULT 28, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , creation_tmstmp INTEGER NOT NULL DEFAULT CURRENT_TIMESTAMP , CONSTRAINT CAI_FK FOREIGN KEY(rnd_id) REFERENCES random (id) ON UPDATE CASCADE ON DELETE CASCADE); CREATE INDEX IF NOT EXISTS basic_database_cai_creation_date_INDEX ON cai (creation_date); CREATE UNIQUE INDEX IF NOT EXISTS IAC_unique_index_creation_timestamp ON cai (creation_tmstmp); CREATE TABLE IF NOT EXISTS random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, random_animal_says TEXT); CREATE INDEX IF NOT EXISTS random_animal_index ON random (rndanimal); CREATE TABLE IF NOT EXISTS complex_random (id INTEGER NOT NULL PRIMARY KEY ASC, random_int INTEGER, rnd_int_custom_column_name INTEGER, rndanimal TEXT, random_animal_name TEXT, bool_f INTEGER, byte_f INTEGER, double_f REAL, long_f INTEGER, short_f INTEGER, float_f REAL, byte_array NONE, string_f TEXT, big_decimal_f TEXT, big_integer_f TEXT, uri_f TEXT, file_f TEXT, currency_f TEXT, string_s_d_f TEXT, bitmap_colour TEXT, byte_array_s_d_f BLOB, bool_f_f INTEGER, byte_f_f INTEGER, double_f_f REAL, short_f_f INTEGER, float_f_f REAL, long_f_f INTEGER, date_f INTEGER, calendar_f INTEGER, timestamp_f INTEGER); Drop schema script generated by KittyORM for schema basic_database v.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/getting_started/l1_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/getting_started/l1_schema/</guid>
      <description> Create schema script generated by KittyORM for schema simple_database v. 1 CREATE TABLE IF NOT EXISTS simple_example (id INTEGER NOT NULL PRIMARY KEY ASC, random_integer INTEGER, first_name TEXT); Drop schema script generated by KittyORM for schema simple_database v. 1 DROP TABLE IF EXISTS simple_example; </description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/dropcreate/l5t2_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/dropcreate/l5t2_schema/</guid>
      <description> Create schema script generated by KittyORM for database mig version 2 CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228, current_timestamp INTEGER); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT); CREATE INDEX IF NOT EXISTS m2_sa_index ON mig_two (some_animal); Drop schema script generated by KittyORM for database mig version 2 DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; Migration script generated by KittyORM for database mig from version 1 to version 2 (DC migrator) DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228, current_timestamp INTEGER); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT); CREATE INDEX IF NOT EXISTS m2_sa_index ON mig_two (some_animal); </description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/fsmigrations/l5t4_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/fsmigrations/l5t4_schema/</guid>
      <description>Create schema script for database mig version 4 CREATE TABLE IF NOT EXISTS mig_four (id INTEGER NOT NULL PRIMARY KEY ASC, mig_three_reference INTEGER NOT NULL REFERENCES mig_three (id) ON UPDATE NO ACTION ON DELETE NO ACTION, mig_two_reference INTEGER NOT NULL REFERENCES mig_two (id) ON UPDATE NO ACTION ON DELETE NO ACTION, creation_date INTEGER NOT NULL DEFAULT CURRENT_DATE ); CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, new_sv_name TEXT NOT NULL DEFAULT &amp;#39;Something random&amp;#39;, random_long INTEGER DEFAULT 22); CREATE INDEX IF NOT EXISTS m3_rnd_long ON mig_three (random_long); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER, some_animal TEXT, some_animal_sound TEXT); Drop schema script for database mig version 4 DROP TABLE IF EXISTS mig_four; DROP TABLE IF EXISTS mig_three; DROP TABLE IF EXISTS mig_two; Migration script for database mig from version 3 to version 4 (Filescript migrator) -- minus FK M2.</description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/overview/l5t1_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/overview/l5t1_schema/</guid>
      <description> Create schema script generated by KittyORM for database mig version 1 CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL, some_integer INTEGER); Drop schema script generated by KittyORM for database mig version 1 DROP TABLE IF EXISTS mig_one; </description>
    </item>
    
    <item>
      <title>DB schema</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/simplemigrations/l5t3_schema/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/simplemigrations/l5t3_schema/</guid>
      <description>Create schema script generated by KittyORM for database mig version 3 CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT &amp;#39;Something random&amp;#39;); CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); CREATE TABLE IF NOT EXISTS mig_two (id INTEGER NOT NULL PRIMARY KEY ASC, mig_one_reference INTEGER REFERENCES mig_one (id) ON UPDATE CASCADE ON DELETE CASCADE, some_animal TEXT, some_animal_sound TEXT); Drop schema script generated by KittyORM for database mig version 3 DROP TABLE IF EXISTS mig_one; DROP TABLE IF EXISTS mig_two; DROP TABLE IF EXISTS mig_three; Migration script generated by KittyORM for database mig from version 2 to version 3 (SimpleMigrationScriptGenerator migrator) ALTER TABLE mig_one RENAME TO mig_one_t_old; CREATE TABLE IF NOT EXISTS mig_one (id INTEGER NOT NULL PRIMARY KEY ASC, creation_date TEXT NOT NULL DEFAULT CURRENT_DATE , default_integer INTEGER DEFAULT 228); INSERT INTO mig_one (id, creation_date, default_integer) SELECT id, creation_date, default_integer FROM mig_one_t_old; DROP TABLE IF EXISTS mig_one_t_old; CREATE INDEX IF NOT EXISTS m1_di_index ON mig_one (default_integer); ALTER TABLE mig_two ADD COLUMN some_animal_sound; CREATE TABLE IF NOT EXISTS mig_three (id INTEGER NOT NULL PRIMARY KEY ASC, some_value TEXT NOT NULL DEFAULT &amp;#39;Something random&amp;#39;); DROP INDEX IF EXISTS mig.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/constraints/l3t2_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/constraints/l3t2_code/</guid>
      <description>KittyORM constraint declaration examples   Click to view NOT NULL constraint declaration example:  1@KITTY_COLUMN(columnOrder = 0) 2@PRIMARY_KEY 3@NOT_NULL // NOT NULL constraint declaration 4public Long id; 
  Click to view DEFAULT constraint declaration examples:  1@KITTY_COLUMN(columnOrder = 3) 2@DEFAULT(signedInteger = 28) // You can choose for options for default declaration, if nothing set than 0 value would be used 3@NOT_NULL 4public Integer defaultNumber; 5 6@KITTY_COLUMN(columnOrder = 4) 7@DEFAULT( 8 predefinedLiteralValue = LiteralValues.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/bulk/l2t5_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/bulk/l2t5_code/</guid>
      <description>KittyORM bulk save example 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Generating list of entities to insert 6List&amp;lt;RandomModel&amp;gt; toSave = new ArrayList&amp;lt;&amp;gt;(); 7// Filling this list with randomly generated POJOs 8RNDRandomModelFactory rndFactory = new RNDRandomModelFactory(getContext()); 9for(int i = 0; i &amp;lt; 100; i++) { 10 toSave.add(rndFactory.newRandomModel()); 11} 12// Running bulk save 13mapper.save(toSave); KittyORM bulk save in transaction mode example  1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/delete/l2t3_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/delete/l2t3_code/</guid>
      <description>KittyORM delete example  1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel toDelete = mapper.findByIPK(0l); 7// Deleting model 8long rowsAffected = mapper.delete(toDelete); 1// Deleting by random_int range 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Creating clause for deletion 6SQLiteCondition condition = new SQLiteConditionBuilder() 7 .</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/find/l2t4_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/find/l2t4_code/</guid>
      <description>KittyORM find example 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel byIPK = mapper.findByIPK(0l); 7// Getting existing model with rowid (assuming that 10l model exists) 8RandomModel byRowid = mapper.findByRowID(10l); 9// Getting all models 10List&amp;lt;RandomModel&amp;gt; all = mapper.findAll(); 11// Getting model with condition (fetching 100 existing tigers) 12QueryParameters parameters = new QueryParameters(); 13parameters.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/save/l2t1_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/save/l2t1_code/</guid>
      <description>KittyORM insertion example 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Initializing model 6RandomModel toInsert = new RandomModel(); 7// Setting model fields 8toInsert.randomInt = 10; 9... 10// Saving model with save method 11mapper.save(toInsert); 12// Saving model with direct insert call 13mapper.insert(toInsert); KittyORM basic_datase implementation sources   Click to view BasicDatabase.class:  1@KITTY_DATABASE( 2 databaseName = &amp;#34;basic_database&amp;#34;, 3 domainPackageNames = {&amp;#34;net.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/crud_operations/update/l2t2_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/crud_operations/update/l2t2_code/</guid>
      <description>KittyORM update example  1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.getMapper(RandomModel.class); 5// Getting existing model from database (assuming that 0l model exists) 6RandomModel toUpdate = mapper.findByIPK(0l); 7// Setting model fields 8toUpdate.randomInt = 12; 9... 10// Saving model with save method 11mapper.save(toUpdate); 12// Saving model with direct insert call 13mapper.update(toInsert); 1// Initializing database instance 2BasicDatabase db = new BasicDatabase(getContext()); 3// Getting mapper instance 4RandomMapper mapper = (RandomMapper) db.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/datatype_mapping/l3t1_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/datatype_mapping/l3t1_code/</guid>
      <description>KittyORM custom mapping implementation example   Click to view model field annotation example:  1// Saving to text 2@KITTY_COLUMN( 3 columnOrder = 18, 4 columnAffinity = TypeAffinities.TEXT 5) 6@KITTY_COLUMN_SERIALIZATION 7public AnimalSounds stringSDF; 8 9// Saving to blob 10@KITTY_COLUMN( 11 columnOrder = 20, 12 columnAffinity = TypeAffinities.BLOB 13) 14@KITTY_COLUMN_SERIALIZATION 15public Bitmap byteArraySDF; 
  Click to serialization\deserialization methods implementation examples:  1String stringSDFSerialize() { 2 if(stringSDF == null) return null; 3 return new GsonBuilder().</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/debug/l4t2_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/debug/l4t2_code/</guid>
      <description>Example of KittyORM logging setup: 1@KITTY_DATABASE( 2 isLoggingOn = true, // Base logging flag 3 isProductionOn = false, // Production logging flag 4 isKittyDexUtilLoggingEnabled = false, // dex logging flag 5 logTag = MigrationDBv3.LTAG, // log tag 6 databaseName = &amp;#34;mig&amp;#34;, // database name 7 databaseVersion = 3, // database version 8 ... 9) 10 11public class MigrationDBv3 extends KittyDatabase { 12 13 public static final String LTAG = &amp;#34;MIGv3&amp;#34;; 14 15 .</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/encrypt/l4t3_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/encrypt/l4t3_code/</guid>
      <description>Example script for changing all imports at KittyORM that import Android database classes to corresponding classes of SQLCipher: #!/bin/bash find . -name &amp;#39;*.java&amp;#39; -exec sed -i -e &amp;#39;s/android.database.sqlite/net.sqlcipher.database/g&amp;#39; {} \; find . -name &amp;#39;*.java&amp;#39; -exec sed -i -e &amp;#39;s/android.database/net.sqlcipher/g&amp;#39; {} \; Modifying methods of KittyDatabaseHelper.class for encryption support: 1public SQLiteDatabase getWritableDatabase(String pwd) { 2 return super.getWritableDatabase(pwd); 3} 4 5public SQLiteDatabase getReadableDatabase(String pwd) { 6 return super.getReadableDatabase(pwd); 7} Modifying сonstructor of KittyDatabase.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/getting_started/l1_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/getting_started/l1_code/</guid>
      <description>Database, model, supporting classes  Click to view SimpleDatabase.class 1package net.akaish.kittyormdemo.sqlite.introductiondb; 2 3import android.content.Context; 4 5import net.akaish.kitty.orm.KittyDatabase; 6import net.akaish.kitty.orm.annotations.KITTY_DATABASE; 7 8/** 9* Created by akaish on 09.08.18. 10*/ 11@KITTY_DATABASE( 12 isLoggingOn = true, 13 isProductionOn = false, 14 domainPackageNames = {&amp;#34;net.akaish.kittyormdemo.sqlite.introductiondb&amp;#34;} 15) 16public class SimpleDatabase extends KittyDatabase { 17 /** 18* KittyORM main database class that represents bootstrap and holder for all related with database 19* components. 20* &amp;lt;br&amp;gt; See {@link KittyDatabase#KittyDatabase(Context, String)} for more info.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/dropcreate/l5t2_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/dropcreate/l5t2_code/</guid>
      <description>KittyORM mig v.2 implementation sources**   Click to view MigrationDBv2.class:  1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 databaseName = &amp;#34;mig&amp;#34;, 5 databaseVersion = 2, 6 logTag = MigrationDBv2.LTAG, 7 domainPackageNames = {&amp;#34;net.akaish.kittyormdemo.sqlite.migrations.migv2&amp;#34;} 8) 9@KITTY_DATABASE_REGISTRY( 10 domainModels = { 11 net.akaish.kittyormdemo.sqlite.migrations.migv2.MigOneModel.class, 12 net.akaish.kittyormdemo.sqlite.migrations.migv2.MigTwoModel.class 13 } 14) 15@KITTY_DATABASE_HELPER( 16 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.DROP_AND_CREATE 17) 18public class MigrationDBv2 extends KittyDatabase { 19 20 public static final String LTAG = &amp;#34;MIGv2&amp;#34;; 21 22 /** 23* KittyORM main database class that represents bootstrap and holder for all related with database 24* components.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/fsmigrations/l5t4_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/fsmigrations/l5t4_code/</guid>
      <description>KittyORM mig v.4 implementation sources   Click to view MigrationDBv4.class:  1@KITTY_DATABASE( 2 isLoggingOn = false, 3 isProductionOn = true, 4 isKittyDexUtilLoggingEnabled = false, 5 databaseName = &amp;#34;mig&amp;#34;, 6 domainPackageNames = {&amp;#34;net.akaish.kittyormdemo.sqlite.migrations.migv4&amp;#34;}, 7 databaseVersion = 4, 8 logTag = MigrationDBv4.LTAG 9) 10@KITTY_DATABASE_REGISTRY( 11 domainModels = { 12 net.akaish.kittyormdemo.sqlite.migrations.migv4.MigTwoModel.class, 13 net.akaish.kittyormdemo.sqlite.migrations.migv4.MigThreeModel.class, 14 net.akaish.kittyormdemo.sqlite.migrations.migv4.MigFourModel.class 15 } 16) 17@KITTY_DATABASE_HELPER( 18 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.USE_FILE_MIGRATIONS 19) 20public class MigrationDBv4 extends KittyDatabase { 21 22 public static final String LTAG = &amp;#34;MIGv4&amp;#34;; 23 24 /** 25* KittyORM main database class that represents bootstrap and holder for all related with database 26* components.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/overview/l5t1_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/overview/l5t1_code/</guid>
      <description>KittyORM mig v.1 implementation sources   Click to view MigrationDBv1.class:  1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 databaseName = &amp;#34;mig&amp;#34;, 5 databaseVersion = 1, 6 logTag = MigrationDBv1.LTAG, 7 domainPackageNames = {&amp;#34;net.akaish.kittyormdemo.sqlite.migrations.migv1&amp;#34;} 8) 9@KITTY_DATABASE_REGISTRY( 10 domainModels = {net.akaish.kittyormdemo.sqlite.migrations.migv1.MigOneModel.class} 11) 12public class MigrationDBv1 extends KittyDatabase { 13 14 public static final String LTAG = &amp;#34;MIGv1&amp;#34;; 15 16 /** 17* KittyORM main database class that represents bootstrap and holder for all related with database 18* components.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/migrations/simplemigrations/l5t3_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/migrations/simplemigrations/l5t3_code/</guid>
      <description>KittyORM mig v.3 implementation sources   Click to view MigrationDBv3.class:  1@KITTY_DATABASE( 2 isLoggingOn = true, 3 isProductionOn = false, 4 isKittyDexUtilLoggingEnabled = false, 5 logTag = MigrationDBv3.LTAG, 6 databaseName = &amp;#34;mig&amp;#34;, 7 databaseVersion = 3, 8 domainPackageNames = {&amp;#34;net.akaish.kittyormdemo.sqlite.migrations.migv3&amp;#34;} 9) 10@KITTY_DATABASE_REGISTRY( 11 domainModels = { 12 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigOneModel.class, 13 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigTwoModel.class, 14 net.akaish.kittyormdemo.sqlite.migrations.migv3.MigThreeModel.class 15 } 16) 17@KITTY_DATABASE_HELPER( 18 onUpgradeBehavior = KITTY_DATABASE_HELPER.UpgradeBehavior.USE_SIMPLE_MIGRATIONS 19) 20public class MigrationDBv3 extends KittyDatabase { 21 22 public static final String LTAG = &amp;#34;MIGv3&amp;#34;; 23 /** 24* KittyORM main database class that represents bootstrap and holder for all related with database 25* components.</description>
    </item>
    
    <item>
      <title>Source code</title>
      <link>https://akaish.github.io/KittyORMPages/speedup/l4t1_code/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/speedup/l4t1_code/</guid>
      <description>Tip №1: Avoid using generating data model from packages    Click to view static registry initialization via annotations example:  1@KITTY_DATABASE( 2 databaseName = &amp;#34;basic_database&amp;#34;, 3 domainPackageNames = {&amp;#34;net.akaish.kittyormdemo.sqlite.basicdb&amp;#34;}, 4 logTag = LOG_TAG, 5 isLoggingOn = true, 6 isProductionOn = true, 7 isPragmaOn = true 8) 9@KITTY_DATABASE_REGISTRY( 10 // You can just define set of domain models and extended crud controllers (mappers) would 11 // be added only if those models are annotated with KITTY_EXTENDED_CRUD annotation.</description>
    </item>
    
    <item>
      <title>Use KittyORM</title>
      <link>https://akaish.github.io/KittyORMPages/makekittygreater/l6t1/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/makekittygreater/l6t1/</guid>
      <description>Use KittyORM in your projects and leave your feedback! It is very simple to make KittyORM even greater. Just use it in your projects and leave your feedback. Easy as a pie:
 Visit KittyORM page located at https://akaish.github.io/KittyORMPages/ or KittyORM GitHub repository located at https://github.com/akaish/KittyORM to acquire instructions on configuring your project in order to use KittyORM.
 Implement your business logic without messing with SQL and a lot of boiler plate code for database operations.</description>
    </item>
    
    <item>
      <title>Share KittyORM</title>
      <link>https://akaish.github.io/KittyORMPages/makekittygreater/l6t2/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/makekittygreater/l6t2/</guid>
      <description>Like KittyORM? Share it! You use KittyORM and you like it? Share it with those who can use for their projects. That&amp;rsquo;s simple. It is really easy way to help to improve KittyORM, more people use it means more feedback, bug reports or feature request would be received. Bigger community means greater opportunities for KittyORM project and all other projects that use it or would use it for database related operations.</description>
    </item>
    
    <item>
      <title>Contribute to KittyORM</title>
      <link>https://akaish.github.io/KittyORMPages/makekittygreater/l6t3/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/makekittygreater/l6t3/</guid>
      <description>Like KittyORM? Develop it! Like KittyORM and have some ideas how to improve it? Have some free time you want to spend to develop KittyORM? Would like to help to translate KittyORM documentation to more languages? You&amp;rsquo;re welcome! Contact us via email kittyorm@gmail.com with subject contains !contribute and become a contributor! What things you can do right now?
 KittyORM code right now not covered with unit tests. It would be awesome to fix this situation.</description>
    </item>
    
    <item>
      <title>Sponsor KittyORM development</title>
      <link>https://akaish.github.io/KittyORMPages/makekittygreater/l6t4/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/makekittygreater/l6t4/</guid>
      <description>Like KittyORM? Sponsor it! A lot of time spent to develop KittyORM and right now KittyORM is capable to fulfill most of your needs related with implementing database operations to support your business processes. It was hard work to bring KittyORM to you. You can help KittyORM to become more efficient, fast, stable etc. Just use it, share it or contribute to it. However, it would be great if you consider to help KittyORM with voluntary donation.</description>
    </item>
    
    <item>
      <title>KittyORM Demo at Play Market</title>
      <link>https://akaish.github.io/KittyORMPages/hidden/android/</link>
      <pubDate>Sat, 15 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/hidden/android/</guid>
      <description>Hi, check out KittyORM Demo at Google Play. KittyORM Demo application is not only some demo that would help you understand capabilities of KittyORM but also it is an interactive tutorial with build-in documentation, code snippets etc that would help to implement any KittyORM feature in your projects.

 KittyORM Demo application screenshots  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://akaish.github.io/KittyORMPages/_footer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://akaish.github.io/KittyORMPages/_footer/</guid>
      <description>KittyORM project. Copyright © 2018 Denis Bogomolov. Some rights reserved.
KittyORM documentation site powered by Hugo with DocDock theme.

 &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;</description>
    </item>
    
  </channel>
</rss>